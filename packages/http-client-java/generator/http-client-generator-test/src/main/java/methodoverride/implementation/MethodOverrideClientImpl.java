// Code generated by Microsoft (R) TypeSpec Code Generator.

package methodoverride.implementation;

import azure.core.foundations.models.ErrorResponse;
import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.BodyParam;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.QueryParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;
import methodoverride.MethodOverrideServiceVersion;

/**
 * Initializes a new instance of the MethodOverrideClient type.
 */
public final class MethodOverrideClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final MethodOverrideClientService service;

    /**
     * Service host.
     */
    private final String endpoint;

    /**
     * Gets Service host.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Service version.
     */
    private final MethodOverrideServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public MethodOverrideServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * Initializes an instance of MethodOverrideClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Service host.
     * @param serviceVersion Service version.
     */
    public MethodOverrideClientImpl(HttpPipeline httpPipeline, String endpoint,
        MethodOverrideServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service = RestProxy.create(MethodOverrideClientService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for MethodOverrideClient to be used by the proxy service to perform REST
     * calls.
     */
    @ServiceInterface(name = "MethodOverrideClient", host = "{endpoint}")
    public interface MethodOverrideClientService {
        static MethodOverrideClientService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer,
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept) {
            try {
                Class<?> clazz = Class.forName("methodoverride.implementation.MethodOverrideClientServiceImpl");
                return (MethodOverrideClientService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class, String.class, String.class,
                        String.class)
                    .invoke(null, pipeline, serializer, endpoint, apiVersion, accept);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/group-query", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<Void> groupQuery(RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/group-query", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default void groupQuery() {
            groupQuery(null, null, null);
        }

        @HttpRequestInformation(method = HttpMethod.POST, path = "/group-all", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<Void> groupAll(@HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData groupAllRequest, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/group-all", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default void groupAll(@HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData groupAllRequest) {
            groupAll(null, null, contentType, groupAllRequest, null);
        }

        @HttpRequestInformation(method = HttpMethod.POST, path = "/group-part", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<Void> groupPart(@HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData groupPartRequest, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/group-part", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default void groupPart(@HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData groupPartRequest) {
            groupPart(null, null, contentType, groupPartRequest, null);
        }

        @HttpRequestInformation(method = HttpMethod.POST, path = "/group-exclude-body", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<Void> groupExcludeBody(@HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/group-exclude-body", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default void groupExcludeBody(@HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData body) {
            groupExcludeBody(null, null, contentType, body, null);
        }

        @HttpRequestInformation(method = HttpMethod.POST, path = "/group-none", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<Void> groupNone(@HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData groupNoneRequest, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/group-none", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default void groupNone(@HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData groupNoneRequest) {
            groupNone(null, null, contentType, groupNoneRequest, null);
        }
    }

    /**
     * A remote procedure call (RPC) operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>foo</td><td>String</td><td>No</td><td>The foo parameter</td></tr>
     * <tr><td>bar</td><td>String</td><td>No</td><td>The bar parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> groupQueryWithResponse(RequestOptions requestOptions) {
        return service.groupQuery(requestOptions);
    }

    /**
     * A remote procedure call (RPC) operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>foo</td><td>String</td><td>No</td><td>The foo parameter</td></tr>
     * <tr><td>bar</td><td>String</td><td>No</td><td>The bar parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     prop1: String (Required)
     *     prop2: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param groupAllRequest The groupAllRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> groupAllWithResponse(BinaryData groupAllRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        return service.groupAll(contentType, groupAllRequest, requestOptions);
    }

    /**
     * A remote procedure call (RPC) operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>foo</td><td>String</td><td>No</td><td>The foo parameter</td></tr>
     * <tr><td>bar</td><td>String</td><td>No</td><td>The bar parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     prop1: String (Required)
     *     prop2: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param groupPartRequest The groupPartRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> groupPartWithResponse(BinaryData groupPartRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        return service.groupPart(contentType, groupPartRequest, requestOptions);
    }

    /**
     * A remote procedure call (RPC) operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>foo</td><td>String</td><td>No</td><td>The foo parameter</td></tr>
     * <tr><td>bar</td><td>String</td><td>No</td><td>The bar parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     prop1: String (Required)
     *     prop2: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> groupExcludeBodyWithResponse(BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        return service.groupExcludeBody(contentType, body, requestOptions);
    }

    /**
     * A remote procedure call (RPC) operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>foo</td><td>String</td><td>No</td><td>The foo parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>bar</td><td>String</td><td>No</td><td>The bar parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     prop1: String (Required)
     *     prop2: String (Optional)
     *     prop3: String (Optional)
     *     prop4: String (Optional)
     *     prop5: String (Optional)
     *     prop6: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param groupNoneRequest The groupNoneRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> groupNoneWithResponse(BinaryData groupNoneRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        return service.groupNone(contentType, groupNoneRequest, requestOptions);
    }
}
