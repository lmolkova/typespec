// Code generated by Microsoft (R) TypeSpec Code Generator.

package methodoverride;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpHeaderName;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.instrumentation.Instrumentation;
import io.clientcore.core.models.binarydata.BinaryData;
import methodoverride.implementation.MethodOverrideClientImpl;
import methodoverride.implementation.models.GroupAllRequest;
import methodoverride.implementation.models.GroupNoneRequest;
import methodoverride.implementation.models.GroupPartRequest;
import methodoverride.models.GroupAllOptions;
import methodoverride.models.GroupExcludeBodyModel;
import methodoverride.models.GroupPartOptions;
import methodoverride.models.GroupQueryOptions;

/**
 * Initializes a new instance of the synchronous MethodOverrideClient type.
 */
@ServiceClient(builder = MethodOverrideClientBuilder.class)
public final class MethodOverrideClient {
    @Metadata(generated = true)
    private final MethodOverrideClientImpl serviceClient;

    private final Instrumentation instrumentation;

    /**
     * Initializes an instance of MethodOverrideClient class.
     * 
     * @param serviceClient the service client implementation.
     * @param instrumentation the instrumentation instance.
     */
    @Metadata(generated = true)
    MethodOverrideClient(MethodOverrideClientImpl serviceClient, Instrumentation instrumentation) {
        this.serviceClient = serviceClient;
        this.instrumentation = instrumentation;
    }

    /**
     * A remote procedure call (RPC) operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>foo</td><td>String</td><td>No</td><td>The foo parameter</td></tr>
     * <tr><td>bar</td><td>String</td><td>No</td><td>The bar parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> groupQueryWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("MethodOverride.groupQuery", requestOptions,
            updatedOptions -> this.serviceClient.groupQueryWithResponse(updatedOptions));
    }

    /**
     * A remote procedure call (RPC) operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>foo</td><td>String</td><td>No</td><td>The foo parameter</td></tr>
     * <tr><td>bar</td><td>String</td><td>No</td><td>The bar parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     prop1: String (Required)
     *     prop2: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param groupAllRequest The groupAllRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> groupAllWithResponse(BinaryData groupAllRequest, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("MethodOverride.groupAll", requestOptions,
            updatedOptions -> this.serviceClient.groupAllWithResponse(groupAllRequest, updatedOptions));
    }

    /**
     * A remote procedure call (RPC) operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>foo</td><td>String</td><td>No</td><td>The foo parameter</td></tr>
     * <tr><td>bar</td><td>String</td><td>No</td><td>The bar parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     prop1: String (Required)
     *     prop2: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param groupPartRequest The groupPartRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> groupPartWithResponse(BinaryData groupPartRequest, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("MethodOverride.groupPart", requestOptions,
            updatedOptions -> this.serviceClient.groupPartWithResponse(groupPartRequest, updatedOptions));
    }

    /**
     * A remote procedure call (RPC) operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>foo</td><td>String</td><td>No</td><td>The foo parameter</td></tr>
     * <tr><td>bar</td><td>String</td><td>No</td><td>The bar parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     prop1: String (Required)
     *     prop2: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> groupExcludeBodyWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("MethodOverride.groupExcludeBody", requestOptions,
            updatedOptions -> this.serviceClient.groupExcludeBodyWithResponse(body, updatedOptions));
    }

    /**
     * A remote procedure call (RPC) operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>foo</td><td>String</td><td>No</td><td>The foo parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>bar</td><td>String</td><td>No</td><td>The bar parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     prop1: String (Required)
     *     prop2: String (Optional)
     *     prop3: String (Optional)
     *     prop4: String (Optional)
     *     prop5: String (Optional)
     *     prop6: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param groupNoneRequest The groupNoneRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> groupNoneWithResponse(BinaryData groupNoneRequest, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("MethodOverride.groupNone", requestOptions,
            updatedOptions -> this.serviceClient.groupNoneWithResponse(groupNoneRequest, updatedOptions));
    }

    /**
     * A remote procedure call (RPC) operation.
     * 
     * @param options The options parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void groupQuery(GroupQueryOptions options) {
        // Generated convenience method for groupQueryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String foo = options == null ? null : options.getFoo();
        String bar = options == null ? null : options.getBar();
        if (foo != null) {
            requestOptions.addQueryParam("foo", foo);
        }
        if (bar != null) {
            requestOptions.addQueryParam("bar", bar);
        }
        groupQueryWithResponse(requestOptions).getValue();
    }

    /**
     * A remote procedure call (RPC) operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void groupQuery() {
        // Generated convenience method for groupQueryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        groupQueryWithResponse(requestOptions).getValue();
    }

    /**
     * A remote procedure call (RPC) operation.
     * 
     * @param options The options parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void groupAll(GroupAllOptions options) {
        // Generated convenience method for groupAllWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String foo = options.getFoo();
        String bar = options.getBar();
        GroupAllRequest groupAllRequestObj = new GroupAllRequest(options.getProp1()).setProp2(options.getProp2());
        BinaryData groupAllRequest = BinaryData.fromObject(groupAllRequestObj);
        if (foo != null) {
            requestOptions.addQueryParam("foo", foo);
        }
        if (bar != null) {
            requestOptions.addQueryParam("bar", bar);
        }
        groupAllWithResponse(groupAllRequest, requestOptions).getValue();
    }

    /**
     * A remote procedure call (RPC) operation.
     * 
     * @param prop1 The prop1 parameter.
     * @param foo The foo parameter.
     * @param options The options parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void groupPart(String prop1, String foo, GroupPartOptions options) {
        // Generated convenience method for groupPartWithResponse
        RequestOptions requestOptions = new RequestOptions();
        GroupPartRequest groupPartRequestObj = new GroupPartRequest(prop1).setProp2(options.getProp2());
        BinaryData groupPartRequest = BinaryData.fromObject(groupPartRequestObj);
        String bar = options == null ? null : options.getBar();
        if (foo != null) {
            requestOptions.addQueryParam("foo", foo);
        }
        if (bar != null) {
            requestOptions.addQueryParam("bar", bar);
        }
        groupPartWithResponse(groupPartRequest, requestOptions).getValue();
    }

    /**
     * A remote procedure call (RPC) operation.
     * 
     * @param prop1 The prop1 parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void groupPart(String prop1) {
        // Generated convenience method for groupPartWithResponse
        RequestOptions requestOptions = new RequestOptions();
        GroupPartRequest groupPartRequestObj = new GroupPartRequest(prop1);
        BinaryData groupPartRequest = BinaryData.fromObject(groupPartRequestObj);
        groupPartWithResponse(groupPartRequest, requestOptions).getValue();
    }

    /**
     * A remote procedure call (RPC) operation.
     * 
     * @param body The body parameter.
     * @param options The options parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void groupExcludeBody(GroupExcludeBodyModel body, GroupQueryOptions options) {
        // Generated convenience method for groupExcludeBodyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String foo = options == null ? null : options.getFoo();
        String bar = options == null ? null : options.getBar();
        if (foo != null) {
            requestOptions.addQueryParam("foo", foo);
        }
        if (bar != null) {
            requestOptions.addQueryParam("bar", bar);
        }
        groupExcludeBodyWithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * A remote procedure call (RPC) operation.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void groupExcludeBody(GroupExcludeBodyModel body) {
        // Generated convenience method for groupExcludeBodyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        groupExcludeBodyWithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * A remote procedure call (RPC) operation.
     * 
     * @param prop1 The prop1 parameter.
     * @param foo The foo parameter.
     * @param bar The bar parameter.
     * @param prop2 The prop2 parameter.
     * @param prop3 The prop3 parameter.
     * @param prop4 The prop4 parameter.
     * @param prop5 The prop5 parameter.
     * @param prop6 The prop6 parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void groupNone(String prop1, String foo, String bar, String prop2, String prop3, String prop4, String prop5,
        String prop6) {
        // Generated convenience method for groupNoneWithResponse
        RequestOptions requestOptions = new RequestOptions();
        GroupNoneRequest groupNoneRequestObj = new GroupNoneRequest(prop1).setProp2(prop2)
            .setProp3(prop3)
            .setProp4(prop4)
            .setProp5(prop5)
            .setProp6(prop6);
        BinaryData groupNoneRequest = BinaryData.fromObject(groupNoneRequestObj);
        if (foo != null) {
            requestOptions.addQueryParam("foo", foo);
        }
        if (bar != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("bar"), bar);
        }
        groupNoneWithResponse(groupNoneRequest, requestOptions).getValue();
    }

    /**
     * A remote procedure call (RPC) operation.
     * 
     * @param prop1 The prop1 parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void groupNone(String prop1) {
        // Generated convenience method for groupNoneWithResponse
        RequestOptions requestOptions = new RequestOptions();
        GroupNoneRequest groupNoneRequestObj = new GroupNoneRequest(prop1);
        BinaryData groupNoneRequest = BinaryData.fromObject(groupNoneRequestObj);
        groupNoneWithResponse(groupNoneRequest, requestOptions).getValue();
    }
}
