// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.partialupdate.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;

/**
 * The PartialUpdateModel model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class PartialUpdateModel implements JsonSerializable<PartialUpdateModel> {
    /*
     * The boolean property.
     */
    @Metadata(generated = true)
    private final boolean booleanProperty;

    /*
     * The string property.
     */
    @Metadata(generated = true)
    private final String string;

    /*
     * The bytes property.
     */
    @Metadata(generated = true)
    private final byte[] bytes;

    /*
     * The aggregation function to be applied on the client metric. Allowed functions
     * - ‘percentage’ - for error metric , ‘avg’, ‘p50’, ‘p90’, ‘p95’, ‘p99’, ‘min’,
     * ‘max’ - for response_time_ms and latency metric, ‘avg’ - for requests_per_sec,
     * ‘count’ - for requests
     */
    @Metadata(generated = true)
    private String aggregate;

    /**
     * Creates an instance of PartialUpdateModel class.
     * 
     * @param booleanProperty the booleanProperty value to set.
     * @param string the string value to set.
     * @param bytes the bytes value to set.
     */
    @Metadata(generated = true)
    private PartialUpdateModel(boolean booleanProperty, String string, byte[] bytes) {
        this.booleanProperty = booleanProperty;
        this.string = string;
        this.bytes = bytes;
    }

    /**
     * Get the booleanProperty property: The boolean property.
     * 
     * @return the booleanProperty value.
     */
    @Metadata(generated = true)
    public boolean isBooleanProperty() {
        return this.booleanProperty;
    }

    /**
     * Get the string property: The string property.
     * 
     * @return the string value.
     */
    @Metadata(generated = true)
    public String getString() {
        return this.string;
    }

    /**
     * Get the bytes property: The bytes property.
     * 
     * @return the bytes value.
     */
    @Metadata(generated = true)
    public byte[] getBytes() {
        return this.bytes;
    }

    /**
     * Get the aggregate property: The aggregation function to be applied on the client metric. Allowed functions
     * - ‘percentage’ - for error metric , ‘avg’, ‘p50’, ‘p90’, ‘p95’, ‘p99’, ‘min’,
     * ‘max’ - for response_time_ms and latency metric, ‘avg’ - for requests_per_sec,
     * ‘count’ - for requests.
     * 
     * @return the aggregate value.
     */
    @Metadata(generated = true)
    public String getAggregate() {
        return this.aggregate;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("boolean", this.booleanProperty);
        jsonWriter.writeStringField("string", this.string);
        jsonWriter.writeBinaryField("bytes", this.bytes);
        jsonWriter.writeStringField("aggregate", this.aggregate);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PartialUpdateModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PartialUpdateModel if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PartialUpdateModel.
     */
    @Metadata(generated = true)
    public static PartialUpdateModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean booleanProperty = false;
            String string = null;
            byte[] bytes = null;
            String aggregate = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("boolean".equals(fieldName)) {
                    booleanProperty = reader.getBoolean();
                } else if ("string".equals(fieldName)) {
                    string = reader.getString();
                } else if ("bytes".equals(fieldName)) {
                    bytes = reader.getBinary();
                } else if ("aggregate".equals(fieldName)) {
                    aggregate = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            PartialUpdateModel deserializedPartialUpdateModel = new PartialUpdateModel(booleanProperty, string, bytes);
            deserializedPartialUpdateModel.aggregate = aggregate;

            return deserializedPartialUpdateModel;
        });
    }
}
