// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.protocolandconvenient.implementation;

import azure.core.foundations.implementation.models.PagedResourceJ;
import azure.core.foundations.models.ErrorResponse;
import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.BodyParam;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.PathParam;
import io.clientcore.core.http.annotations.QueryParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.PagedIterable;
import io.clientcore.core.http.models.PagedResponse;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.ObjectSerializer;
import io.clientcore.core.utils.Context;
import java.lang.reflect.InvocationTargetException;
import tsptest.protocolandconvenient.ProtocolAndConvenientServiceVersion;
import tsptest.protocolandconvenient.models.ResourceB;
import tsptest.protocolandconvenient.models.ResourceD;
import tsptest.protocolandconvenient.models.ResourceF;
import tsptest.protocolandconvenient.models.ResourceH;
import tsptest.protocolandconvenient.models.ResourceI;
import tsptest.protocolandconvenient.models.ResourceJ;

/**
 * An instance of this class provides access to all the operations defined in ProtocolAndConvenienceOps.
 */
public final class ProtocolAndConvenienceOpsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ProtocolAndConvenienceOpsService service;

    /**
     * The service client containing this operation class.
     */
    private final ProtocolAndConvenientClientImpl client;

    /**
     * Initializes an instance of ProtocolAndConvenienceOpsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ProtocolAndConvenienceOpsImpl(ProtocolAndConvenientClientImpl client) {
        this.service = RestProxy.create(ProtocolAndConvenienceOpsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public ProtocolAndConvenientServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for ProtocolAndConvenientClientProtocolAndConvenienceOps to be used by
     * the proxy service to perform REST calls.
     */
    @ServiceInterface(name = "ProtocolAndConvenien", host = "{endpoint}")
    public interface ProtocolAndConvenienceOpsService {
        static ProtocolAndConvenienceOpsService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer) {
            try {
                Class<?> clazz = Class
                    .forName("tsptest.protocolandconvenient.implementation.ProtocolAndConvenienceOpsServiceImpl");
                return (ProtocolAndConvenienceOpsService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class)
                    .invoke(null, pipeline, serializer);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/protocolandconvenient/onlyConvenient",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<ResourceB> onlyConvenient(@HostParam("endpoint") String endpoint,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/protocolandconvenient/onlyConvenient",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default ResourceB onlyConvenient(@HostParam("endpoint") String endpoint,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body) {
            return onlyConvenient(endpoint, contentType, accept, body, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/protocolandconvenient/onlyProtocol",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<ResourceD> onlyProtocol(@HostParam("endpoint") String endpoint,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/protocolandconvenient/onlyProtocol",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default ResourceD onlyProtocol(@HostParam("endpoint") String endpoint,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body) {
            return onlyProtocol(endpoint, contentType, accept, body, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/protocolandconvenient/bothConvenientAndProtocol",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<ResourceF> bothConvenientAndProtocol(@HostParam("endpoint") String endpoint,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/protocolandconvenient/bothConvenientAndProtocol",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default ResourceF bothConvenientAndProtocol(@HostParam("endpoint") String endpoint,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body) {
            return bothConvenientAndProtocol(endpoint, contentType, accept, body, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/protocolandconvenient/errorSetting",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<ResourceH> errorSetting(@HostParam("endpoint") String endpoint,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/protocolandconvenient/errorSetting",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default ResourceH errorSetting(@HostParam("endpoint") String endpoint,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body) {
            return errorSetting(endpoint, contentType, accept, body, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.PUT,
            path = "/protocolandconvenient/resources/{name}",
            expectedStatusCodes = { 200, 201 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<ResourceI> createOrReplace(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData resource, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.PUT,
            path = "/protocolandconvenient/resources/{name}",
            expectedStatusCodes = { 200, 201 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default ResourceI createOrReplace(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData resource) {
            return createOrReplace(endpoint, apiVersion, name, contentType, accept, resource, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/protocolandconvenient/resources",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<PagedResourceJ> list(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/protocolandconvenient/resources",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default PagedResourceJ list(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept) {
            return list(endpoint, apiVersion, null, accept, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<PagedResourceJ> listNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default PagedResourceJ listNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept) {
            return listNext(nextLink, endpoint, accept, null).getValue();
        }
    }

    /**
     * When set protocol false and convenient true, then the protocol method should be package private.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<ResourceB> onlyConvenientWithResponse(BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.onlyConvenient(this.client.getEndpoint(), contentType, accept, body, requestOptions);
    }

    /**
     * When set protocol true and convenient false, only the protocol method should be generated, ResourceC and
     * ResourceD should not be generated.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<ResourceD> onlyProtocolWithResponse(BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.onlyProtocol(this.client.getEndpoint(), contentType, accept, body, requestOptions);
    }

    /**
     * Setting protocol true and convenient true, both convenient and protocol methods will be generated.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<ResourceF> bothConvenientAndProtocolWithResponse(BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.bothConvenientAndProtocol(this.client.getEndpoint(), contentType, accept, body, requestOptions);
    }

    /**
     * When set protocol false and convenient false.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<ResourceH> errorSettingWithResponse(BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.errorSetting(this.client.getEndpoint(), contentType, accept, body, requestOptions);
    }

    /**
     * Paging operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxresults</td><td>Long</td><td>No</td><td>The maxPageSize parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * PagedResourceJ
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return paged collection of ResourceJ items.
     */
    private PagedResponse<ResourceJ> listSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<PagedResourceJ> res = service.list(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getValue(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Paging operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxresults</td><td>Long</td><td>No</td><td>The maxPageSize parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * PagedResourceJ
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return paged collection of ResourceJ items.
     */
    public PagedIterable<ResourceJ> list(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(requestOptions != null && requestOptions.getContext() != null
            ? requestOptions.getContext()
            : Context.none());
        return new PagedIterable<>((pagingOptions) -> listSinglePage(requestOptions),
            (pagingOptions, nextLink) -> listNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * PagedResourceJ
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return paged collection of ResourceJ items.
     */
    private PagedResponse<ResourceJ> listNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<PagedResourceJ> res = service.listNext(nextLink, this.client.getEndpoint(), accept, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getValue(), null, res.getValue().getNextLink(), null, null, null);
    }
}
