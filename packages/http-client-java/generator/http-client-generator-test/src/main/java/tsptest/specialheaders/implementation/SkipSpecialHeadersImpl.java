// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.specialheaders.implementation;

import azure.core.foundations.models.ErrorResponse;
import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.PathParam;
import io.clientcore.core.http.annotations.QueryParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;
import tsptest.specialheaders.SpecialHeadersServiceVersion;

/**
 * An instance of this class provides access to all the operations defined in SkipSpecialHeaders.
 */
public final class SkipSpecialHeadersImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SkipSpecialHeadersService service;

    /**
     * The service client containing this operation class.
     */
    private final SpecialHeadersClientImpl client;

    /**
     * Initializes an instance of SkipSpecialHeadersImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    SkipSpecialHeadersImpl(SpecialHeadersClientImpl client) {
        this.service = RestProxy.create(SkipSpecialHeadersService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public SpecialHeadersServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for SpecialHeadersClientSkipSpecialHeaders to be used by the proxy
     * service to perform REST calls.
     */
    @ServiceInterface(name = "SpecialHeadersClient", host = "{endpoint}")
    public interface SkipSpecialHeadersService {
        static SkipSpecialHeadersService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer) {
            try {
                Class<?> clazz = Class.forName("tsptest.specialheaders.implementation.SkipSpecialHeadersServiceImpl");
                return (SkipSpecialHeadersService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class)
                    .invoke(null, pipeline, serializer);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(
            method = HttpMethod.DELETE,
            path = "/skip-special-headers/resources/{name}",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<Void> deleteWithSpecialHeaders(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("foo") String foo, @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.DELETE,
            path = "/skip-special-headers/resources/{name}",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default void deleteWithSpecialHeaders(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("foo") String foo, @HeaderParam("Accept") String accept) {
            deleteWithSpecialHeaders(endpoint, apiVersion, name, foo, accept, null);
        }
    }

    /**
     * skip special headers.
     * 
     * @param name The name parameter.
     * @param foo The foo parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> deleteWithSpecialHeadersWithResponse(String name, String foo, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteWithSpecialHeaders(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            name, foo, accept, requestOptions);
    }
}
