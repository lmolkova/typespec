// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.flatten.implementation.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;
import tsptest.flatten.models.User;

/**
 * The SendRequest model.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class SendRequest implements JsonSerializable<SendRequest> {
    /*
     * The endpoint property.
     */
    @Metadata(generated = true)
    private final String endpoint;

    /*
     * The user property.
     */
    @Metadata(generated = true)
    private User user;

    /*
     * The input property.
     */
    @Metadata(generated = true)
    private final String input;

    /*
     * The constant property.
     */
    @Metadata(generated = true)
    private final String constant = "constant";

    /*
     * The requiredInt property.
     */
    @Metadata(generated = true)
    private final int requiredInt;

    /**
     * Creates an instance of SendRequest class.
     * 
     * @param endpoint the endpoint value to set.
     * @param input the input value to set.
     * @param requiredInt the requiredInt value to set.
     */
    @Metadata(generated = true)
    public SendRequest(String endpoint, String input, int requiredInt) {
        this.endpoint = endpoint;
        this.input = input;
        this.requiredInt = requiredInt;
    }

    /**
     * Get the endpoint property: The endpoint property.
     * 
     * @return the endpoint value.
     */
    @Metadata(generated = true)
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Get the user property: The user property.
     * 
     * @return the user value.
     */
    @Metadata(generated = true)
    public User getUser() {
        return this.user;
    }

    /**
     * Set the user property: The user property.
     * 
     * @param user the user value to set.
     * @return the SendRequest object itself.
     */
    @Metadata(generated = true)
    public SendRequest setUser(User user) {
        this.user = user;
        return this;
    }

    /**
     * Get the input property: The input property.
     * 
     * @return the input value.
     */
    @Metadata(generated = true)
    public String getInput() {
        return this.input;
    }

    /**
     * Get the constant property: The constant property.
     * 
     * @return the constant value.
     */
    @Metadata(generated = true)
    public String getConstant() {
        return this.constant;
    }

    /**
     * Get the requiredInt property: The requiredInt property.
     * 
     * @return the requiredInt value.
     */
    @Metadata(generated = true)
    public int getRequiredInt() {
        return this.requiredInt;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("endpoint", this.endpoint);
        jsonWriter.writeStringField("input", this.input);
        jsonWriter.writeStringField("constant", this.constant);
        jsonWriter.writeIntField("requiredInt", this.requiredInt);
        jsonWriter.writeJsonField("user", this.user);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SendRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SendRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SendRequest.
     */
    @Metadata(generated = true)
    public static SendRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String endpoint = null;
            String input = null;
            int requiredInt = 0;
            User user = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("endpoint".equals(fieldName)) {
                    endpoint = reader.getString();
                } else if ("input".equals(fieldName)) {
                    input = reader.getString();
                } else if ("requiredInt".equals(fieldName)) {
                    requiredInt = reader.getInt();
                } else if ("user".equals(fieldName)) {
                    user = User.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            SendRequest deserializedSendRequest = new SendRequest(endpoint, input, requiredInt);
            deserializedSendRequest.user = user;

            return deserializedSendRequest;
        });
    }
}
