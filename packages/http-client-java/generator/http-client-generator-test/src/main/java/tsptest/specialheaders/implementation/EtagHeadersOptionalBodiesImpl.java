// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.specialheaders.implementation;

import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.QueryParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;
import tsptest.specialheaders.SpecialHeadersServiceVersion;
import tsptest.specialheaders.models.Resource;

/**
 * An instance of this class provides access to all the operations defined in EtagHeadersOptionalBodies.
 */
public final class EtagHeadersOptionalBodiesImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final EtagHeadersOptionalBodiesService service;

    /**
     * The service client containing this operation class.
     */
    private final SpecialHeadersClientImpl client;

    /**
     * Initializes an instance of EtagHeadersOptionalBodiesImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    EtagHeadersOptionalBodiesImpl(SpecialHeadersClientImpl client) {
        this.service = RestProxy.create(EtagHeadersOptionalBodiesService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public SpecialHeadersServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for SpecialHeadersClientEtagHeadersOptionalBodies to be used by the proxy
     * service to perform REST calls.
     */
    @ServiceInterface(name = "SpecialHeadersClient", host = "{endpoint}")
    public interface EtagHeadersOptionalBodiesService {
        static EtagHeadersOptionalBodiesService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer) {
            try {
                Class<?> clazz
                    = Class.forName("tsptest.specialheaders.implementation.EtagHeadersOptionalBodiesServiceImpl");
                return (EtagHeadersOptionalBodiesService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class)
                    .invoke(null, pipeline, serializer);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(
            method = HttpMethod.PUT,
            path = "/etag-headers-optional-body",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Resource> putWithOptionalBody(@HostParam("endpoint") String endpoint,
            @QueryParam("format") String format, @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.PUT,
            path = "/etag-headers-optional-body",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default Resource putWithOptionalBody(@HostParam("endpoint") String endpoint,
            @QueryParam("format") String format, @HeaderParam("Accept") String accept) {
            return putWithOptionalBody(null, endpoint, format, null, null, null, null, null, null, accept, null, null)
                .getValue();
        }
    }

    /**
     * etag headers among other optional query/header/body parameters.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>The filter parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>timestamp</td><td>OffsetDateTime</td><td>No</td><td>The timestamp parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String (Optional, Required on create)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String (Optional, Required on create)
     * }
     * }
     * </pre>
     * 
     * @param format The format parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Resource> putWithOptionalBodyWithResponse(String format, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.putWithOptionalBody(this.client.getEndpoint(), format, accept, requestOptions);
    }
}
