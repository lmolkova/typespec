// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.enumservice;

import com.azure.v2.core.util.serializer.CollectionFormat;
import com.azure.v2.core.util.serializer.JacksonAdapter;
import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpHeaderName;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.instrumentation.Instrumentation;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import tsptest.enumservice.implementation.EnumServiceClientImpl;
import tsptest.enumservice.models.Color;
import tsptest.enumservice.models.ColorModel;
import tsptest.enumservice.models.Operation;
import tsptest.enumservice.models.OperationStateValues;
import tsptest.enumservice.models.Priority;

/**
 * Initializes a new instance of the synchronous EnumServiceClient type.
 */
@ServiceClient(builder = EnumServiceClientBuilder.class)
public final class EnumServiceClient {
    @Metadata(generated = true)
    private final EnumServiceClientImpl serviceClient;

    private final Instrumentation instrumentation;

    /**
     * Initializes an instance of EnumServiceClient class.
     * 
     * @param serviceClient the service client implementation.
     * @param instrumentation the instrumentation instance.
     */
    @Metadata(generated = true)
    EnumServiceClient(EnumServiceClientImpl serviceClient, Instrumentation instrumentation) {
        this.serviceClient = serviceClient;
        this.instrumentation = instrumentation;
    }

    /**
     * The getColor operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String(Red/Blue/Green)
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Color> getColorWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.EnumService.EnumOp.getColor", requestOptions,
            updatedOptions -> this.serviceClient.getColorWithResponse(updatedOptions));
    }

    /**
     * The getColorModel operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String(Red/Blue/Green)
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<ColorModel> getColorModelWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.EnumService.EnumOp.getColorModel", requestOptions,
            updatedOptions -> this.serviceClient.getColorModelWithResponse(updatedOptions));
    }

    /**
     * The setColorModel operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String(Read/Write) (Required)
     *     best: boolean (Required)
     *     age: int (Required)
     *     priority: String(100/0) (Required)
     *     color: String(Red/Blue/Green) (Required)
     *     unit: String(1/0.001/1000) (Required)
     *     priorityValue: String(100/0) (Required)
     *     colorValue: String(Red/Blue/Green) (Required)
     *     colorModelValue: String(Red/Blue/Green) (Required)
     *     unitValue: String(1/0.001/1000) (Optional)
     *     olympicRecord: String(9.58/19.3) (Optional)
     *     olympicRecordValue: String(9.58/19.3) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param color The color parameter. Allowed values: "Red", "Blue", "Green".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Operation> setColorModelWithResponse(String color, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.EnumService.EnumOp.setColorModel", requestOptions,
            updatedOptions -> this.serviceClient.setColorModelWithResponse(color, updatedOptions));
    }

    /**
     * The setPriority operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String(Read/Write) (Required)
     *     best: boolean (Required)
     *     age: int (Required)
     *     priority: String(100/0) (Required)
     *     color: String(Red/Blue/Green) (Required)
     *     unit: String(1/0.001/1000) (Required)
     *     priorityValue: String(100/0) (Required)
     *     colorValue: String(Red/Blue/Green) (Required)
     *     colorModelValue: String(Red/Blue/Green) (Required)
     *     unitValue: String(1/0.001/1000) (Optional)
     *     olympicRecord: String(9.58/19.3) (Optional)
     *     olympicRecordValue: String(9.58/19.3) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param priority The priority parameter. Allowed values: 100, 0.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Operation> setPriorityWithResponse(String priority, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.EnumService.EnumOp.setPriority", requestOptions,
            updatedOptions -> this.serviceClient.setPriorityWithResponse(priority, updatedOptions));
    }

    /**
     * The getRunningOperation operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String(Read/Write) (Required)
     *     best: boolean (Required)
     *     age: int (Required)
     *     priority: String(100/0) (Required)
     *     color: String(Red/Blue/Green) (Required)
     *     unit: String(1/0.001/1000) (Required)
     *     priorityValue: String(100/0) (Required)
     *     colorValue: String(Red/Blue/Green) (Required)
     *     colorModelValue: String(Red/Blue/Green) (Required)
     *     unitValue: String(1/0.001/1000) (Optional)
     *     olympicRecord: String(9.58/19.3) (Optional)
     *     olympicRecordValue: String(9.58/19.3) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Operation> getRunningOperationWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.EnumService.EnumOp.getRunningOperation",
            requestOptions, updatedOptions -> this.serviceClient.getRunningOperationWithResponse(updatedOptions));
    }

    /**
     * The getOperation operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String(Read/Write) (Required)
     *     best: boolean (Required)
     *     age: int (Required)
     *     priority: String(100/0) (Required)
     *     color: String(Red/Blue/Green) (Required)
     *     unit: String(1/0.001/1000) (Required)
     *     priorityValue: String(100/0) (Required)
     *     colorValue: String(Red/Blue/Green) (Required)
     *     colorModelValue: String(Red/Blue/Green) (Required)
     *     unitValue: String(1/0.001/1000) (Optional)
     *     olympicRecord: String(9.58/19.3) (Optional)
     *     olympicRecordValue: String(9.58/19.3) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param state The state parameter. Allowed values: "Running", "Completed", "Failed".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Operation> getOperationWithResponse(String state, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.EnumService.EnumOp.getOperation", requestOptions,
            updatedOptions -> this.serviceClient.getOperationWithResponse(state, updatedOptions));
    }

    /**
     * The setStringEnumArray operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>colorArrayOpt</td><td>List&lt;String&gt;</td><td>No</td><td>The colorArrayOpt parameter. In the form of
     * "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param colorArray The colorArray parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public Response<String> setStringEnumArrayWithResponse(List<String> colorArray, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.EnumService.EnumOp.setStringEnumArray",
            requestOptions,
            updatedOptions -> this.serviceClient.setStringEnumArrayWithResponse(colorArray, updatedOptions));
    }

    /**
     * The setIntEnumArray operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>priorityArrayOpt</td><td>List&lt;String&gt;</td><td>No</td><td>The priorityArrayOpt parameter. In the
     * form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param priorityArray The priorityArray parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public Response<String> setIntEnumArrayWithResponse(List<String> priorityArray, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.EnumService.EnumOp.setIntEnumArray", requestOptions,
            updatedOptions -> this.serviceClient.setIntEnumArrayWithResponse(priorityArray, updatedOptions));
    }

    /**
     * The setStringArray operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>stringArrayOpt</td><td>List&lt;String&gt;</td><td>No</td><td>The stringArrayOpt parameter. In the form of
     * "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param stringArray The stringArray parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public Response<String> setStringArrayWithResponse(List<String> stringArray, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.EnumService.EnumOp.setStringArray", requestOptions,
            updatedOptions -> this.serviceClient.setStringArrayWithResponse(stringArray, updatedOptions));
    }

    /**
     * The setIntArray operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>intArrayOpt</td><td>List&lt;Integer&gt;</td><td>No</td><td>The intArrayOpt parameter. In the form of ","
     * separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param intArray The intArray parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public Response<String> setIntArrayWithResponse(List<Integer> intArray, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.EnumService.EnumOp.setIntArray", requestOptions,
            updatedOptions -> this.serviceClient.setIntArrayWithResponse(intArray, updatedOptions));
    }

    /**
     * The setStringEnumMulti operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>colorArrayOpt</td><td>List&lt;String&gt;</td><td>No</td><td>The colorArrayOpt parameter. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param colorArray The colorArray parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public Response<String> setStringEnumMultiWithResponse(List<String> colorArray, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.EnumService.EnumOp.setStringEnumMulti",
            requestOptions,
            updatedOptions -> this.serviceClient.setStringEnumMultiWithResponse(colorArray, updatedOptions));
    }

    /**
     * The setIntEnumMulti operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>priorityArrayOpt</td><td>List&lt;String&gt;</td><td>No</td><td>The priorityArrayOpt parameter. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param priorityArray The priorityArray parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public Response<String> setIntEnumMultiWithResponse(List<String> priorityArray, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.EnumService.EnumOp.setIntEnumMulti", requestOptions,
            updatedOptions -> this.serviceClient.setIntEnumMultiWithResponse(priorityArray, updatedOptions));
    }

    /**
     * The setStringMulti operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>stringArrayOpt</td><td>List&lt;String&gt;</td><td>No</td><td>The stringArrayOpt parameter. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param stringArray The stringArray parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public Response<String> setStringMultiWithResponse(List<String> stringArray, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.EnumService.EnumOp.setStringMulti", requestOptions,
            updatedOptions -> this.serviceClient.setStringMultiWithResponse(stringArray, updatedOptions));
    }

    /**
     * The setIntMulti operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>intArrayOpt</td><td>List&lt;Integer&gt;</td><td>No</td><td>The intArrayOpt parameter. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param intArray The intArray parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public Response<String> setIntMultiWithResponse(List<Integer> intArray, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.EnumService.EnumOp.setIntMulti", requestOptions,
            updatedOptions -> this.serviceClient.setIntMultiWithResponse(intArray, updatedOptions));
    }

    /**
     * The setStringEnumArrayHeader operation.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>color-array-opt</td><td>List&lt;String&gt;</td><td>No</td><td>The colorArrayOpt parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param colorArray The colorArray parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public Response<String> setStringEnumArrayHeaderWithResponse(List<String> colorArray,
        RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.EnumService.EnumOp.setStringEnumArrayHeader",
            requestOptions,
            updatedOptions -> this.serviceClient.setStringEnumArrayHeaderWithResponse(colorArray, updatedOptions));
    }

    /**
     * The getColor operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Color getColor() {
        // Generated convenience method for getColorWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getColorWithResponse(requestOptions).getValue();
    }

    /**
     * The getColorModel operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public ColorModel getColorModel() {
        // Generated convenience method for getColorModelWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getColorModelWithResponse(requestOptions).getValue();
    }

    /**
     * The setColorModel operation.
     * 
     * @param color The color parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Operation setColorModel(ColorModel color) {
        // Generated convenience method for setColorModelWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return setColorModelWithResponse(color.toString(), requestOptions).getValue();
    }

    /**
     * The setPriority operation.
     * 
     * @param priority The priority parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Operation setPriority(Priority priority) {
        // Generated convenience method for setPriorityWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return setPriorityWithResponse(String.valueOf(priority.toInt()), requestOptions).getValue();
    }

    /**
     * The getRunningOperation operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Operation getRunningOperation() {
        // Generated convenience method for getRunningOperationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getRunningOperationWithResponse(requestOptions).getValue();
    }

    /**
     * The getOperation operation.
     * 
     * @param state The state parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Operation getOperation(OperationStateValues state) {
        // Generated convenience method for getOperationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getOperationWithResponse(state.toString(), requestOptions).getValue();
    }

    /**
     * The setStringEnumArray operation.
     * 
     * @param colorArray The colorArray parameter.
     * @param colorArrayOpt The colorArrayOpt parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public String setStringEnumArray(List<ColorModel> colorArray, List<ColorModel> colorArrayOpt) {
        // Generated convenience method for setStringEnumArrayWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (colorArrayOpt != null) {
            requestOptions.addQueryParam("colorArrayOpt",
                colorArrayOpt.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")));
        }
        return setStringEnumArrayWithResponse(colorArray.stream()
            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
            .collect(Collectors.toList()), requestOptions).getValue();
    }

    /**
     * The setStringEnumArray operation.
     * 
     * @param colorArray The colorArray parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public String setStringEnumArray(List<ColorModel> colorArray) {
        // Generated convenience method for setStringEnumArrayWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return setStringEnumArrayWithResponse(colorArray.stream()
            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
            .collect(Collectors.toList()), requestOptions).getValue();
    }

    /**
     * The setIntEnumArray operation.
     * 
     * @param priorityArray The priorityArray parameter.
     * @param priorityArrayOpt The priorityArrayOpt parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public String setIntEnumArray(List<Priority> priorityArray, List<Priority> priorityArrayOpt) {
        // Generated convenience method for setIntEnumArrayWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (priorityArrayOpt != null) {
            requestOptions.addQueryParam("priorityArrayOpt",
                priorityArrayOpt.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue == null ? null : paramItemValue.toInt(), ""))
                    .collect(Collectors.joining(",")));
        }
        return setIntEnumArrayWithResponse(priorityArray.stream()
            .map(paramItemValue -> paramItemValue == null ? "" : String.valueOf(paramItemValue.toInt()))
            .collect(Collectors.toList()), requestOptions).getValue();
    }

    /**
     * The setIntEnumArray operation.
     * 
     * @param priorityArray The priorityArray parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public String setIntEnumArray(List<Priority> priorityArray) {
        // Generated convenience method for setIntEnumArrayWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return setIntEnumArrayWithResponse(priorityArray.stream()
            .map(paramItemValue -> paramItemValue == null ? "" : String.valueOf(paramItemValue.toInt()))
            .collect(Collectors.toList()), requestOptions).getValue();
    }

    /**
     * The setStringArray operation.
     * 
     * @param stringArray The stringArray parameter.
     * @param stringArrayOpt The stringArrayOpt parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public String setStringArray(List<String> stringArray, List<String> stringArrayOpt) {
        // Generated convenience method for setStringArrayWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (stringArrayOpt != null) {
            requestOptions.addQueryParam("stringArrayOpt",
                stringArrayOpt.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")));
        }
        return setStringArrayWithResponse(stringArray, requestOptions).getValue();
    }

    /**
     * The setStringArray operation.
     * 
     * @param stringArray The stringArray parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public String setStringArray(List<String> stringArray) {
        // Generated convenience method for setStringArrayWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return setStringArrayWithResponse(stringArray, requestOptions).getValue();
    }

    /**
     * The setIntArray operation.
     * 
     * @param intArray The intArray parameter.
     * @param intArrayOpt The intArrayOpt parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public String setIntArray(List<Integer> intArray, List<Integer> intArrayOpt) {
        // Generated convenience method for setIntArrayWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (intArrayOpt != null) {
            requestOptions.addQueryParam("intArrayOpt",
                JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(intArrayOpt, CollectionFormat.CSV));
        }
        return setIntArrayWithResponse(intArray, requestOptions).getValue();
    }

    /**
     * The setIntArray operation.
     * 
     * @param intArray The intArray parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public String setIntArray(List<Integer> intArray) {
        // Generated convenience method for setIntArrayWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return setIntArrayWithResponse(intArray, requestOptions).getValue();
    }

    /**
     * The setStringEnumMulti operation.
     * 
     * @param colorArray The colorArray parameter.
     * @param colorArrayOpt The colorArrayOpt parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public String setStringEnumMulti(List<ColorModel> colorArray, List<ColorModel> colorArrayOpt) {
        // Generated convenience method for setStringEnumMultiWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (colorArrayOpt != null) {
            for (ColorModel paramItemValue : colorArrayOpt) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("colorArrayOpt", paramItemValue.toString());
                }
            }
        }
        return setStringEnumMultiWithResponse(colorArray.stream()
            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
            .collect(Collectors.toList()), requestOptions).getValue();
    }

    /**
     * The setStringEnumMulti operation.
     * 
     * @param colorArray The colorArray parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public String setStringEnumMulti(List<ColorModel> colorArray) {
        // Generated convenience method for setStringEnumMultiWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return setStringEnumMultiWithResponse(colorArray.stream()
            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
            .collect(Collectors.toList()), requestOptions).getValue();
    }

    /**
     * The setIntEnumMulti operation.
     * 
     * @param priorityArray The priorityArray parameter.
     * @param priorityArrayOpt The priorityArrayOpt parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public String setIntEnumMulti(List<Priority> priorityArray, List<Priority> priorityArrayOpt) {
        // Generated convenience method for setIntEnumMultiWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (priorityArrayOpt != null) {
            for (Priority paramItemValue : priorityArrayOpt) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("priorityArrayOpt", String.valueOf(paramItemValue.toInt()));
                }
            }
        }
        return setIntEnumMultiWithResponse(priorityArray.stream()
            .map(paramItemValue -> paramItemValue == null ? "" : String.valueOf(paramItemValue.toInt()))
            .collect(Collectors.toList()), requestOptions).getValue();
    }

    /**
     * The setIntEnumMulti operation.
     * 
     * @param priorityArray The priorityArray parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public String setIntEnumMulti(List<Priority> priorityArray) {
        // Generated convenience method for setIntEnumMultiWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return setIntEnumMultiWithResponse(priorityArray.stream()
            .map(paramItemValue -> paramItemValue == null ? "" : String.valueOf(paramItemValue.toInt()))
            .collect(Collectors.toList()), requestOptions).getValue();
    }

    /**
     * The setStringMulti operation.
     * 
     * @param stringArray The stringArray parameter.
     * @param stringArrayOpt The stringArrayOpt parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public String setStringMulti(List<String> stringArray, List<String> stringArrayOpt) {
        // Generated convenience method for setStringMultiWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (stringArrayOpt != null) {
            for (String paramItemValue : stringArrayOpt) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("stringArrayOpt", paramItemValue);
                }
            }
        }
        return setStringMultiWithResponse(stringArray, requestOptions).getValue();
    }

    /**
     * The setStringMulti operation.
     * 
     * @param stringArray The stringArray parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public String setStringMulti(List<String> stringArray) {
        // Generated convenience method for setStringMultiWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return setStringMultiWithResponse(stringArray, requestOptions).getValue();
    }

    /**
     * The setIntMulti operation.
     * 
     * @param intArray The intArray parameter.
     * @param intArrayOpt The intArrayOpt parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public String setIntMulti(List<Integer> intArray, List<Integer> intArrayOpt) {
        // Generated convenience method for setIntMultiWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (intArrayOpt != null) {
            for (int paramItemValue : intArrayOpt) {
                requestOptions.addQueryParam("intArrayOpt", String.valueOf(paramItemValue));
            }
        }
        return setIntMultiWithResponse(intArray, requestOptions).getValue();
    }

    /**
     * The setIntMulti operation.
     * 
     * @param intArray The intArray parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public String setIntMulti(List<Integer> intArray) {
        // Generated convenience method for setIntMultiWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return setIntMultiWithResponse(intArray, requestOptions).getValue();
    }

    /**
     * The setStringEnumArrayHeader operation.
     * 
     * @param colorArray The colorArray parameter.
     * @param colorArrayOpt The colorArrayOpt parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public String setStringEnumArrayHeader(List<ColorModel> colorArray, List<ColorModel> colorArrayOpt) {
        // Generated convenience method for setStringEnumArrayHeaderWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (colorArrayOpt != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("color-array-opt"),
                colorArrayOpt.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")));
        }
        return setStringEnumArrayHeaderWithResponse(colorArray.stream()
            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
            .collect(Collectors.toList()), requestOptions).getValue();
    }

    /**
     * The setStringEnumArrayHeader operation.
     * 
     * @param colorArray The colorArray parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public String setStringEnumArrayHeader(List<ColorModel> colorArray) {
        // Generated convenience method for setStringEnumArrayHeaderWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return setStringEnumArrayHeaderWithResponse(colorArray.stream()
            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
            .collect(Collectors.toList()), requestOptions).getValue();
    }
}
