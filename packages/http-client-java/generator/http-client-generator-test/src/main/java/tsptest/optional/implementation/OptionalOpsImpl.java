// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.optional.implementation;

import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.QueryParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;
import tsptest.optional.models.AllPropertiesOptional;

/**
 * An instance of this class provides access to all the operations defined in OptionalOps.
 */
public final class OptionalOpsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final OptionalOpsService service;

    /**
     * The service client containing this operation class.
     */
    private final OptionalClientImpl client;

    /**
     * Initializes an instance of OptionalOpsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    OptionalOpsImpl(OptionalClientImpl client) {
        this.service = RestProxy.create(OptionalOpsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for OptionalClientOptionalOps to be used by the proxy service to perform
     * REST calls.
     */
    @ServiceInterface(name = "OptionalClientOption", host = "{endpoint}")
    public interface OptionalOpsService {
        static OptionalOpsService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer) {
            try {
                Class<?> clazz = Class.forName("tsptest.optional.implementation.OptionalOpsServiceImpl");
                return (OptionalOpsService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class)
                    .invoke(null, pipeline, serializer);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(method = HttpMethod.PUT, path = "/optional/put", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<AllPropertiesOptional> put(@HostParam("endpoint") String endpoint,
            @HeaderParam("request-header-required") String requestHeaderRequired,
            @QueryParam("booleanRequired") boolean booleanRequired,
            @QueryParam("booleanRequiredNullable") Boolean booleanRequiredNullable,
            @QueryParam("stringRequired") String stringRequired,
            @QueryParam("stringRequiredNullable") String stringRequiredNullable, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.PUT, path = "/optional/put", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default AllPropertiesOptional put(@HostParam("endpoint") String endpoint,
            @HeaderParam("request-header-required") String requestHeaderRequired,
            @QueryParam("booleanRequired") boolean booleanRequired,
            @QueryParam("booleanRequiredNullable") Boolean booleanRequiredNullable,
            @QueryParam("stringRequired") String stringRequired,
            @QueryParam("stringRequiredNullable") String stringRequiredNullable, @HeaderParam("Accept") String accept) {
            return put(null, endpoint, requestHeaderRequired, null, booleanRequired, null, booleanRequiredNullable,
                null, null, stringRequired, stringRequiredNullable, accept, null, null).getValue();
        }
    }

    /**
     * The put operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>booleanNullable</td><td>Boolean</td><td>No</td><td>The booleanNullable parameter</td></tr>
     * <tr><td>string</td><td>String</td><td>No</td><td>The string parameter</td></tr>
     * <tr><td>stringNullable</td><td>String</td><td>No</td><td>The stringNullable parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * <tr><td>request-header-optional</td><td>String</td><td>No</td><td>The requestHeaderOptional parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     boolean: Boolean (Optional)
     *     booleanNullable: Boolean (Optional)
     *     booleanRequired: boolean (Required)
     *     booleanRequiredNullable: Boolean (Required)
     *     string: String (Optional)
     *     stringNullable: String (Optional)
     *     stringRequired: String (Required)
     *     stringRequiredNullable: String (Required)
     *     bytes: byte[] (Optional)
     *     int: Integer (Optional)
     *     long: Long (Optional)
     *     float: Double (Optional)
     *     double: Double (Optional)
     *     duration: Duration (Optional)
     *     dateTime: OffsetDateTime (Optional)
     *     stringList (Optional): [
     *         String (Optional)
     *     ]
     *     bytesDict (Optional): {
     *         String: byte[] (Required)
     *     }
     *     epochDateTimeRequiredNullable: Long (Required)
     *     epochDateTimeNullable: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     boolean: Boolean (Optional)
     *     booleanNullable: Boolean (Optional)
     *     booleanRequired: Boolean (Optional)
     *     booleanRequiredNullable: Boolean (Optional)
     *     string: String (Optional)
     *     stringNullable: String (Optional)
     *     stringRequired: String (Optional)
     *     stringRequiredNullable: String (Optional)
     *     bytes: byte[] (Optional)
     *     int: Integer (Optional)
     *     long: Long (Optional)
     *     float: Double (Optional)
     *     double: Double (Optional)
     *     duration: Duration (Optional)
     *     dateTime: OffsetDateTime (Optional)
     *     stringList (Optional): [
     *         String (Optional)
     *     ]
     *     bytesDict (Optional): {
     *         String: byte[] (Required)
     *     }
     *     epochDateTimeRequiredNullable: Long (Optional)
     *     epochDateTimeNullable: Long (Optional)
     *     immutable (Optional): {
     *         stringReadWriteRequired: String (Required)
     *         stringReadOnlyOptional: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestHeaderRequired The requestHeaderRequired parameter.
     * @param booleanRequired The booleanRequired parameter.
     * @param booleanRequiredNullable The booleanRequiredNullable parameter.
     * @param stringRequired The stringRequired parameter.
     * @param stringRequiredNullable The stringRequiredNullable parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<AllPropertiesOptional> putWithResponse(String requestHeaderRequired, boolean booleanRequired,
        Boolean booleanRequiredNullable, String stringRequired, String stringRequiredNullable,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.put(this.client.getEndpoint(), requestHeaderRequired, booleanRequired, booleanRequiredNullable,
            stringRequired, stringRequiredNullable, accept, requestOptions);
    }
}
