// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.model.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;

/**
 * The NestedModel2 model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class NestedModel2 implements JsonSerializable<NestedModel2> {
    /*
     * The data property.
     */
    @Metadata(generated = true)
    private final String data;

    /**
     * Creates an instance of NestedModel2 class.
     * 
     * @param data the data value to set.
     */
    @Metadata(generated = true)
    public NestedModel2(String data) {
        this.data = data;
    }

    /**
     * Get the data property: The data property.
     * 
     * @return the data value.
     */
    @Metadata(generated = true)
    public String getData() {
        return this.data;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("data", this.data);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NestedModel2 from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NestedModel2 if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NestedModel2.
     */
    @Metadata(generated = true)
    public static NestedModel2 fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String data = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("data".equals(fieldName)) {
                    data = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new NestedModel2(data);
        });
    }
}
