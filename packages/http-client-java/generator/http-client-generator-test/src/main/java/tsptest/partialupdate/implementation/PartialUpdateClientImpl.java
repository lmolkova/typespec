// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.partialupdate.implementation;

import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;
import tsptest.partialupdate.models.PartialUpdateModel;

/**
 * Initializes a new instance of the PartialUpdateClient type.
 */
public final class PartialUpdateClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final PartialUpdateClientService service;

    /**
     * Service host.
     */
    private final String endpoint;

    /**
     * Gets Service host.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * Initializes an instance of PartialUpdateClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Service host.
     */
    public PartialUpdateClientImpl(HttpPipeline httpPipeline, String endpoint) {
        this.httpPipeline = httpPipeline;
        this.endpoint = endpoint;
        this.service = RestProxy.create(PartialUpdateClientService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for PartialUpdateClient to be used by the proxy service to perform REST
     * calls.
     */
    @ServiceInterface(name = "PartialUpdateClient", host = "{endpoint}")
    public interface PartialUpdateClientService {
        static PartialUpdateClientService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept) {
            try {
                Class<?> clazz = Class.forName("tsptest.partialupdate.implementation.PartialUpdateClientServiceImpl");
                return (PartialUpdateClientService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class, String.class, String.class)
                    .invoke(null, pipeline, serializer, endpoint, accept);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/partialupdate", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<PartialUpdateModel> read(RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/partialupdate", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default PartialUpdateModel read() {
            return read(null).getValue();
        }
    }

    /**
     * The read operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     boolean: boolean (Required)
     *     string: String (Required)
     *     bytes: byte[] (Required)
     *     aggregate: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<PartialUpdateModel> readWithResponse(RequestOptions requestOptions) {
        return service.read(requestOptions);
    }
}
