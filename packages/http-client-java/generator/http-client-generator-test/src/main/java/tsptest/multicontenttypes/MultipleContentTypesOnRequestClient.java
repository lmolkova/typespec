// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.multicontenttypes;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.instrumentation.Instrumentation;
import io.clientcore.core.models.binarydata.BinaryData;
import tsptest.multicontenttypes.implementation.MultipleContentTypesOnRequestsImpl;
import tsptest.multicontenttypes.models.Resource;

/**
 * Initializes a new instance of the synchronous MultiContentTypesClient type.
 */
@ServiceClient(builder = MultiContentTypesClientBuilder.class)
public final class MultipleContentTypesOnRequestClient {
    @Metadata(generated = true)
    private final MultipleContentTypesOnRequestsImpl serviceClient;

    private final Instrumentation instrumentation;

    /**
     * Initializes an instance of MultipleContentTypesOnRequestClient class.
     * 
     * @param serviceClient the service client implementation.
     * @param instrumentation the instrumentation instance.
     */
    @Metadata(generated = true)
    MultipleContentTypesOnRequestClient(MultipleContentTypesOnRequestsImpl serviceClient,
        Instrumentation instrumentation) {
        this.serviceClient = serviceClient;
        this.instrumentation = instrumentation;
    }

    /**
     * one data type maps to multiple content types.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param contentType The contentType parameter. Allowed values: "application/octet-stream", "image/jpeg",
     * "image/png", "application/json-patch+json".
     * @param data The data parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> uploadBytesWithSingleBodyTypeForMultiContentTypesWithResponse(String contentType,
        BinaryData data, RequestOptions requestOptions) {
        // Operation 'uploadBytesWithSingleBodyTypeForMultiContentTypes' can be invoked with multiple content-type. It
        // is difficult to form a correct method signature for convenience API, and hence the convenience API is not
        // generated.
        return this.instrumentation.instrumentWithResponse(
            "TspTest.MultiContentTypes.MultipleContentTypesOnRequest.uploadBytesWithSingleBodyTypeForMultiContentTypes",
            requestOptions, updatedOptions -> this.serviceClient
                .uploadBytesWithSingleBodyTypeForMultiContentTypesWithResponse(contentType, data, updatedOptions));
    }

    /**
     * multiple data types map to multiple content types using shared route.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param contentType The contentType parameter. Allowed values: "application/octet-stream", "image/jpeg",
     * "image/png".
     * @param data The data parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> uploadBytesWithMultiBodyTypesForMultiContentTypesWithResponse(String contentType,
        BinaryData data, RequestOptions requestOptions) {
        // Operation 'uploadBytesWithMultiBodyTypesForMultiContentTypes' can be invoked with multiple content-type. It
        // is difficult to form a correct method signature for convenience API, and hence the convenience API is not
        // generated.
        return this.instrumentation.instrumentWithResponse(
            "TspTest.MultiContentTypes.MultipleContentTypesOnRequest.uploadBytesWithMultiBodyTypesForMultiContentTypes",
            requestOptions, updatedOptions -> this.serviceClient
                .uploadBytesWithMultiBodyTypesForMultiContentTypesWithResponse(contentType, data, updatedOptions));
    }

    /**
     * multiple data types map to multiple content types using shared route.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param data The data parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> uploadJsonWithMultiBodyTypesForMultiContentTypesWithResponse(BinaryData data,
        RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse(
            "TspTest.MultiContentTypes.MultipleContentTypesOnRequest.uploadJsonWithMultiBodyTypesForMultiContentTypes",
            requestOptions, updatedOptions -> this.serviceClient
                .uploadJsonWithMultiBodyTypesForMultiContentTypesWithResponse(data, updatedOptions));
    }

    /**
     * multiple data types map to multiple content types using shared route.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param contentType The contentType parameter. Allowed values: "application/json", "application/octet-stream",
     * "image/jpeg", "image/png".
     * @param data The data parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> uploadJsonOrBytesWithMultiBodyTypesForMultiContentTypesWithResponse(String contentType,
        BinaryData data, RequestOptions requestOptions) {
        // Operation 'uploadJsonOrBytesWithMultiBodyTypesForMultiContentTypes' can be invoked with multiple
        // content-type. It is difficult to form a correct method signature for convenience API, and hence the
        // convenience API is not generated.
        return this.instrumentation.instrumentWithResponse(
            "TspTest.MultiContentTypes.MultipleContentTypesOnRequest.uploadJsonOrBytesWithMultiBodyTypesForMultiContentTypes",
            requestOptions,
            updatedOptions -> this.serviceClient.uploadJsonOrBytesWithMultiBodyTypesForMultiContentTypesWithResponse(
                contentType, data, updatedOptions));
    }

    /**
     * multiple data types map to multiple content types using shared route.
     * 
     * @param data The data parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void uploadJsonWithMultiBodyTypesForMultiContentTypes(Resource data) {
        // Generated convenience method for uploadJsonWithMultiBodyTypesForMultiContentTypesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        uploadJsonWithMultiBodyTypesForMultiContentTypesWithResponse(BinaryData.fromObject(data), requestOptions)
            .getValue();
    }
}
