// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.longrunning;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.instrumentation.Instrumentation;
import tsptest.longrunning.implementation.LongRunningClientImpl;
import tsptest.longrunning.models.JobResult;

/**
 * Initializes a new instance of the synchronous LongRunningClient type.
 */
@ServiceClient(builder = LongRunningClientBuilder.class)
public final class LongRunningClient {
    @Metadata(generated = true)
    private final LongRunningClientImpl serviceClient;

    private final Instrumentation instrumentation;

    /**
     * Initializes an instance of LongRunningClient class.
     * 
     * @param serviceClient the service client implementation.
     * @param instrumentation the instrumentation instance.
     */
    @Metadata(generated = true)
    LongRunningClient(LongRunningClientImpl serviceClient, Instrumentation instrumentation) {
        this.serviceClient = serviceClient;
        this.instrumentation = instrumentation;
    }

    /**
     * A remote procedure call (RPC) operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(notStarted/running/Succeeded/Failed/canceled) (Required)
     *     createdDateTime: OffsetDateTime (Optional)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     lastUpdateDateTime: OffsetDateTime (Optional)
     *     error: Error (Optional)
     *     result (Optional): {
     *         data: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param id The id parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<JobResult> getJobWithResponse(String id, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.LongRunning.getJob", requestOptions,
            updatedOptions -> this.serviceClient.getJobWithResponse(id, updatedOptions));
    }

    /**
     * A remote procedure call (RPC) operation.
     * 
     * @param id The id parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public JobResult getJob(String id) {
        // Generated convenience method for getJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getJobWithResponse(id, requestOptions).getValue();
    }
}
