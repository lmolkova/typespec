// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.specialheaders.implementation;

import azure.core.foundations.models.ErrorResponse;
import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.BodyParam;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.PathParam;
import io.clientcore.core.http.annotations.QueryParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;
import tsptest.specialheaders.SpecialHeadersServiceVersion;
import tsptest.specialheaders.models.Resource;

/**
 * An instance of this class provides access to all the operations defined in RepeatabilityHeaders.
 */
public final class RepeatabilityHeadersImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final RepeatabilityHeadersService service;

    /**
     * The service client containing this operation class.
     */
    private final SpecialHeadersClientImpl client;

    /**
     * Initializes an instance of RepeatabilityHeadersImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    RepeatabilityHeadersImpl(SpecialHeadersClientImpl client) {
        this.service = RestProxy.create(RepeatabilityHeadersService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public SpecialHeadersServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for SpecialHeadersClientRepeatabilityHeaders to be used by the proxy
     * service to perform REST calls.
     */
    @ServiceInterface(name = "SpecialHeadersClient", host = "{endpoint}")
    public interface RepeatabilityHeadersService {
        static RepeatabilityHeadersService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer) {
            try {
                Class<?> clazz = Class.forName("tsptest.specialheaders.implementation.RepeatabilityHeadersServiceImpl");
                return (RepeatabilityHeadersService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class)
                    .invoke(null, pipeline, serializer);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/repeatability-headers/resources/{name}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<Resource> get(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("name") String name, @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/repeatability-headers/resources/{name}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default Resource get(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("name") String name, @HeaderParam("Accept") String accept) {
            return get(endpoint, apiVersion, name, accept, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.PUT,
            path = "/repeatability-headers/resources/{name}",
            expectedStatusCodes = { 200, 201 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<Resource> put(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("name") String name, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData resource,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.PUT,
            path = "/repeatability-headers/resources/{name}",
            expectedStatusCodes = { 200, 201 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default Resource put(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("name") String name, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData resource) {
            return put(endpoint, apiVersion, name, contentType, accept, resource, null, null, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/repeatability-headers/resources/{name}:post",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<Resource> post(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("name") String name, @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/repeatability-headers/resources/{name}:post",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default Resource post(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("name") String name, @HeaderParam("Accept") String accept) {
            return post(endpoint, apiVersion, name, accept, null, null, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.PATCH,
            path = "/repeatability-headers/resources/{name}",
            expectedStatusCodes = { 200, 201 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<Resource> createLro(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/merge-patch+json") BinaryData resource, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.PATCH,
            path = "/repeatability-headers/resources/{name}",
            expectedStatusCodes = { 200, 201 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default Resource createLro(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("name") String name, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/merge-patch+json") BinaryData resource) {
            return createLro(endpoint, apiVersion, name, contentType, accept, resource, null, null, null).getValue();
        }
    }

    /**
     * Resource read operation template.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String (Optional, Required on create)
     * }
     * }
     * </pre>
     * 
     * @param name The name parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Resource> getWithResponse(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.get(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), name, accept,
            requestOptions);
    }

    /**
     * Send a put request with header Repeatability-Request-ID and Repeatability-First-Sent.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>repeatability-request-id</td><td>String</td><td>No</td><td>Repeatability request ID header</td></tr>
     * <tr><td>repeatability-first-sent</td><td>String</td><td>No</td><td>Repeatability first sent header as
     * HTTP-date</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String (Optional, Required on create)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String (Optional, Required on create)
     * }
     * }
     * </pre>
     * 
     * @param name The name parameter.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Resource> putWithResponse(String name, BinaryData resource, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.put(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), name, contentType,
            accept, resource, requestOptions);
    }

    /**
     * Send a post request with header Repeatability-Request-ID and Repeatability-First-Sent.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>repeatability-request-id</td><td>String</td><td>No</td><td>Repeatability request ID header</td></tr>
     * <tr><td>repeatability-first-sent</td><td>String</td><td>No</td><td>Repeatability first sent header as
     * HTTP-date</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String (Optional, Required on create)
     * }
     * }
     * </pre>
     * 
     * @param name The name parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Resource> postWithResponse(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.post(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), name, accept,
            requestOptions);
    }
}
