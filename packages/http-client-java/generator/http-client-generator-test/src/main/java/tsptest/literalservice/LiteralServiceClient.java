// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.literalservice;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.instrumentation.Instrumentation;
import io.clientcore.core.models.binarydata.BinaryData;
import tsptest.literalservice.implementation.LiteralOpsImpl;
import tsptest.literalservice.models.Model;
import tsptest.literalservice.models.PutRequestOptionalLiteralParam;

/**
 * Initializes a new instance of the synchronous LiteralServiceClient type.
 */
@ServiceClient(builder = LiteralServiceClientBuilder.class)
public final class LiteralServiceClient {
    @Metadata(generated = true)
    private final LiteralOpsImpl serviceClient;

    private final Instrumentation instrumentation;

    /**
     * Initializes an instance of LiteralServiceClient class.
     * 
     * @param serviceClient the service client implementation.
     * @param instrumentation the instrumentation instance.
     */
    @Metadata(generated = true)
    LiteralServiceClient(LiteralOpsImpl serviceClient, Instrumentation instrumentation) {
        this.serviceClient = serviceClient;
        this.instrumentation = instrumentation;
    }

    /**
     * The put operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>optionalLiteralParam</td><td>String</td><td>No</td><td>The optionalLiteralParam parameter. Allowed
     * values: "optionalLiteralParam".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     literal: String (Required)
     *     optionalLiteral: String(optionalLiteral) (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     literal: String (Required)
     *     optionalLiteral: String(optionalLiteral) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Model> putWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.LiteralService.LiteralOp.put", requestOptions,
            updatedOptions -> this.serviceClient.putWithResponse(body, updatedOptions));
    }

    /**
     * The put operation.
     * 
     * @param body The body parameter.
     * @param optionalLiteralParam The optionalLiteralParam parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Model put(Model body, PutRequestOptionalLiteralParam optionalLiteralParam) {
        // Generated convenience method for putWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (optionalLiteralParam != null) {
            requestOptions.addQueryParam("optionalLiteralParam", optionalLiteralParam.toString());
        }
        return putWithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * The put operation.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Model put(Model body) {
        // Generated convenience method for putWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return putWithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }
}
