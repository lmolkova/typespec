// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.multicontenttypes.implementation;

import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.BodyParam;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;

/**
 * An instance of this class provides access to all the operations defined in MultipleContentTypesOnRequests.
 */
public final class MultipleContentTypesOnRequestsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final MultipleContentTypesOnRequestsService service;

    /**
     * The service client containing this operation class.
     */
    private final MultiContentTypesClientImpl client;

    /**
     * Initializes an instance of MultipleContentTypesOnRequestsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    MultipleContentTypesOnRequestsImpl(MultiContentTypesClientImpl client) {
        this.service = RestProxy.create(MultipleContentTypesOnRequestsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for MultiContentTypesClientMultipleContentTypesOnRequests to be used by
     * the proxy service to perform REST calls.
     */
    @ServiceInterface(name = "MultiContentTypesCli", host = "{endpoint}")
    public interface MultipleContentTypesOnRequestsService {
        static MultipleContentTypesOnRequestsService getNewInstance(HttpPipeline pipeline,
            ObjectSerializer serializer) {
            try {
                Class<?> clazz = Class
                    .forName("tsptest.multicontenttypes.implementation.MultipleContentTypesOnRequestsServiceImpl");
                return (MultipleContentTypesOnRequestsService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class)
                    .invoke(null, pipeline, serializer);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/multiple/sharedroute/request/upload/single-body-type",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> uploadBytesWithSingleBodyTypeForMultiContentTypes(@HostParam("endpoint") String endpoint,
            @HeaderParam("content-type") String contentType, @BodyParam("application/json") BinaryData data,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/multiple/sharedroute/request/upload/single-body-type",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void uploadBytesWithSingleBodyTypeForMultiContentTypes(@HostParam("endpoint") String endpoint,
            @HeaderParam("content-type") String contentType, @BodyParam("application/json") BinaryData data) {
            uploadBytesWithSingleBodyTypeForMultiContentTypes(endpoint, contentType, data, null);
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/multiple/sharedroute/request/upload/multi-body-types",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> uploadBytesWithMultiBodyTypesForMultiContentTypes(@HostParam("endpoint") String endpoint,
            @HeaderParam("content-type") String contentType, @BodyParam("application/json") BinaryData data,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/multiple/sharedroute/request/upload/multi-body-types",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void uploadBytesWithMultiBodyTypesForMultiContentTypes(@HostParam("endpoint") String endpoint,
            @HeaderParam("content-type") String contentType, @BodyParam("application/json") BinaryData data) {
            uploadBytesWithMultiBodyTypesForMultiContentTypes(endpoint, contentType, data, null);
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/multiple/sharedroute/request/upload/multi-body-types",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> uploadJsonWithMultiBodyTypesForMultiContentTypes(@HostParam("endpoint") String endpoint,
            @HeaderParam("content-type") String contentType, @BodyParam("application/json") BinaryData data,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/multiple/sharedroute/request/upload/multi-body-types",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void uploadJsonWithMultiBodyTypesForMultiContentTypes(@HostParam("endpoint") String endpoint,
            @HeaderParam("content-type") String contentType, @BodyParam("application/json") BinaryData data) {
            uploadJsonWithMultiBodyTypesForMultiContentTypes(endpoint, contentType, data, null);
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/multiple/sharedroute/request/upload/multi-body-types",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> uploadJsonOrBytesWithMultiBodyTypesForMultiContentTypes(@HostParam("endpoint") String endpoint,
            @HeaderParam("content-type") String contentType, @BodyParam("application/json") BinaryData data,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/multiple/sharedroute/request/upload/multi-body-types",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void uploadJsonOrBytesWithMultiBodyTypesForMultiContentTypes(@HostParam("endpoint") String endpoint,
            @HeaderParam("content-type") String contentType, @BodyParam("application/json") BinaryData data) {
            uploadJsonOrBytesWithMultiBodyTypesForMultiContentTypes(endpoint, contentType, data, null);
        }
    }

    /**
     * one data type maps to multiple content types.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param contentType The contentType parameter. Allowed values: "application/octet-stream", "image/jpeg",
     * "image/png", "application/json-patch+json".
     * @param data The data parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> uploadBytesWithSingleBodyTypeForMultiContentTypesWithResponse(String contentType,
        BinaryData data, RequestOptions requestOptions) {
        return service.uploadBytesWithSingleBodyTypeForMultiContentTypes(this.client.getEndpoint(), contentType, data,
            requestOptions);
    }

    /**
     * multiple data types map to multiple content types using shared route.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param contentType The contentType parameter. Allowed values: "application/octet-stream", "image/jpeg",
     * "image/png".
     * @param data The data parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> uploadBytesWithMultiBodyTypesForMultiContentTypesWithResponse(String contentType,
        BinaryData data, RequestOptions requestOptions) {
        return service.uploadBytesWithMultiBodyTypesForMultiContentTypes(this.client.getEndpoint(), contentType, data,
            requestOptions);
    }

    /**
     * multiple data types map to multiple content types using shared route.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param data The data parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> uploadJsonWithMultiBodyTypesForMultiContentTypesWithResponse(BinaryData data,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        return service.uploadJsonWithMultiBodyTypesForMultiContentTypes(this.client.getEndpoint(), contentType, data,
            requestOptions);
    }

    /**
     * multiple data types map to multiple content types using shared route.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param contentType The contentType parameter. Allowed values: "application/json", "application/octet-stream",
     * "image/jpeg", "image/png".
     * @param data The data parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> uploadJsonOrBytesWithMultiBodyTypesForMultiContentTypesWithResponse(String contentType,
        BinaryData data, RequestOptions requestOptions) {
        return service.uploadJsonOrBytesWithMultiBodyTypesForMultiContentTypes(this.client.getEndpoint(), contentType,
            data, requestOptions);
    }
}
