// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.optional.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * The AllPropertiesOptional model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class AllPropertiesOptional implements JsonSerializable<AllPropertiesOptional> {
    /*
     * The boolean property.
     */
    @Metadata(generated = true)
    private Boolean booleanProperty;

    /*
     * The booleanNullable property.
     */
    @Metadata(generated = true)
    private Boolean booleanNullable;

    /*
     * The booleanRequired property.
     */
    @Metadata(generated = true)
    private Boolean booleanRequired;

    /*
     * The booleanRequiredNullable property.
     */
    @Metadata(generated = true)
    private Boolean booleanRequiredNullable;

    /*
     * The string property.
     */
    @Metadata(generated = true)
    private String string;

    /*
     * The stringNullable property.
     */
    @Metadata(generated = true)
    private String stringNullable;

    /*
     * The stringRequired property.
     */
    @Metadata(generated = true)
    private String stringRequired;

    /*
     * The stringRequiredNullable property.
     */
    @Metadata(generated = true)
    private String stringRequiredNullable;

    /*
     * The bytes property.
     */
    @Metadata(generated = true)
    private byte[] bytes;

    /*
     * The int property.
     */
    @Metadata(generated = true)
    private Integer intProperty;

    /*
     * The long property.
     */
    @Metadata(generated = true)
    private Long longProperty;

    /*
     * The float property.
     */
    @Metadata(generated = true)
    private Double floatProperty;

    /*
     * The double property.
     */
    @Metadata(generated = true)
    private Double doubleProperty;

    /*
     * The duration property.
     */
    @Metadata(generated = true)
    private Duration duration;

    /*
     * The dateTime property.
     */
    @Metadata(generated = true)
    private OffsetDateTime dateTime;

    /*
     * The stringList property.
     */
    @Metadata(generated = true)
    private List<String> stringList;

    /*
     * The bytesDict property.
     */
    @Metadata(generated = true)
    private Map<String, byte[]> bytesDict;

    /*
     * The epochDateTimeRequiredNullable property.
     */
    @Metadata(generated = true)
    private Long epochDateTimeRequiredNullable;

    /*
     * The epochDateTimeNullable property.
     */
    @Metadata(generated = true)
    private Long epochDateTimeNullable;

    /*
     * The immutable property.
     */
    @Metadata(generated = true)
    private ImmutableModel immutable;

    /**
     * Creates an instance of AllPropertiesOptional class.
     */
    @Metadata(generated = true)
    private AllPropertiesOptional() {
    }

    /**
     * Get the booleanProperty property: The boolean property.
     * 
     * @return the booleanProperty value.
     */
    @Metadata(generated = true)
    public Boolean isBooleanProperty() {
        return this.booleanProperty;
    }

    /**
     * Get the booleanNullable property: The booleanNullable property.
     * 
     * @return the booleanNullable value.
     */
    @Metadata(generated = true)
    public Boolean isBooleanNullable() {
        return this.booleanNullable;
    }

    /**
     * Get the booleanRequired property: The booleanRequired property.
     * 
     * @return the booleanRequired value.
     */
    @Metadata(generated = true)
    public Boolean isBooleanRequired() {
        return this.booleanRequired;
    }

    /**
     * Get the booleanRequiredNullable property: The booleanRequiredNullable property.
     * 
     * @return the booleanRequiredNullable value.
     */
    @Metadata(generated = true)
    public Boolean isBooleanRequiredNullable() {
        return this.booleanRequiredNullable;
    }

    /**
     * Get the string property: The string property.
     * 
     * @return the string value.
     */
    @Metadata(generated = true)
    public String getString() {
        return this.string;
    }

    /**
     * Get the stringNullable property: The stringNullable property.
     * 
     * @return the stringNullable value.
     */
    @Metadata(generated = true)
    public String getStringNullable() {
        return this.stringNullable;
    }

    /**
     * Get the stringRequired property: The stringRequired property.
     * 
     * @return the stringRequired value.
     */
    @Metadata(generated = true)
    public String getStringRequired() {
        return this.stringRequired;
    }

    /**
     * Get the stringRequiredNullable property: The stringRequiredNullable property.
     * 
     * @return the stringRequiredNullable value.
     */
    @Metadata(generated = true)
    public String getStringRequiredNullable() {
        return this.stringRequiredNullable;
    }

    /**
     * Get the bytes property: The bytes property.
     * 
     * @return the bytes value.
     */
    @Metadata(generated = true)
    public byte[] getBytes() {
        return this.bytes;
    }

    /**
     * Get the intProperty property: The int property.
     * 
     * @return the intProperty value.
     */
    @Metadata(generated = true)
    public Integer getIntProperty() {
        return this.intProperty;
    }

    /**
     * Get the longProperty property: The long property.
     * 
     * @return the longProperty value.
     */
    @Metadata(generated = true)
    public Long getLongProperty() {
        return this.longProperty;
    }

    /**
     * Get the floatProperty property: The float property.
     * 
     * @return the floatProperty value.
     */
    @Metadata(generated = true)
    public Double getFloatProperty() {
        return this.floatProperty;
    }

    /**
     * Get the doubleProperty property: The double property.
     * 
     * @return the doubleProperty value.
     */
    @Metadata(generated = true)
    public Double getDoubleProperty() {
        return this.doubleProperty;
    }

    /**
     * Get the duration property: The duration property.
     * 
     * @return the duration value.
     */
    @Metadata(generated = true)
    public Duration getDuration() {
        return this.duration;
    }

    /**
     * Get the dateTime property: The dateTime property.
     * 
     * @return the dateTime value.
     */
    @Metadata(generated = true)
    public OffsetDateTime getDateTime() {
        return this.dateTime;
    }

    /**
     * Get the stringList property: The stringList property.
     * 
     * @return the stringList value.
     */
    @Metadata(generated = true)
    public List<String> getStringList() {
        return this.stringList;
    }

    /**
     * Get the bytesDict property: The bytesDict property.
     * 
     * @return the bytesDict value.
     */
    @Metadata(generated = true)
    public Map<String, byte[]> getBytesDict() {
        return this.bytesDict;
    }

    /**
     * Get the epochDateTimeRequiredNullable property: The epochDateTimeRequiredNullable property.
     * 
     * @return the epochDateTimeRequiredNullable value.
     */
    @Metadata(generated = true)
    public OffsetDateTime getEpochDateTimeRequiredNullable() {
        if (this.epochDateTimeRequiredNullable == null) {
            return null;
        }
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.epochDateTimeRequiredNullable), ZoneOffset.UTC);
    }

    /**
     * Get the epochDateTimeNullable property: The epochDateTimeNullable property.
     * 
     * @return the epochDateTimeNullable value.
     */
    @Metadata(generated = true)
    public OffsetDateTime getEpochDateTimeNullable() {
        if (this.epochDateTimeNullable == null) {
            return null;
        }
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.epochDateTimeNullable), ZoneOffset.UTC);
    }

    /**
     * Get the immutable property: The immutable property.
     * 
     * @return the immutable value.
     */
    @Metadata(generated = true)
    public ImmutableModel getImmutable() {
        return this.immutable;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("boolean", this.booleanProperty);
        jsonWriter.writeBooleanField("booleanNullable", this.booleanNullable);
        jsonWriter.writeBooleanField("booleanRequired", this.booleanRequired);
        jsonWriter.writeBooleanField("booleanRequiredNullable", this.booleanRequiredNullable);
        jsonWriter.writeStringField("string", this.string);
        jsonWriter.writeStringField("stringNullable", this.stringNullable);
        jsonWriter.writeStringField("stringRequired", this.stringRequired);
        jsonWriter.writeStringField("stringRequiredNullable", this.stringRequiredNullable);
        jsonWriter.writeBinaryField("bytes", this.bytes);
        jsonWriter.writeNumberField("int", this.intProperty);
        jsonWriter.writeNumberField("long", this.longProperty);
        jsonWriter.writeNumberField("float", this.floatProperty);
        jsonWriter.writeNumberField("double", this.doubleProperty);
        jsonWriter.writeStringField("duration", Objects.toString(this.duration, null));
        jsonWriter.writeStringField("dateTime",
            this.dateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.dateTime));
        jsonWriter.writeArrayField("stringList", this.stringList, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("bytesDict", this.bytesDict, (writer, element) -> writer.writeBinary(element));
        jsonWriter.writeNumberField("epochDateTimeRequiredNullable", this.epochDateTimeRequiredNullable);
        jsonWriter.writeNumberField("epochDateTimeNullable", this.epochDateTimeNullable);
        jsonWriter.writeJsonField("immutable", this.immutable);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AllPropertiesOptional from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AllPropertiesOptional if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AllPropertiesOptional.
     */
    @Metadata(generated = true)
    public static AllPropertiesOptional fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AllPropertiesOptional deserializedAllPropertiesOptional = new AllPropertiesOptional();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("boolean".equals(fieldName)) {
                    deserializedAllPropertiesOptional.booleanProperty = reader.getNullable(JsonReader::getBoolean);
                } else if ("booleanNullable".equals(fieldName)) {
                    deserializedAllPropertiesOptional.booleanNullable = reader.getNullable(JsonReader::getBoolean);
                } else if ("booleanRequired".equals(fieldName)) {
                    deserializedAllPropertiesOptional.booleanRequired = reader.getNullable(JsonReader::getBoolean);
                } else if ("booleanRequiredNullable".equals(fieldName)) {
                    deserializedAllPropertiesOptional.booleanRequiredNullable
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("string".equals(fieldName)) {
                    deserializedAllPropertiesOptional.string = reader.getString();
                } else if ("stringNullable".equals(fieldName)) {
                    deserializedAllPropertiesOptional.stringNullable = reader.getString();
                } else if ("stringRequired".equals(fieldName)) {
                    deserializedAllPropertiesOptional.stringRequired = reader.getString();
                } else if ("stringRequiredNullable".equals(fieldName)) {
                    deserializedAllPropertiesOptional.stringRequiredNullable = reader.getString();
                } else if ("bytes".equals(fieldName)) {
                    deserializedAllPropertiesOptional.bytes = reader.getBinary();
                } else if ("int".equals(fieldName)) {
                    deserializedAllPropertiesOptional.intProperty = reader.getNullable(JsonReader::getInt);
                } else if ("long".equals(fieldName)) {
                    deserializedAllPropertiesOptional.longProperty = reader.getNullable(JsonReader::getLong);
                } else if ("float".equals(fieldName)) {
                    deserializedAllPropertiesOptional.floatProperty = reader.getNullable(JsonReader::getDouble);
                } else if ("double".equals(fieldName)) {
                    deserializedAllPropertiesOptional.doubleProperty = reader.getNullable(JsonReader::getDouble);
                } else if ("duration".equals(fieldName)) {
                    deserializedAllPropertiesOptional.duration
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("dateTime".equals(fieldName)) {
                    deserializedAllPropertiesOptional.dateTime
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("stringList".equals(fieldName)) {
                    List<String> stringList = reader.readArray(reader1 -> reader1.getString());
                    deserializedAllPropertiesOptional.stringList = stringList;
                } else if ("bytesDict".equals(fieldName)) {
                    Map<String, byte[]> bytesDict = reader.readMap(reader1 -> reader1.getBinary());
                    deserializedAllPropertiesOptional.bytesDict = bytesDict;
                } else if ("epochDateTimeRequiredNullable".equals(fieldName)) {
                    deserializedAllPropertiesOptional.epochDateTimeRequiredNullable
                        = reader.getNullable(JsonReader::getLong);
                } else if ("epochDateTimeNullable".equals(fieldName)) {
                    deserializedAllPropertiesOptional.epochDateTimeNullable = reader.getNullable(JsonReader::getLong);
                } else if ("immutable".equals(fieldName)) {
                    deserializedAllPropertiesOptional.immutable = ImmutableModel.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAllPropertiesOptional;
        });
    }
}
