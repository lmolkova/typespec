// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.multicontenttypes.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;

/**
 * The Resource model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class Resource implements JsonSerializable<Resource> {
    /*
     * The id property.
     */
    @Metadata(generated = true)
    private String id;

    /*
     * The name property.
     */
    @Metadata(generated = true)
    private String name;

    /**
     * Creates an instance of Resource class.
     */
    @Metadata(generated = true)
    public Resource() {
    }

    /**
     * Get the id property: The id property.
     * 
     * @return the id value.
     */
    @Metadata(generated = true)
    public String getId() {
        return this.id;
    }

    /**
     * Get the name property: The name property.
     * 
     * @return the name value.
     */
    @Metadata(generated = true)
    public String getName() {
        return this.name;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Resource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Resource if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Resource.
     */
    @Metadata(generated = true)
    public static Resource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Resource deserializedResource = new Resource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedResource.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedResource.name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResource;
        });
    }
}
