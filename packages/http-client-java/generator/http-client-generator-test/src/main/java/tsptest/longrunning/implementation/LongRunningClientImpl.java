// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.longrunning.implementation;

import azure.core.foundations.models.ErrorResponse;
import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.BodyParam;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.PathParam;
import io.clientcore.core.http.annotations.QueryParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;
import tsptest.longrunning.LongRunningServiceVersion;
import tsptest.longrunning.models.JobResult;
import tsptest.longrunning.models.LroOperationStatusError;

/**
 * Initializes a new instance of the LongRunningClient type.
 */
public final class LongRunningClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final LongRunningClientService service;

    /**
     * Service host.
     */
    private final String endpoint;

    /**
     * Gets Service host.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Service version.
     */
    private final LongRunningServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public LongRunningServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * Initializes an instance of LongRunningClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Service host.
     * @param serviceVersion Service version.
     */
    public LongRunningClientImpl(HttpPipeline httpPipeline, String endpoint, LongRunningServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service = RestProxy.create(LongRunningClientService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for LongRunningClient to be used by the proxy service to perform REST
     * calls.
     */
    @ServiceInterface(name = "LongRunningClient", host = "{endpoint}")
    public interface LongRunningClientService {
        static LongRunningClientService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer,
            @HostParam("endpoint") String endpoint) {
            try {
                Class<?> clazz = Class.forName("tsptest.longrunning.implementation.LongRunningClientServiceImpl");
                return (LongRunningClientService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class, String.class)
                    .invoke(null, pipeline, serializer, endpoint);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(method = HttpMethod.POST, path = "/long-running/post", expectedStatusCodes = { 202 })
        @UnexpectedResponseExceptionDetail
        Response<Void> longRunning(RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/long-running/post", expectedStatusCodes = { 202 })
        @UnexpectedResponseExceptionDetail
        default void longRunning() {
            longRunning(null);
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/long-running/jobs/{id}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<JobResult> getJob(@QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/long-running/jobs/{id}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default JobResult getJob(@QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @HeaderParam("Accept") String accept) {
            return getJob(apiVersion, id, accept, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.POST, path = "/long-running/jobs", expectedStatusCodes = { 202 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<LroOperationStatusError> createJob(@QueryParam("api-version") String apiVersion,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/long-running/jobs", expectedStatusCodes = { 202 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default LroOperationStatusError createJob(@QueryParam("api-version") String apiVersion,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body) {
            return createJob(apiVersion, contentType, accept, body, null, null, null).getValue();
        }
    }

    /**
     * A remote procedure call (RPC) operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(notStarted/running/Succeeded/Failed/canceled) (Required)
     *     createdDateTime: OffsetDateTime (Optional)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     lastUpdateDateTime: OffsetDateTime (Optional)
     *     error: Error (Optional)
     *     result (Optional): {
     *         data: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param id The id parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<JobResult> getJobWithResponse(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getJob(this.getServiceVersion().getVersion(), id, accept, requestOptions);
    }
}
