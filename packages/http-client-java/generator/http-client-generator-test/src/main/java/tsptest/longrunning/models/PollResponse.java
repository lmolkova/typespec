// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.longrunning.models;

import azure.core.foundations.models.OperationState;
import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;

/**
 * The PollResponse model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class PollResponse implements JsonSerializable<PollResponse> {
    /*
     * The operationId property.
     */
    @Metadata(generated = true)
    private final String operationId;

    /*
     * The status property.
     */
    @Metadata(generated = true)
    private final OperationState status;

    /**
     * Creates an instance of PollResponse class.
     * 
     * @param operationId the operationId value to set.
     * @param status the status value to set.
     */
    @Metadata(generated = true)
    private PollResponse(String operationId, OperationState status) {
        this.operationId = operationId;
        this.status = status;
    }

    /**
     * Get the operationId property: The operationId property.
     * 
     * @return the operationId value.
     */
    @Metadata(generated = true)
    public String getOperationId() {
        return this.operationId;
    }

    /**
     * Get the status property: The status property.
     * 
     * @return the status value.
     */
    @Metadata(generated = true)
    public OperationState getStatus() {
        return this.status;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("operationId", this.operationId);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.getValue());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PollResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PollResponse if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PollResponse.
     */
    @Metadata(generated = true)
    public static PollResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String operationId = null;
            OperationState status = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("operationId".equals(fieldName)) {
                    operationId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    status = OperationState.fromValue(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new PollResponse(operationId, status);
        });
    }
}
