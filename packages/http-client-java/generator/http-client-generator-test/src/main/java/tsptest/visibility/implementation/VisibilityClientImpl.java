// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.visibility.implementation;

import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.BodyParam;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;
import tsptest.visibility.models.Dog;
import tsptest.visibility.models.ReadDog;
import tsptest.visibility.models.RoundTripModel;

/**
 * Initializes a new instance of the VisibilityClient type.
 */
public final class VisibilityClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final VisibilityClientService service;

    /**
     * Service host.
     */
    private final String endpoint;

    /**
     * Gets Service host.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The VisibilityReadsImpl object to access its operations.
     */
    private final VisibilityReadsImpl visibilityReads;

    /**
     * Gets the VisibilityReadsImpl object to access its operations.
     * 
     * @return the VisibilityReadsImpl object.
     */
    public VisibilityReadsImpl getVisibilityReads() {
        return this.visibilityReads;
    }

    /**
     * The VisibilityWritesImpl object to access its operations.
     */
    private final VisibilityWritesImpl visibilityWrites;

    /**
     * Gets the VisibilityWritesImpl object to access its operations.
     * 
     * @return the VisibilityWritesImpl object.
     */
    public VisibilityWritesImpl getVisibilityWrites() {
        return this.visibilityWrites;
    }

    /**
     * Initializes an instance of VisibilityClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Service host.
     */
    public VisibilityClientImpl(HttpPipeline httpPipeline, String endpoint) {
        this.httpPipeline = httpPipeline;
        this.endpoint = endpoint;
        this.visibilityReads = new VisibilityReadsImpl(this);
        this.visibilityWrites = new VisibilityWritesImpl(this);
        this.service = RestProxy.create(VisibilityClientService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for VisibilityClient to be used by the proxy service to perform REST
     * calls.
     */
    @ServiceInterface(name = "VisibilityClient", host = "{endpoint}")
    public interface VisibilityClientService {
        static VisibilityClientService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept) {
            try {
                Class<?> clazz = Class.forName("tsptest.visibility.implementation.VisibilityClientServiceImpl");
                return (VisibilityClientService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class, String.class, String.class)
                    .invoke(null, pipeline, serializer, endpoint, accept);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/visibility/read", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Dog> get(RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/visibility/read", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default Dog get() {
            return get(null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.PUT, path = "/visibility/write", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Dog> create(@HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData dog, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.PUT, path = "/visibility/write", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default Dog create(@HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData dog) {
            return create(contentType, dog, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.POST, path = "/visibility/query", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<ReadDog> query(@HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData dog, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/visibility/query", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default ReadDog query(@HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData dog) {
            return query(contentType, dog, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.PUT, path = "/visibility/roundtrip", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<RoundTripModel> roundtrip(@HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.PUT, path = "/visibility/roundtrip", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default RoundTripModel roundtrip(@HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData body) {
            return roundtrip(contentType, body, null).getValue();
        }
    }

    /**
     * The get operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: int (Required)
     *     secretName: String (Required)
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Dog> getWithResponse(RequestOptions requestOptions) {
        return service.get(requestOptions);
    }

    /**
     * The create operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     secretName: String (Required)
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: int (Required)
     *     secretName: String (Required)
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param dog The dog parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Dog> createWithResponse(BinaryData dog, RequestOptions requestOptions) {
        final String contentType = "application/json";
        return service.create(contentType, dog, requestOptions);
    }

    /**
     * The query operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     secretName: String (Required)
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: int (Required)
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param dog The dog parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<ReadDog> queryWithResponse(BinaryData dog, RequestOptions requestOptions) {
        final String contentType = "application/json";
        return service.query(contentType, dog, requestOptions);
    }

    /**
     * The roundtrip operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     secretName: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     secretName: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<RoundTripModel> roundtripWithResponse(BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        return service.roundtrip(contentType, body, requestOptions);
    }
}
