// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.enumservice.implementation;

import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.QueryParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import tsptest.enumservice.models.Color;
import tsptest.enumservice.models.ColorModel;
import tsptest.enumservice.models.Operation;

/**
 * Initializes a new instance of the EnumServiceClient type.
 */
public final class EnumServiceClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final EnumServiceClientService service;

    /**
     * Service host.
     */
    private final String endpoint;

    /**
     * Gets Service host.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * Initializes an instance of EnumServiceClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Service host.
     */
    public EnumServiceClientImpl(HttpPipeline httpPipeline, String endpoint) {
        this.httpPipeline = httpPipeline;
        this.endpoint = endpoint;
        this.service = RestProxy.create(EnumServiceClientService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for EnumServiceClient to be used by the proxy service to perform REST
     * calls.
     */
    @ServiceInterface(name = "EnumServiceClient", host = "{endpoint}")
    public interface EnumServiceClientService {
        static EnumServiceClientService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept) {
            try {
                Class<?> clazz = Class.forName("tsptest.enumservice.implementation.EnumServiceClientServiceImpl");
                return (EnumServiceClientService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class, String.class, String.class)
                    .invoke(null, pipeline, serializer, endpoint, accept);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/enum/color", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Color> getColor(RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/enum/color", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default Color getColor() {
            return getColor(null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/enum/colormodel", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<ColorModel> getColorModel(RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/enum/colormodel", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default ColorModel getColorModel() {
            return getColorModel(null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/enum/operation/colormodel",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Operation> setColorModel(@QueryParam("color") String color, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/enum/operation/colormodel",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default Operation setColorModel(@QueryParam("color") String color) {
            return setColorModel(color, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/enum/operation/priority",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Operation> setPriority(@QueryParam("priority") String priority, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/enum/operation/priority",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default Operation setPriority(@QueryParam("priority") String priority) {
            return setPriority(priority, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/enum/operation/state/running",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Operation> getRunningOperation(@QueryParam("state") String state, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/enum/operation/state/running",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default Operation getRunningOperation(@QueryParam("state") String state) {
            return getRunningOperation(state, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/enum/operation/state", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Operation> getOperation(@QueryParam("state") String state, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/enum/operation/state", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default Operation getOperation(@QueryParam("state") String state) {
            return getOperation(state, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/enum/operation/stringenumarray",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<String> setStringEnumArray(@QueryParam("colorArray") String colorArray, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/enum/operation/stringenumarray",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default String setStringEnumArray(@QueryParam("colorArray") String colorArray) {
            return setStringEnumArray(colorArray, null, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/enum/operation/intenumarray",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<String> setIntEnumArray(@QueryParam("priorityArray") String priorityArray,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/enum/operation/intenumarray",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default String setIntEnumArray(@QueryParam("priorityArray") String priorityArray) {
            return setIntEnumArray(priorityArray, null, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/enum/operation/stringarray",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<String> setStringArray(@QueryParam("stringArray") String stringArray, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/enum/operation/stringarray",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default String setStringArray(@QueryParam("stringArray") String stringArray) {
            return setStringArray(stringArray, null, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/enum/operation/intarray",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<String> setIntArray(@QueryParam("intArray") String intArray, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/enum/operation/intarray",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default String setIntArray(@QueryParam("intArray") String intArray) {
            return setIntArray(intArray, null, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/enum/operation/stringenummulti",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<String> setStringEnumMulti(
            @QueryParam(value = "colorArray", multipleQueryParams = true) List<String> colorArray,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/enum/operation/stringenummulti",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default String
            setStringEnumMulti(@QueryParam(value = "colorArray", multipleQueryParams = true) List<String> colorArray) {
            return setStringEnumMulti(colorArray, null, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/enum/operation/intenummulti",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<String> setIntEnumMulti(
            @QueryParam(value = "priorityArray", multipleQueryParams = true) List<String> priorityArray,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/enum/operation/intenummulti",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default String setIntEnumMulti(
            @QueryParam(value = "priorityArray", multipleQueryParams = true) List<String> priorityArray) {
            return setIntEnumMulti(priorityArray, null, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/enum/operation/stringmulti",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<String> setStringMulti(
            @QueryParam(value = "stringArray", multipleQueryParams = true) List<String> stringArray,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/enum/operation/stringmulti",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default String
            setStringMulti(@QueryParam(value = "stringArray", multipleQueryParams = true) List<String> stringArray) {
            return setStringMulti(stringArray, null, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/enum/operation/intmulti",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<String> setIntMulti(@QueryParam(value = "intArray", multipleQueryParams = true) List<String> intArray,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/enum/operation/intmulti",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default String setIntMulti(@QueryParam(value = "intArray", multipleQueryParams = true) List<String> intArray) {
            return setIntMulti(intArray, null, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/enum/operation/stringenumarrayheader",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<String> setStringEnumArrayHeader(@HeaderParam("color-array") String colorArray,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/enum/operation/stringenumarrayheader",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default String setStringEnumArrayHeader(@HeaderParam("color-array") String colorArray) {
            return setStringEnumArrayHeader(colorArray, null, null).getValue();
        }
    }

    /**
     * The getColor operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String(Red/Blue/Green)
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Color> getColorWithResponse(RequestOptions requestOptions) {
        return service.getColor(requestOptions);
    }

    /**
     * The getColorModel operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String(Red/Blue/Green)
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<ColorModel> getColorModelWithResponse(RequestOptions requestOptions) {
        return service.getColorModel(requestOptions);
    }

    /**
     * The setColorModel operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String(Read/Write) (Required)
     *     best: boolean (Required)
     *     age: int (Required)
     *     priority: String(100/0) (Required)
     *     color: String(Red/Blue/Green) (Required)
     *     unit: String(1/0.001/1000) (Required)
     *     priorityValue: String(100/0) (Required)
     *     colorValue: String(Red/Blue/Green) (Required)
     *     colorModelValue: String(Red/Blue/Green) (Required)
     *     unitValue: String(1/0.001/1000) (Optional)
     *     olympicRecord: String(9.58/19.3) (Optional)
     *     olympicRecordValue: String(9.58/19.3) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param color The color parameter. Allowed values: "Red", "Blue", "Green".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Operation> setColorModelWithResponse(String color, RequestOptions requestOptions) {
        return service.setColorModel(color, requestOptions);
    }

    /**
     * The setPriority operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String(Read/Write) (Required)
     *     best: boolean (Required)
     *     age: int (Required)
     *     priority: String(100/0) (Required)
     *     color: String(Red/Blue/Green) (Required)
     *     unit: String(1/0.001/1000) (Required)
     *     priorityValue: String(100/0) (Required)
     *     colorValue: String(Red/Blue/Green) (Required)
     *     colorModelValue: String(Red/Blue/Green) (Required)
     *     unitValue: String(1/0.001/1000) (Optional)
     *     olympicRecord: String(9.58/19.3) (Optional)
     *     olympicRecordValue: String(9.58/19.3) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param priority The priority parameter. Allowed values: 100, 0.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Operation> setPriorityWithResponse(String priority, RequestOptions requestOptions) {
        return service.setPriority(priority, requestOptions);
    }

    /**
     * The getRunningOperation operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String(Read/Write) (Required)
     *     best: boolean (Required)
     *     age: int (Required)
     *     priority: String(100/0) (Required)
     *     color: String(Red/Blue/Green) (Required)
     *     unit: String(1/0.001/1000) (Required)
     *     priorityValue: String(100/0) (Required)
     *     colorValue: String(Red/Blue/Green) (Required)
     *     colorModelValue: String(Red/Blue/Green) (Required)
     *     unitValue: String(1/0.001/1000) (Optional)
     *     olympicRecord: String(9.58/19.3) (Optional)
     *     olympicRecordValue: String(9.58/19.3) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Operation> getRunningOperationWithResponse(RequestOptions requestOptions) {
        final String state = "Running";
        return service.getRunningOperation(state, requestOptions);
    }

    /**
     * The getOperation operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String(Read/Write) (Required)
     *     best: boolean (Required)
     *     age: int (Required)
     *     priority: String(100/0) (Required)
     *     color: String(Red/Blue/Green) (Required)
     *     unit: String(1/0.001/1000) (Required)
     *     priorityValue: String(100/0) (Required)
     *     colorValue: String(Red/Blue/Green) (Required)
     *     colorModelValue: String(Red/Blue/Green) (Required)
     *     unitValue: String(1/0.001/1000) (Optional)
     *     olympicRecord: String(9.58/19.3) (Optional)
     *     olympicRecordValue: String(9.58/19.3) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param state The state parameter. Allowed values: "Running", "Completed", "Failed".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Operation> getOperationWithResponse(String state, RequestOptions requestOptions) {
        return service.getOperation(state, requestOptions);
    }

    /**
     * The setStringEnumArray operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>colorArrayOpt</td><td>List&lt;String&gt;</td><td>No</td><td>The colorArrayOpt parameter. In the form of
     * "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param colorArray The colorArray parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a sequence of textual characters.
     */
    public Response<String> setStringEnumArrayWithResponse(List<String> colorArray, RequestOptions requestOptions) {
        String colorArrayConverted = colorArray.stream()
            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
            .collect(Collectors.joining(","));
        return service.setStringEnumArray(colorArrayConverted, requestOptions);
    }

    /**
     * The setIntEnumArray operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>priorityArrayOpt</td><td>List&lt;String&gt;</td><td>No</td><td>The priorityArrayOpt parameter. In the
     * form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param priorityArray The priorityArray parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a sequence of textual characters.
     */
    public Response<String> setIntEnumArrayWithResponse(List<String> priorityArray, RequestOptions requestOptions) {
        String priorityArrayConverted = priorityArray.stream()
            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
            .collect(Collectors.joining(","));
        return service.setIntEnumArray(priorityArrayConverted, requestOptions);
    }

    /**
     * The setStringArray operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>stringArrayOpt</td><td>List&lt;String&gt;</td><td>No</td><td>The stringArrayOpt parameter. In the form of
     * "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param stringArray The stringArray parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a sequence of textual characters.
     */
    public Response<String> setStringArrayWithResponse(List<String> stringArray, RequestOptions requestOptions) {
        String stringArrayConverted = stringArray.stream()
            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
            .collect(Collectors.joining(","));
        return service.setStringArray(stringArrayConverted, requestOptions);
    }

    /**
     * The setIntArray operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>intArrayOpt</td><td>List&lt;Integer&gt;</td><td>No</td><td>The intArrayOpt parameter. In the form of ","
     * separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param intArray The intArray parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a sequence of textual characters.
     */
    public Response<String> setIntArrayWithResponse(List<Integer> intArray, RequestOptions requestOptions) {
        String intArrayConverted = intArray.stream().map(paramItemValue -> {
            if (paramItemValue == null) {
                return "";
            } else {
                String itemValueString = BinaryData.fromObject(paramItemValue).toString();
                int strLength = itemValueString.length();
                int startOffset = 0;
                while (startOffset < strLength) {
                    if (itemValueString.charAt(startOffset) != '"') {
                        break;
                    }
                    startOffset++;
                }
                if (startOffset == strLength) {
                    return "";
                }
                int endOffset = strLength - 1;
                while (endOffset >= 0) {
                    if (itemValueString.charAt(endOffset) != '"') {
                        break;
                    }

                    endOffset--;
                }
                return itemValueString.substring(startOffset, endOffset + 1);
            }
        }).collect(Collectors.joining(","));
        return service.setIntArray(intArrayConverted, requestOptions);
    }

    /**
     * The setStringEnumMulti operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>colorArrayOpt</td><td>List&lt;String&gt;</td><td>No</td><td>The colorArrayOpt parameter. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param colorArray The colorArray parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a sequence of textual characters.
     */
    public Response<String> setStringEnumMultiWithResponse(List<String> colorArray, RequestOptions requestOptions) {
        List<String> colorArrayConverted
            = colorArray.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        return service.setStringEnumMulti(colorArrayConverted, requestOptions);
    }

    /**
     * The setIntEnumMulti operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>priorityArrayOpt</td><td>List&lt;String&gt;</td><td>No</td><td>The priorityArrayOpt parameter. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param priorityArray The priorityArray parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a sequence of textual characters.
     */
    public Response<String> setIntEnumMultiWithResponse(List<String> priorityArray, RequestOptions requestOptions) {
        List<String> priorityArrayConverted
            = priorityArray.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        return service.setIntEnumMulti(priorityArrayConverted, requestOptions);
    }

    /**
     * The setStringMulti operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>stringArrayOpt</td><td>List&lt;String&gt;</td><td>No</td><td>The stringArrayOpt parameter. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param stringArray The stringArray parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a sequence of textual characters.
     */
    public Response<String> setStringMultiWithResponse(List<String> stringArray, RequestOptions requestOptions) {
        List<String> stringArrayConverted
            = stringArray.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        return service.setStringMulti(stringArrayConverted, requestOptions);
    }

    /**
     * The setIntMulti operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>intArrayOpt</td><td>List&lt;Integer&gt;</td><td>No</td><td>The intArrayOpt parameter. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param intArray The intArray parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a sequence of textual characters.
     */
    public Response<String> setIntMultiWithResponse(List<Integer> intArray, RequestOptions requestOptions) {
        List<String> intArrayConverted
            = intArray.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        return service.setIntMulti(intArrayConverted, requestOptions);
    }

    /**
     * The setStringEnumArrayHeader operation.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>color-array-opt</td><td>List&lt;String&gt;</td><td>No</td><td>The colorArrayOpt parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param colorArray The colorArray parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a sequence of textual characters.
     */
    public Response<String> setStringEnumArrayHeaderWithResponse(List<String> colorArray,
        RequestOptions requestOptions) {
        String colorArrayConverted = colorArray.stream()
            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
            .collect(Collectors.joining(","));
        return service.setStringEnumArrayHeader(colorArrayConverted, requestOptions);
    }
}
