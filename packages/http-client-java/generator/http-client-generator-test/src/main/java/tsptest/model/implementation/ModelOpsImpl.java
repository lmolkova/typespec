// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.model.implementation;

import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.BodyParam;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;
import tsptest.model.models.NestedModel;
import tsptest.model.models.Resource1;
import tsptest.model.models.Resource2;
import tsptest.model.models.Resource3;

/**
 * An instance of this class provides access to all the operations defined in ModelOps.
 */
public final class ModelOpsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ModelOpsService service;

    /**
     * The service client containing this operation class.
     */
    private final ModelClientImpl client;

    /**
     * Initializes an instance of ModelOpsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ModelOpsImpl(ModelClientImpl client) {
        this.service = RestProxy.create(ModelOpsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for ModelClientModelOps to be used by the proxy service to perform REST
     * calls.
     */
    @ServiceInterface(name = "ModelClientModelOps", host = "{endpoint}")
    public interface ModelOpsService {
        static ModelOpsService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer) {
            try {
                Class<?> clazz = Class.forName("tsptest.model.implementation.ModelOpsServiceImpl");
                return (ModelOpsService) clazz.getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class)
                    .invoke(null, pipeline, serializer);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(method = HttpMethod.PUT, path = "/model/resource1", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Resource1> put1(@HostParam("endpoint") String endpoint,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.PUT, path = "/model/resource1", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default Resource1 put1(@HostParam("endpoint") String endpoint, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body) {
            return put1(endpoint, contentType, accept, body, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.PUT, path = "/model/resource2", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Resource2> put2(@HostParam("endpoint") String endpoint,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.PUT, path = "/model/resource2", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default Resource2 put2(@HostParam("endpoint") String endpoint, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body) {
            return put2(endpoint, contentType, accept, body, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/model/resource3", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Resource3> get3(@HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/model/resource3", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default Resource3 get3(@HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept) {
            return get3(endpoint, accept, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/model/nested", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<NestedModel> putNested(@HostParam("endpoint") String endpoint,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/model/nested", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default NestedModel putNested(@HostParam("endpoint") String endpoint,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body) {
            return putNested(endpoint, contentType, accept, body, null).getValue();
        }
    }

    /**
     * The put1 operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     outputData (Required): {
     *         data: String (Required)
     *     }
     *     outputData2 (Required): {
     *         data: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     outputData (Required): {
     *         data: String (Required)
     *     }
     *     outputData2 (Required): {
     *         data: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Resource1> put1WithResponse(BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.put1(this.client.getEndpoint(), contentType, accept, body, requestOptions);
    }

    /**
     * The put2 operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     data2 (Required): {
     *         data: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     data2 (Required): {
     *         data: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Resource2> put2WithResponse(BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.put2(this.client.getEndpoint(), contentType, accept, body, requestOptions);
    }

    /**
     * The get3 operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     outputData3 (Required): {
     *         data: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Resource3> get3WithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.get3(this.client.getEndpoint(), accept, requestOptions);
    }

    /**
     * The putNested operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     nested1 (Required): {
     *         nested2 (Required): {
     *             data: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     nested1 (Required): {
     *         nested2 (Required): {
     *             data: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<NestedModel> putNestedWithResponse(BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.putNested(this.client.getEndpoint(), contentType, accept, body, requestOptions);
    }
}
