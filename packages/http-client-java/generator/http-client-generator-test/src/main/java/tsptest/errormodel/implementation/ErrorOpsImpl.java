// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.errormodel.implementation;

import azure.core.foundations.models.ErrorResponse;
import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;
import tsptest.errormodel.models.Diagnostic;

/**
 * An instance of this class provides access to all the operations defined in ErrorOps.
 */
public final class ErrorOpsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ErrorOpsService service;

    /**
     * The service client containing this operation class.
     */
    private final ErrorModelClientImpl client;

    /**
     * Initializes an instance of ErrorOpsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ErrorOpsImpl(ErrorModelClientImpl client) {
        this.service = RestProxy.create(ErrorOpsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for ErrorModelClientErrorOps to be used by the proxy service to perform
     * REST calls.
     */
    @ServiceInterface(name = "ErrorModelClientErro", host = "{endpoint}")
    public interface ErrorOpsService {
        static ErrorOpsService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer) {
            try {
                Class<?> clazz = Class.forName("tsptest.errormodel.implementation.ErrorOpsServiceImpl");
                return (ErrorOpsService) clazz.getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class)
                    .invoke(null, pipeline, serializer);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/error", expectedStatusCodes = { 200, 201 })
        @UnexpectedResponseExceptionDetail(statusCode = { 404 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<Diagnostic> read(@HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/error", expectedStatusCodes = { 200, 201 })
        @UnexpectedResponseExceptionDetail(statusCode = { 404 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default Diagnostic read(@HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept) {
            return read(endpoint, accept, null).getValue();
        }
    }

    /**
     * The read operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     error: Error (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Diagnostic> readWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.read(this.client.getEndpoint(), accept, requestOptions);
    }
}
