// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.protocolandconvenient;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ReturnType;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.annotations.ServiceMethod;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.PagedIterable;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.instrumentation.Instrumentation;
import io.clientcore.core.models.binarydata.BinaryData;
import tsptest.protocolandconvenient.implementation.ProtocolAndConvenienceOpsImpl;
import tsptest.protocolandconvenient.models.ResourceA;
import tsptest.protocolandconvenient.models.ResourceB;
import tsptest.protocolandconvenient.models.ResourceD;
import tsptest.protocolandconvenient.models.ResourceE;
import tsptest.protocolandconvenient.models.ResourceF;
import tsptest.protocolandconvenient.models.ResourceH;
import tsptest.protocolandconvenient.models.ResourceJ;

/**
 * Initializes a new instance of the synchronous ProtocolAndConvenientClient type.
 */
@ServiceClient(builder = ProtocolAndConvenientClientBuilder.class)
public final class ProtocolAndConvenientClient {
    @Metadata(generated = true)
    private final ProtocolAndConvenienceOpsImpl serviceClient;

    private final Instrumentation instrumentation;

    /**
     * Initializes an instance of ProtocolAndConvenientClient class.
     * 
     * @param serviceClient the service client implementation.
     * @param instrumentation the instrumentation instance.
     */
    @Metadata(generated = true)
    ProtocolAndConvenientClient(ProtocolAndConvenienceOpsImpl serviceClient, Instrumentation instrumentation) {
        this.serviceClient = serviceClient;
        this.instrumentation = instrumentation;
    }

    /**
     * When set protocol false and convenient true, then the protocol method should be package private.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    Response<ResourceB> onlyConvenientWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse(
            "TspTest.ProtocolAndConvenient.ProtocolAndConvenienceOp.onlyConvenient", requestOptions,
            updatedOptions -> this.serviceClient.onlyConvenientWithResponse(body, updatedOptions));
    }

    /**
     * When set protocol true and convenient false, only the protocol method should be generated, ResourceC and
     * ResourceD should not be generated.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<ResourceD> onlyProtocolWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse(
            "TspTest.ProtocolAndConvenient.ProtocolAndConvenienceOp.onlyProtocol", requestOptions,
            updatedOptions -> this.serviceClient.onlyProtocolWithResponse(body, updatedOptions));
    }

    /**
     * Setting protocol true and convenient true, both convenient and protocol methods will be generated.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<ResourceF> bothConvenientAndProtocolWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse(
            "TspTest.ProtocolAndConvenient.ProtocolAndConvenienceOp.bothConvenientAndProtocol", requestOptions,
            updatedOptions -> this.serviceClient.bothConvenientAndProtocolWithResponse(body, updatedOptions));
    }

    /**
     * When set protocol false and convenient false.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    Response<ResourceH> errorSettingWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse(
            "TspTest.ProtocolAndConvenient.ProtocolAndConvenienceOp.errorSetting", requestOptions,
            updatedOptions -> this.serviceClient.errorSettingWithResponse(body, updatedOptions));
    }

    /**
     * Paging operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxresults</td><td>Long</td><td>No</td><td>The maxPageSize parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * PagedResourceJ
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return paged collection of ResourceJ items.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ResourceJ> list(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse(
            "TspTest.ProtocolAndConvenient.ProtocolAndConvenienceOp.list", requestOptions,
            updatedOptions -> this.serviceClient.list(updatedOptions));
    }

    /**
     * When set protocol false and convenient true, then the protocol method should be package private.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public ResourceB onlyConvenient(ResourceA body) {
        // Generated convenience method for onlyConvenientWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return onlyConvenientWithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Setting protocol true and convenient true, both convenient and protocol methods will be generated.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public ResourceF bothConvenientAndProtocol(ResourceE body) {
        // Generated convenience method for bothConvenientAndProtocolWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return bothConvenientAndProtocolWithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Paging operation.
     * 
     * @param maxPageSize The maxPageSize parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of ResourceJ items.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ResourceJ> list(Long maxPageSize) {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxPageSize));
        }
        return serviceClient.list(requestOptions);
    }

    /**
     * Paging operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of ResourceJ items.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ResourceJ> list() {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.list(requestOptions);
    }
}
