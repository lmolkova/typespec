// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.longrunning.models;

import azure.core.foundations.models.Error;
import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The JobResult model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class JobResult implements JsonSerializable<JobResult> {
    /*
     * The id property.
     */
    @Metadata(generated = true)
    private String id;

    /*
     * The status property.
     */
    @Metadata(generated = true)
    private JobStatus status;

    /*
     * The createdDateTime property.
     */
    @Metadata(generated = true)
    private OffsetDateTime createdDateTime;

    /*
     * The expirationDateTime property.
     */
    @Metadata(generated = true)
    private OffsetDateTime expirationDateTime;

    /*
     * The lastUpdateDateTime property.
     */
    @Metadata(generated = true)
    private OffsetDateTime lastUpdateDateTime;

    /*
     * The error property.
     */
    @Metadata(generated = true)
    private Error error;

    /*
     * The result property.
     */
    @Metadata(generated = true)
    private JobResultResult result;

    /**
     * Creates an instance of JobResult class.
     */
    @Metadata(generated = true)
    private JobResult() {
    }

    /**
     * Get the id property: The id property.
     * 
     * @return the id value.
     */
    @Metadata(generated = true)
    public String getId() {
        return this.id;
    }

    /**
     * Get the status property: The status property.
     * 
     * @return the status value.
     */
    @Metadata(generated = true)
    public JobStatus getStatus() {
        return this.status;
    }

    /**
     * Get the createdDateTime property: The createdDateTime property.
     * 
     * @return the createdDateTime value.
     */
    @Metadata(generated = true)
    public OffsetDateTime getCreatedDateTime() {
        return this.createdDateTime;
    }

    /**
     * Get the expirationDateTime property: The expirationDateTime property.
     * 
     * @return the expirationDateTime value.
     */
    @Metadata(generated = true)
    public OffsetDateTime getExpirationDateTime() {
        return this.expirationDateTime;
    }

    /**
     * Get the lastUpdateDateTime property: The lastUpdateDateTime property.
     * 
     * @return the lastUpdateDateTime value.
     */
    @Metadata(generated = true)
    public OffsetDateTime getLastUpdateDateTime() {
        return this.lastUpdateDateTime;
    }

    /**
     * Get the error property: The error property.
     * 
     * @return the error value.
     */
    @Metadata(generated = true)
    public Error getError() {
        return this.error;
    }

    /**
     * Get the result property: The result property.
     * 
     * @return the result value.
     */
    @Metadata(generated = true)
    public JobResultResult getResult() {
        return this.result;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("error", this.error);
        jsonWriter.writeJsonField("result", this.result);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobResult if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the JobResult.
     */
    @Metadata(generated = true)
    public static JobResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobResult deserializedJobResult = new JobResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedJobResult.id = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedJobResult.status = JobStatus.fromValue(reader.getString());
                } else if ("createdDateTime".equals(fieldName)) {
                    deserializedJobResult.createdDateTime
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("expirationDateTime".equals(fieldName)) {
                    deserializedJobResult.expirationDateTime
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("lastUpdateDateTime".equals(fieldName)) {
                    deserializedJobResult.lastUpdateDateTime
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("error".equals(fieldName)) {
                    deserializedJobResult.error = Error.fromJson(reader);
                } else if ("result".equals(fieldName)) {
                    deserializedJobResult.result = JobResultResult.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobResult;
        });
    }
}
