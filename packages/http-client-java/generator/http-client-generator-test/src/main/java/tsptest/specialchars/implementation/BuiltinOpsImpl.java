// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.specialchars.implementation;

import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.BodyParam;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;
import tsptest.specialchars.models.Resource;

/**
 * An instance of this class provides access to all the operations defined in BuiltinOps.
 */
public final class BuiltinOpsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final BuiltinOpsService service;

    /**
     * The service client containing this operation class.
     */
    private final SpecialCharsClientImpl client;

    /**
     * Initializes an instance of BuiltinOpsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    BuiltinOpsImpl(SpecialCharsClientImpl client) {
        this.service = RestProxy.create(BuiltinOpsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for SpecialCharsClientBuiltinOps to be used by the proxy service to
     * perform REST calls.
     */
    @ServiceInterface(name = "SpecialCharsClientBu", host = "{endpoint}")
    public interface BuiltinOpsService {
        static BuiltinOpsService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer) {
            try {
                Class<?> clazz = Class.forName("tsptest.specialchars.implementation.BuiltinOpsServiceImpl");
                return (BuiltinOpsService) clazz.getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class)
                    .invoke(null, pipeline, serializer);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(method = HttpMethod.POST, path = "/specialchars", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Resource> read(@HostParam("endpoint") String endpoint, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData readRequest,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/specialchars", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default Resource read(@HostParam("endpoint") String endpoint, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData readRequest) {
            return read(endpoint, contentType, accept, readRequest, null).getValue();
        }
    }

    /**
     * The read operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     aggregate: String (Optional)
     *     condition: String (Optional)
     *     requestName: String (Optional)
     *     value: Double (Optional)
     * }
     * }
     * </pre>
     * 
     * @param readRequest The readRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Resource> readWithResponse(BinaryData readRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.read(this.client.getEndpoint(), contentType, accept, readRequest, requestOptions);
    }
}
