// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.visibility.implementation;

import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.BodyParam;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;
import tsptest.visibility.models.Dog;

/**
 * An instance of this class provides access to all the operations defined in VisibilityWrites.
 */
public final class VisibilityWritesImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final VisibilityWritesService service;

    /**
     * The service client containing this operation class.
     */
    private final VisibilityClientImpl client;

    /**
     * Initializes an instance of VisibilityWritesImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    VisibilityWritesImpl(VisibilityClientImpl client) {
        this.service = RestProxy.create(VisibilityWritesService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for VisibilityClientVisibilityWrites to be used by the proxy service to
     * perform REST calls.
     */
    @ServiceInterface(name = "VisibilityClientVisi", host = "{endpoint}")
    public interface VisibilityWritesService {
        static VisibilityWritesService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer) {
            try {
                Class<?> clazz = Class.forName("tsptest.visibility.implementation.VisibilityWritesServiceImpl");
                return (VisibilityWritesService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class)
                    .invoke(null, pipeline, serializer);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(method = HttpMethod.PUT, path = "/write", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Dog> create(@HostParam("endpoint") String endpoint, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData dog,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.PUT, path = "/write", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default Dog create(@HostParam("endpoint") String endpoint, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData dog) {
            return create(endpoint, contentType, accept, dog, null).getValue();
        }
    }

    /**
     * The create operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     secretName: String (Required)
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: int (Required)
     *     secretName: String (Required)
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param dog The dog parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Dog> createWithResponse(BinaryData dog, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.create(this.client.getEndpoint(), contentType, accept, dog, requestOptions);
    }
}
