// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.multicontenttypes.implementation;

import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.BodyParam;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;

/**
 * An instance of this class provides access to all the operations defined in SingleContentTypes.
 */
public final class SingleContentTypesImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SingleContentTypesService service;

    /**
     * The service client containing this operation class.
     */
    private final MultiContentTypesClientImpl client;

    /**
     * Initializes an instance of SingleContentTypesImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    SingleContentTypesImpl(MultiContentTypesClientImpl client) {
        this.service = RestProxy.create(SingleContentTypesService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for MultiContentTypesClientSingleContentTypes to be used by the proxy
     * service to perform REST calls.
     */
    @ServiceInterface(name = "MultiContentTypesCli", host = "{endpoint}")
    public interface SingleContentTypesService {
        static SingleContentTypesService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer) {
            try {
                Class<?> clazz
                    = Class.forName("tsptest.multicontenttypes.implementation.SingleContentTypesServiceImpl");
                return (SingleContentTypesService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class)
                    .invoke(null, pipeline, serializer);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/single/request/download/image",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<BinaryData> downloadImageForSingleContentType(@HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/single/request/download/image",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default BinaryData downloadImageForSingleContentType(@HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept) {
            return downloadImageForSingleContentType(endpoint, accept, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/single/request/upload/image",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> uploadImageForSingleContentType(@HostParam("endpoint") String endpoint,
            @HeaderParam("content-type") String contentType, @BodyParam("image/png") BinaryData data,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/single/request/upload/image",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void uploadImageForSingleContentType(@HostParam("endpoint") String endpoint,
            @HeaderParam("content-type") String contentType, @BodyParam("image/png") BinaryData data) {
            uploadImageForSingleContentType(endpoint, contentType, data, null);
        }
    }

    /**
     * response is binary.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<BinaryData> downloadImageForSingleContentTypeWithResponse(RequestOptions requestOptions) {
        final String accept = "image/png";
        return service.downloadImageForSingleContentType(this.client.getEndpoint(), accept, requestOptions);
    }

    /**
     * request is binary.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param data The data parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> uploadImageForSingleContentTypeWithResponse(BinaryData data, RequestOptions requestOptions) {
        final String contentType = "image/png";
        return service.uploadImageForSingleContentType(this.client.getEndpoint(), contentType, data, requestOptions);
    }
}
