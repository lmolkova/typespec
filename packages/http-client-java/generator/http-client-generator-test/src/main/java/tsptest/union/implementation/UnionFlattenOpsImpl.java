// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.union.implementation;

import azure.core.foundations.models.ErrorResponse;
import azure.core.models.ResourceOperationStatusOperationStatusResultError;
import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.BodyParam;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.QueryParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;
import tsptest.union.UnionServiceVersion;

/**
 * An instance of this class provides access to all the operations defined in UnionFlattenOps.
 */
public final class UnionFlattenOpsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final UnionFlattenOpsService service;

    /**
     * The service client containing this operation class.
     */
    private final UnionClientImpl client;

    /**
     * Initializes an instance of UnionFlattenOpsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    UnionFlattenOpsImpl(UnionClientImpl client) {
        this.service = RestProxy.create(UnionFlattenOpsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public UnionServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for UnionClientUnionFlattenOps to be used by the proxy service to perform
     * REST calls.
     */
    @ServiceInterface(name = "UnionClientUnionFlat", host = "{endpoint}/openai")
    public interface UnionFlattenOpsService {
        static UnionFlattenOpsService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer) {
            try {
                Class<?> clazz = Class.forName("tsptest.union.implementation.UnionFlattenOpsServiceImpl");
                return (UnionFlattenOpsService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class)
                    .invoke(null, pipeline, serializer);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(method = HttpMethod.POST, path = "/union/send", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Void> send(@HostParam("endpoint") String endpoint, @QueryParam("id") String id,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData sendRequest, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/union/send", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default void send(@HostParam("endpoint") String endpoint, @QueryParam("id") String id,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData sendRequest) {
            send(endpoint, id, apiVersion, contentType, sendRequest, null);
        }

        @HttpRequestInformation(method = HttpMethod.POST, path = "/union/send-long", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Void> sendLong(@HostParam("endpoint") String endpoint, @QueryParam("id") String id,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData sendLongRequest, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/union/send-long", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default void sendLong(@HostParam("endpoint") String endpoint, @QueryParam("id") String id,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData sendLongRequest) {
            sendLong(endpoint, id, null, apiVersion, contentType, sendLongRequest, null);
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/union/param", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Void> get(@HostParam("endpoint") String endpoint, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/union/param", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default void get(@HostParam("endpoint") String endpoint) {
            get(endpoint, null, null);
        }

        @HttpRequestInformation(method = HttpMethod.POST, path = "/union/generate", expectedStatusCodes = { 202 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<ResourceOperationStatusOperationStatusResultError> generate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/union/generate", expectedStatusCodes = { 202 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default ResourceOperationStatusOperationStatusResultError generate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept) {
            return generate(endpoint, apiVersion, accept, null).getValue();
        }
    }

    /**
     * The send operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     user (Optional): {
     *         user: String (Required)
     *     }
     *     input: BinaryData (Required)
     * }
     * }
     * </pre>
     * 
     * @param id The id parameter.
     * @param sendRequest The sendRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> sendWithResponse(String id, BinaryData sendRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        return service.send(this.client.getEndpoint(), id, this.client.getServiceVersion().getVersion(), contentType,
            sendRequest, requestOptions);
    }

    /**
     * The sendLong operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>The filter parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     user (Optional): {
     *         user: String (Required)
     *     }
     *     input: String (Required)
     *     dataInt: int (Required)
     *     dataUnion: BinaryData (Optional)
     *     dataLong: Long (Optional)
     *     data_float: Double (Optional)
     * }
     * }
     * </pre>
     * 
     * @param id The id parameter.
     * @param sendLongRequest The sendLongRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> sendLongWithResponse(String id, BinaryData sendLongRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        return service.sendLong(this.client.getEndpoint(), id, this.client.getServiceVersion().getVersion(),
            contentType, sendLongRequest, requestOptions);
    }

    /**
     * The get operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>data</td><td>BinaryData</td><td>No</td><td>The data parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> getWithResponse(RequestOptions requestOptions) {
        return service.get(this.client.getEndpoint(), requestOptions);
    }
}
