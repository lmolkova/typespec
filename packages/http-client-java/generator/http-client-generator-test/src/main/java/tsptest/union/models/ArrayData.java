// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.union.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The ArrayData model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class ArrayData implements JsonSerializable<ArrayData> {
    /*
     * The data property.
     */
    @Metadata(generated = true)
    private final List<String> data;

    /**
     * Creates an instance of ArrayData class.
     * 
     * @param data the data value to set.
     */
    @Metadata(generated = true)
    public ArrayData(List<String> data) {
        this.data = data;
    }

    /**
     * Get the data property: The data property.
     * 
     * @return the data value.
     */
    @Metadata(generated = true)
    public List<String> getData() {
        return this.data;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("data", this.data, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ArrayData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ArrayData if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ArrayData.
     */
    @Metadata(generated = true)
    public static ArrayData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<String> data = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("data".equals(fieldName)) {
                    data = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new ArrayData(data);
        });
    }
}
