// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.multicontenttypes;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.instrumentation.Instrumentation;
import io.clientcore.core.models.binarydata.BinaryData;
import tsptest.multicontenttypes.implementation.MultiContentTypesClientImpl;

/**
 * Initializes a new instance of the synchronous MultiContentTypesClient type.
 */
@ServiceClient(builder = MultiContentTypesClientBuilder.class)
public final class MultiContentTypesClient {
    @Metadata(generated = true)
    private final MultiContentTypesClientImpl serviceClient;

    private final Instrumentation instrumentation;

    /**
     * Initializes an instance of MultiContentTypesClient class.
     * 
     * @param serviceClient the service client implementation.
     * @param instrumentation the instrumentation instance.
     */
    @Metadata(generated = true)
    MultiContentTypesClient(MultiContentTypesClientImpl serviceClient, Instrumentation instrumentation) {
        this.serviceClient = serviceClient;
        this.instrumentation = instrumentation;
    }

    /**
     * multiple data types map to multiple content types.
     * 
     * @param contentType The contentType parameter. Allowed values: "text/plain", "application/json",
     * "application/octet-stream", "image/jpeg", "image/png".
     * @param data The data parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> uploadWithOverloadWithResponse(String contentType, BinaryData data,
        RequestOptions requestOptions) {
        // Operation 'uploadWithOverload' can be invoked with multiple content-type. It is difficult to form a correct
        // method signature for convenience API, and hence the convenience API is not generated.
        return this.instrumentation.instrumentWithResponse("TspTest.MultiContentTypes.uploadWithOverload",
            requestOptions,
            updatedOptions -> this.serviceClient.uploadWithOverloadWithResponse(contentType, data, updatedOptions));
    }
}
