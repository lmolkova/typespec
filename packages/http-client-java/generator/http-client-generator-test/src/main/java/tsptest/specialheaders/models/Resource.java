// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.specialheaders.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;
import tsptest.specialheaders.implementation.JsonMergePatchHelper;

/**
 * The Resource model.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class Resource implements JsonSerializable<Resource> {
    /*
     * The id property.
     */
    @Metadata(generated = true)
    private String id;

    /*
     * The name property.
     */
    @Metadata(generated = true)
    private String name;

    /*
     * The description property.
     */
    @Metadata(generated = true)
    private String description;

    /*
     * The type property.
     */
    @Metadata(generated = true)
    private String type;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Metadata(generated = true)
    private final Set<String> updatedProperties = new HashSet<>();

    @Metadata(generated = true)
    private boolean jsonMergePatch;

    @Metadata(generated = true)
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setResourceAccessor(new JsonMergePatchHelper.ResourceAccessor() {
            @Override
            public Resource prepareModelForJsonMergePatch(Resource model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(Resource model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of Resource class.
     */
    @Metadata(generated = true)
    public Resource() {
    }

    /**
     * Get the id property: The id property.
     * 
     * @return the id value.
     */
    @Metadata(generated = true)
    public String getId() {
        return this.id;
    }

    /**
     * Get the name property: The name property.
     * 
     * @return the name value.
     */
    @Metadata(generated = true)
    public String getName() {
        return this.name;
    }

    /**
     * Get the description property: The description property.
     * 
     * @return the description value.
     */
    @Metadata(generated = true)
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: The description property.
     * 
     * @param description the description value to set.
     * @return the Resource object itself.
     */
    @Metadata(generated = true)
    public Resource setDescription(String description) {
        this.description = description;
        this.updatedProperties.add("description");
        return this;
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Metadata(generated = true)
    public String getType() {
        return this.type;
    }

    /**
     * Set the type property: The type property.
     * <p>Required when create the resource.</p>
     * 
     * @param type the type value to set.
     * @return the Resource object itself.
     */
    @Metadata(generated = true)
    public Resource setType(String type) {
        this.type = type;
        this.updatedProperties.add("type");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("description", this.description);
            jsonWriter.writeStringField("type", this.type);
            return jsonWriter.writeEndObject();
        }
    }

    @Metadata(generated = true)
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("description")) {
            if (this.description == null) {
                jsonWriter.writeNullField("description");
            } else {
                jsonWriter.writeStringField("description", this.description);
            }
        }
        if (updatedProperties.contains("type")) {
            if (this.type == null) {
                jsonWriter.writeNullField("type");
            } else {
                jsonWriter.writeStringField("type", this.type);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Resource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Resource if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Resource.
     */
    @Metadata(generated = true)
    public static Resource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Resource deserializedResource = new Resource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedResource.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedResource.name = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedResource.description = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedResource.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResource;
        });
    }
}
