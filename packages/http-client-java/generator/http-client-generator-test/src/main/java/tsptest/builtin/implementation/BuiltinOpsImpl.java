// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.builtin.implementation;

import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.BodyParam;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.QueryParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;
import tsptest.builtin.models.Builtin;

/**
 * An instance of this class provides access to all the operations defined in BuiltinOps.
 */
public final class BuiltinOpsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final BuiltinOpsService service;

    /**
     * The service client containing this operation class.
     */
    private final BuiltinClientImpl client;

    /**
     * Initializes an instance of BuiltinOpsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    BuiltinOpsImpl(BuiltinClientImpl client) {
        this.service = RestProxy.create(BuiltinOpsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for BuiltinClientBuiltinOps to be used by the proxy service to perform
     * REST calls.
     */
    @ServiceInterface(name = "BuiltinClientBuiltin", host = "{endpoint}")
    public interface BuiltinOpsService {
        static BuiltinOpsService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer) {
            try {
                Class<?> clazz = Class.forName("tsptest.builtin.implementation.BuiltinOpsServiceImpl");
                return (BuiltinOpsService) clazz.getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class)
                    .invoke(null, pipeline, serializer);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/builtin", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Builtin> read(@HostParam("endpoint") String endpoint, @QueryParam("query") String queryParam,
            @QueryParam(value = "query-encoded", encoded = true) String queryParamEncoded,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/builtin", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default Builtin read(@HostParam("endpoint") String endpoint, @QueryParam("query") String queryParam,
            @QueryParam(value = "query-encoded", encoded = true) String queryParamEncoded,
            @HeaderParam("Accept") String accept) {
            return read(endpoint, null, null, queryParam, queryParamEncoded, null, null, accept, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.POST, path = "/builtin", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Void> write(@HostParam("endpoint") String endpoint, @HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/builtin", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default void write(@HostParam("endpoint") String endpoint, @HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData body) {
            write(endpoint, contentType, body, null);
        }
    }

    /**
     * The read operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>The filter parameter</td></tr>
     * <tr><td>query-opt</td><td>String</td><td>No</td><td>The queryParamOptional parameter</td></tr>
     * <tr><td>query-opt-encoded</td><td>String</td><td>No</td><td>The queryParamOptionalEncoded parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-date</td><td>OffsetDateTime</td><td>No</td><td>The dateTime parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     boolean: boolean (Required)
     *     string: String (Required)
     *     bytes: byte[] (Required)
     *     int: int (Required)
     *     safeint: long (Required)
     *     decimal: BigDecimal (Required)
     *     long: long (Required)
     *     float: double (Required)
     *     double: double (Required)
     *     duration: Duration (Required)
     *     date: LocalDate (Required)
     *     dateTime: OffsetDateTime (Required)
     *     stringList (Required): [
     *         String (Required)
     *     ]
     *     bytesDict (Required): {
     *         String: byte[] (Required)
     *     }
     *     url: String (Required)
     *     nullableFloatDict (Required): {
     *         String: Double (Optional)
     *     }
     *     encoded (Required): {
     *         timeInSeconds: Long (Optional)
     *         timeInSecondsFraction: Double (Optional)
     *         dateTime: OffsetDateTime (Optional)
     *         dateTimeRfc7231: DateTimeRfc1123 (Optional)
     *         unixTimestamp: Long (Optional)
     *         base64: byte[] (Optional)
     *         base64url: Base64Url (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param queryParam The queryParam parameter.
     * @param queryParamEncoded The queryParamEncoded parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Builtin> readWithResponse(String queryParam, String queryParamEncoded,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.read(this.client.getEndpoint(), queryParam, queryParamEncoded, accept, requestOptions);
    }

    /**
     * The write operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     boolean: boolean (Required)
     *     string: String (Required)
     *     bytes: byte[] (Required)
     *     int: int (Required)
     *     safeint: long (Required)
     *     decimal: BigDecimal (Required)
     *     long: long (Required)
     *     float: double (Required)
     *     double: double (Required)
     *     duration: Duration (Required)
     *     date: LocalDate (Required)
     *     dateTime: OffsetDateTime (Required)
     *     stringList (Required): [
     *         String (Required)
     *     ]
     *     bytesDict (Required): {
     *         String: byte[] (Required)
     *     }
     *     url: String (Required)
     *     nullableFloatDict (Required): {
     *         String: Double (Optional)
     *     }
     *     encoded (Required): {
     *         timeInSeconds: Long (Optional)
     *         timeInSecondsFraction: Double (Optional)
     *         dateTime: OffsetDateTime (Optional)
     *         dateTimeRfc7231: DateTimeRfc1123 (Optional)
     *         unixTimestamp: Long (Optional)
     *         base64: byte[] (Optional)
     *         base64url: Base64Url (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> writeWithResponse(BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        return service.write(this.client.getEndpoint(), contentType, body, requestOptions);
    }
}
