// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.flatten.implementation;

import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.BodyParam;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.PathParam;
import io.clientcore.core.http.annotations.QueryParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;
import tsptest.flatten.FlattenServiceVersion;
import tsptest.flatten.models.TodoItem;

/**
 * Initializes a new instance of the FlattenClient type.
 */
public final class FlattenClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final FlattenClientService service;

    /**
     */
    private final String endpoint;

    /**
     * Gets.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Service version.
     */
    private final FlattenServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public FlattenServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * Initializes an instance of FlattenClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint
     * @param serviceVersion Service version.
     */
    public FlattenClientImpl(HttpPipeline httpPipeline, String endpoint, FlattenServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service = RestProxy.create(FlattenClientService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for FlattenClient to be used by the proxy service to perform REST calls.
     */
    @ServiceInterface(name = "FlattenClient", host = "{endpoint}/openai")
    public interface FlattenClientService {
        static FlattenClientService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer,
            @HostParam("endpoint") String endpoint, @HeaderParam("Content-Type") String contentType) {
            try {
                Class<?> clazz = Class.forName("tsptest.flatten.implementation.FlattenClientServiceImpl");
                return (FlattenClientService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class, String.class, String.class)
                    .invoke(null, pipeline, serializer, endpoint, contentType);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(method = HttpMethod.POST, path = "/flatten/send", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Void> send(@QueryParam("id") String id, @QueryParam("constantQueryParam") String constantQueryParam,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") BinaryData sendRequest,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/flatten/send", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default void send(@QueryParam("id") String id, @QueryParam("constantQueryParam") String constantQueryParam,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") BinaryData sendRequest) {
            send(id, constantQueryParam, apiVersion, sendRequest, null);
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/flatten/send-projected-name",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Void> sendProjectedName(@QueryParam("id") String id,
            @BodyParam("application/json") BinaryData sendProjectedNameRequest, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/flatten/send-projected-name",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default void sendProjectedName(@QueryParam("id") String id,
            @BodyParam("application/json") BinaryData sendProjectedNameRequest) {
            sendProjectedName(id, sendProjectedNameRequest, null);
        }

        @HttpRequestInformation(method = HttpMethod.POST, path = "/flatten/send-long", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Void> sendLong(@QueryParam("name") String name, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") BinaryData sendLongRequest, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/flatten/send-long", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default void sendLong(@QueryParam("name") String name, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") BinaryData sendLongRequest) {
            sendLong(name, null, apiVersion, sendLongRequest, null);
        }

        @HttpRequestInformation(method = HttpMethod.PATCH, path = "/flatten/patch/{id}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<TodoItem> update(@PathParam("id") long id, @HeaderParam("Accept") String accept,
            @BodyParam("application/merge-patch+json") BinaryData updateRequest, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.PATCH, path = "/flatten/patch/{id}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default TodoItem update(@PathParam("id") long id, @HeaderParam("Accept") String accept,
            @BodyParam("application/merge-patch+json") BinaryData updateRequest) {
            return update(id, accept, updateRequest, null).getValue();
        }

        // @Multipart not supported by RestProxy
        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/flatten/upload/{name}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Void> uploadFile(@PathParam("name") String name,
            @BodyParam("multipart/form-data") BinaryData uploadFileRequest, RequestOptions requestOptions);

        // @Multipart not supported by RestProxy
        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/flatten/upload/{name}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default void uploadFile(@PathParam("name") String name,
            @BodyParam("multipart/form-data") BinaryData uploadFileRequest) {
            uploadFile(name, uploadFileRequest, null);
        }

        // @Multipart not supported by RestProxy
        @HttpRequestInformation(method = HttpMethod.POST, path = "/flatten/upload-todo", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Void> uploadTodo(@BodyParam("multipart/form-data") BinaryData uploadTodoRequest,
            RequestOptions requestOptions);

        // @Multipart not supported by RestProxy
        @HttpRequestInformation(method = HttpMethod.POST, path = "/flatten/upload-todo", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default void uploadTodo(@BodyParam("multipart/form-data") BinaryData uploadTodoRequest) {
            uploadTodo(uploadTodoRequest, null);
        }
    }

    /**
     * The send operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     endpoint: String (Required)
     *     user (Optional): {
     *         user: String (Required)
     *     }
     *     input: String (Required)
     *     constant: String (Required)
     *     requiredInt: int (Required)
     * }
     * }
     * </pre>
     * 
     * @param id The id parameter.
     * @param sendRequest The sendRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> sendWithResponse(String id, BinaryData sendRequest, RequestOptions requestOptions) {
        final String constantQueryParam = "constant";
        return service.send(id, constantQueryParam, this.getServiceVersion().getVersion(), sendRequest, requestOptions);
    }

    /**
     * The sendProjectedName operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     file_id: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param id The id parameter.
     * @param sendProjectedNameRequest The sendProjectedNameRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> sendProjectedNameWithResponse(String id, BinaryData sendProjectedNameRequest,
        RequestOptions requestOptions) {
        return service.sendProjectedName(id, sendProjectedNameRequest, requestOptions);
    }

    /**
     * The sendLong operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>The filter parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     user (Optional): {
     *         user: String (Required)
     *     }
     *     input: String (Required)
     *     dataInt: int (Required)
     *     dataIntOptional: Integer (Optional)
     *     dataLong: Long (Optional)
     *     requiredUser (Required): (recursive schema, see requiredUser above)
     *     data_float: Double (Optional)
     *     title: String (Required)
     *     description: String (Optional)
     *     status: String(NotStarted/InProgress/Completed) (Required)
     *     _dummy: String (Optional)
     *     constant: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param name The name parameter.
     * @param sendLongRequest The sendLongRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> sendLongWithResponse(String name, BinaryData sendLongRequest, RequestOptions requestOptions) {
        return service.sendLong(name, this.getServiceVersion().getVersion(), sendLongRequest, requestOptions);
    }

    /**
     * The update operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     patch (Optional, Required on create): {
     *         title: String (Optional)
     *         description: String (Optional)
     *         status: String(NotStarted/InProgress/Completed) (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: long (Required)
     *     title: String (Required)
     *     description: String (Optional)
     *     status: String(NotStarted/InProgress/Completed) (Required)
     *     createdAt: OffsetDateTime (Required)
     *     updatedAt: OffsetDateTime (Required)
     *     completedAt: OffsetDateTime (Optional)
     *     _dummy: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param id The id parameter.
     * @param updateRequest The updateRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<TodoItem> updateWithResponse(long id, BinaryData updateRequest, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.update(id, accept, updateRequest, requestOptions);
    }

    /**
     * The uploadFile operation.
     * 
     * @param name The name parameter.
     * @param uploadFileRequest The uploadFileRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> uploadFileWithResponse(String name, BinaryData uploadFileRequest,
        RequestOptions requestOptions) {
        return service.uploadFile(name, uploadFileRequest, requestOptions);
    }

    /**
     * The uploadTodo operation.
     * 
     * @param uploadTodoRequest The uploadTodoRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> uploadTodoWithResponse(BinaryData uploadTodoRequest, RequestOptions requestOptions) {
        return service.uploadTodo(uploadTodoRequest, requestOptions);
    }
}
