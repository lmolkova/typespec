// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.literalservice.implementation;

import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.BodyParam;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.QueryParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;
import tsptest.literalservice.models.Model;

/**
 * An instance of this class provides access to all the operations defined in LiteralOps.
 */
public final class LiteralOpsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final LiteralOpsService service;

    /**
     * The service client containing this operation class.
     */
    private final LiteralServiceClientImpl client;

    /**
     * Initializes an instance of LiteralOpsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    LiteralOpsImpl(LiteralServiceClientImpl client) {
        this.service = RestProxy.create(LiteralOpsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for LiteralServiceClientLiteralOps to be used by the proxy service to
     * perform REST calls.
     */
    @ServiceInterface(name = "LiteralServiceClient", host = "{endpoint}")
    public interface LiteralOpsService {
        static LiteralOpsService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer) {
            try {
                Class<?> clazz = Class.forName("tsptest.literalservice.implementation.LiteralOpsServiceImpl");
                return (LiteralOpsService) clazz.getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class)
                    .invoke(null, pipeline, serializer);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(method = HttpMethod.PUT, path = "/literal/put", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Model> put(@HostParam("endpoint") String endpoint, @QueryParam("literalParam") String literalParam,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.PUT, path = "/literal/put", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default Model put(@HostParam("endpoint") String endpoint, @QueryParam("literalParam") String literalParam,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body) {
            return put(endpoint, literalParam, null, contentType, accept, body, null).getValue();
        }
    }

    /**
     * The put operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>optionalLiteralParam</td><td>String</td><td>No</td><td>The optionalLiteralParam parameter. Allowed
     * values: "optionalLiteralParam".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     literal: String (Required)
     *     optionalLiteral: String(optionalLiteral) (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     literal: String (Required)
     *     optionalLiteral: String(optionalLiteral) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Model> putWithResponse(BinaryData body, RequestOptions requestOptions) {
        final String literalParam = "literalParam";
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.put(this.client.getEndpoint(), literalParam, contentType, accept, body, requestOptions);
    }
}
