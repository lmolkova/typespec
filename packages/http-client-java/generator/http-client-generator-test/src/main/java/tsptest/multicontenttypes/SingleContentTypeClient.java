// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.multicontenttypes;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.instrumentation.Instrumentation;
import io.clientcore.core.models.binarydata.BinaryData;
import tsptest.multicontenttypes.implementation.SingleContentTypesImpl;

/**
 * Initializes a new instance of the synchronous MultiContentTypesClient type.
 */
@ServiceClient(builder = MultiContentTypesClientBuilder.class)
public final class SingleContentTypeClient {
    @Metadata(generated = true)
    private final SingleContentTypesImpl serviceClient;

    private final Instrumentation instrumentation;

    /**
     * Initializes an instance of SingleContentTypeClient class.
     * 
     * @param serviceClient the service client implementation.
     * @param instrumentation the instrumentation instance.
     */
    @Metadata(generated = true)
    SingleContentTypeClient(SingleContentTypesImpl serviceClient, Instrumentation instrumentation) {
        this.serviceClient = serviceClient;
        this.instrumentation = instrumentation;
    }

    /**
     * response is binary.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<BinaryData> downloadImageForSingleContentTypeWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse(
            "TspTest.MultiContentTypes.SingleContentType.downloadImageForSingleContentType", requestOptions,
            updatedOptions -> this.serviceClient.downloadImageForSingleContentTypeWithResponse(updatedOptions));
    }

    /**
     * request is binary.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param data The data parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> uploadImageForSingleContentTypeWithResponse(BinaryData data, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse(
            "TspTest.MultiContentTypes.SingleContentType.uploadImageForSingleContentType", requestOptions,
            updatedOptions -> this.serviceClient.uploadImageForSingleContentTypeWithResponse(data, updatedOptions));
    }

    /**
     * response is binary.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public BinaryData downloadImageForSingleContentType() {
        // Generated convenience method for downloadImageForSingleContentTypeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return downloadImageForSingleContentTypeWithResponse(requestOptions).getValue();
    }

    /**
     * request is binary.
     * 
     * @param data The data parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void uploadImageForSingleContentType(BinaryData data) {
        // Generated convenience method for uploadImageForSingleContentTypeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        uploadImageForSingleContentTypeWithResponse(data, requestOptions).getValue();
    }
}
