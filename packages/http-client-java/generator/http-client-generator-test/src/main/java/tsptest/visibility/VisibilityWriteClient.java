// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.visibility;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.instrumentation.Instrumentation;
import io.clientcore.core.models.binarydata.BinaryData;
import tsptest.visibility.implementation.VisibilityWritesImpl;
import tsptest.visibility.models.Dog;
import tsptest.visibility.models.WriteDog;

/**
 * Initializes a new instance of the synchronous VisibilityClient type.
 */
@ServiceClient(builder = VisibilityClientBuilder.class)
public final class VisibilityWriteClient {
    @Metadata(generated = true)
    private final VisibilityWritesImpl serviceClient;

    private final Instrumentation instrumentation;

    /**
     * Initializes an instance of VisibilityWriteClient class.
     * 
     * @param serviceClient the service client implementation.
     * @param instrumentation the instrumentation instance.
     */
    @Metadata(generated = true)
    VisibilityWriteClient(VisibilityWritesImpl serviceClient, Instrumentation instrumentation) {
        this.serviceClient = serviceClient;
        this.instrumentation = instrumentation;
    }

    /**
     * The create operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     secretName: String (Required)
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: int (Required)
     *     secretName: String (Required)
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param dog The dog parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Dog> createWithResponse(BinaryData dog, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.Visibility.VisibilityWrite.create", requestOptions,
            updatedOptions -> this.serviceClient.createWithResponse(dog, updatedOptions));
    }

    /**
     * The create operation.
     * 
     * @param dog The dog parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Dog create(WriteDog dog) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createWithResponse(BinaryData.fromObject(dog), requestOptions).getValue();
    }
}
