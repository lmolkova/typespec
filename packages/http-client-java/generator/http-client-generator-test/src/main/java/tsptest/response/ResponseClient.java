// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.response;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ReturnType;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.annotations.ServiceMethod;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.PagedIterable;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.instrumentation.Instrumentation;
import io.clientcore.core.models.binarydata.BinaryData;
import java.util.List;
import tsptest.response.implementation.ResponseClientImpl;
import tsptest.response.models.Resource;

/**
 * Initializes a new instance of the synchronous ResponseClient type.
 */
@ServiceClient(builder = ResponseClientBuilder.class)
public final class ResponseClient {
    @Metadata(generated = true)
    private final ResponseClientImpl serviceClient;

    private final Instrumentation instrumentation;

    /**
     * Initializes an instance of ResponseClient class.
     * 
     * @param serviceClient the service client implementation.
     * @param instrumentation the instrumentation instance.
     */
    @Metadata(generated = true)
    ResponseClient(ResponseClientImpl serviceClient, Instrumentation instrumentation) {
        this.serviceClient = serviceClient;
        this.instrumentation = instrumentation;
    }

    /**
     * The getBinary operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<BinaryData> getBinaryWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.Response.ResponseOp.getBinary", requestOptions,
            updatedOptions -> this.serviceClient.getBinaryWithResponse(updatedOptions));
    }

    /**
     * The getArray operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         id: String (Required)
     *         name: String (Required)
     *         description: String (Optional)
     *         type: String (Required)
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<List<Resource>> getArrayWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.Response.ResponseOp.getArray", requestOptions,
            updatedOptions -> this.serviceClient.getArrayWithResponse(updatedOptions));
    }

    /**
     * The getAnotherArray operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         id: String (Required)
     *         name: String (Required)
     *         description: String (Optional)
     *         type: String (Required)
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<List<Resource>> getAnotherArrayWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.Response.ResponseOp.getAnotherArray",
            requestOptions, updatedOptions -> this.serviceClient.getAnotherArrayWithResponse(updatedOptions));
    }

    /**
     * The createWithHeaders operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Resource> createWithHeadersWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.Response.ResponseOp.createWithHeaders",
            requestOptions, updatedOptions -> this.serviceClient.createWithHeadersWithResponse(updatedOptions));
    }

    /**
     * The deleteWithHeaders operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> deleteWithHeadersWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.Response.ResponseOp.deleteWithHeaders",
            requestOptions, updatedOptions -> this.serviceClient.deleteWithHeadersWithResponse(updatedOptions));
    }

    /**
     * The most basic operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * boolean
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return whether resource exists.
     */
    @Metadata(generated = true)
    public Response<Boolean> existsWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.Response.ResponseOp.exists", requestOptions,
            updatedOptions -> this.serviceClient.existsWithResponse(updatedOptions));
    }

    /**
     * The listStrings operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     items_value (Required): [
     *         String (Required)
     *     ]
     *     next_link: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<String> listStrings(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.Response.ResponseOp.listStrings", requestOptions,
            updatedOptions -> this.serviceClient.listStrings(updatedOptions));
    }

    /**
     * The listIntegers operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *         int (Required)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Integer> listIntegers(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.Response.ResponseOp.listIntegers", requestOptions,
            updatedOptions -> this.serviceClient.listIntegers(updatedOptions));
    }

    /**
     * The getJsonUtf8Response operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Resource> getJsonUtf8ResponseWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.Response.ResponseOp.getJsonUtf8Response",
            requestOptions, updatedOptions -> this.serviceClient.getJsonUtf8ResponseWithResponse(updatedOptions));
    }

    /**
     * The getPlusJsonResponse operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Resource> getPlusJsonResponseWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.Response.ResponseOp.getPlusJsonResponse",
            requestOptions, updatedOptions -> this.serviceClient.getPlusJsonResponseWithResponse(updatedOptions));
    }

    /**
     * The getBinary operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public BinaryData getBinary() {
        // Generated convenience method for getBinaryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getBinaryWithResponse(requestOptions).getValue();
    }

    /**
     * The getArray operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public List<Resource> getArray() {
        // Generated convenience method for getArrayWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getArrayWithResponse(requestOptions).getValue();
    }

    /**
     * The getAnotherArray operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public List<Resource> getAnotherArray() {
        // Generated convenience method for getAnotherArrayWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAnotherArrayWithResponse(requestOptions).getValue();
    }

    /**
     * The createWithHeaders operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Resource createWithHeaders() {
        // Generated convenience method for createWithHeadersWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createWithHeadersWithResponse(requestOptions).getValue();
    }

    /**
     * The deleteWithHeaders operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void deleteWithHeaders() {
        // Generated convenience method for deleteWithHeadersWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteWithHeadersWithResponse(requestOptions).getValue();
    }

    /**
     * The most basic operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @Metadata(generated = true)
    public boolean exists() {
        // Generated convenience method for existsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return existsWithResponse(requestOptions).getValue();
    }

    /**
     * The listStrings operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<String> listStrings() {
        // Generated convenience method for listStrings
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listStrings(requestOptions);
    }

    /**
     * The listIntegers operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Integer> listIntegers() {
        // Generated convenience method for listIntegers
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listIntegers(requestOptions);
    }

    /**
     * The getJsonUtf8Response operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Resource getJsonUtf8Response() {
        // Generated convenience method for getJsonUtf8ResponseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getJsonUtf8ResponseWithResponse(requestOptions).getValue();
    }

    /**
     * The getPlusJsonResponse operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Resource getPlusJsonResponse() {
        // Generated convenience method for getPlusJsonResponseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPlusJsonResponseWithResponse(requestOptions).getValue();
    }
}
