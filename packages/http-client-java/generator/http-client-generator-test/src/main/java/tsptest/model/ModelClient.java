// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.model;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.instrumentation.Instrumentation;
import io.clientcore.core.models.binarydata.BinaryData;
import tsptest.model.implementation.ModelOpsImpl;
import tsptest.model.models.NestedModel;
import tsptest.model.models.Resource1;
import tsptest.model.models.Resource2;
import tsptest.model.models.Resource3;

/**
 * Initializes a new instance of the synchronous ModelClient type.
 */
@ServiceClient(builder = ModelClientBuilder.class)
public final class ModelClient {
    @Metadata(generated = true)
    private final ModelOpsImpl serviceClient;

    private final Instrumentation instrumentation;

    /**
     * Initializes an instance of ModelClient class.
     * 
     * @param serviceClient the service client implementation.
     * @param instrumentation the instrumentation instance.
     */
    @Metadata(generated = true)
    ModelClient(ModelOpsImpl serviceClient, Instrumentation instrumentation) {
        this.serviceClient = serviceClient;
        this.instrumentation = instrumentation;
    }

    /**
     * The put1 operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     outputData (Required): {
     *         data: String (Required)
     *     }
     *     outputData2 (Required): {
     *         data: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     outputData (Required): {
     *         data: String (Required)
     *     }
     *     outputData2 (Required): {
     *         data: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Resource1> put1WithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.Model.ModelOp.put1", requestOptions,
            updatedOptions -> this.serviceClient.put1WithResponse(body, updatedOptions));
    }

    /**
     * The put2 operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     data2 (Required): {
     *         data: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     data2 (Required): {
     *         data: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Resource2> put2WithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.Model.ModelOp.put2", requestOptions,
            updatedOptions -> this.serviceClient.put2WithResponse(body, updatedOptions));
    }

    /**
     * The get3 operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     outputData3 (Required): {
     *         data: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Resource3> get3WithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.Model.ModelOp.get3", requestOptions,
            updatedOptions -> this.serviceClient.get3WithResponse(updatedOptions));
    }

    /**
     * The putNested operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     nested1 (Required): {
     *         nested2 (Required): {
     *             data: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     nested1 (Required): {
     *         nested2 (Required): {
     *             data: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<NestedModel> putNestedWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.Model.ModelOp.putNested", requestOptions,
            updatedOptions -> this.serviceClient.putNestedWithResponse(body, updatedOptions));
    }

    /**
     * The put1 operation.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Resource1 put1(Resource1 body) {
        // Generated convenience method for put1WithResponse
        RequestOptions requestOptions = new RequestOptions();
        return put1WithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * The put2 operation.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Resource2 put2(Resource2 body) {
        // Generated convenience method for put2WithResponse
        RequestOptions requestOptions = new RequestOptions();
        return put2WithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * The get3 operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Resource3 get3() {
        // Generated convenience method for get3WithResponse
        RequestOptions requestOptions = new RequestOptions();
        return get3WithResponse(requestOptions).getValue();
    }

    /**
     * The putNested operation.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public NestedModel putNested(NestedModel body) {
        // Generated convenience method for putNestedWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return putNestedWithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }
}
