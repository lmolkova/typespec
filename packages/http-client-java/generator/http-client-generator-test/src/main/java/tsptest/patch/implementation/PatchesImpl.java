// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.patch.implementation;

import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.BodyParam;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;
import tsptest.patch.models.Fish;
import tsptest.patch.models.Resource;

/**
 * An instance of this class provides access to all the operations defined in Patches.
 */
public final class PatchesImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final PatchesService service;

    /**
     * The service client containing this operation class.
     */
    private final PatchClientImpl client;

    /**
     * Initializes an instance of PatchesImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    PatchesImpl(PatchClientImpl client) {
        this.service = RestProxy.create(PatchesService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for PatchClientPatches to be used by the proxy service to perform REST
     * calls.
     */
    @ServiceInterface(name = "PatchClientPatches", host = "{endpoint}")
    public interface PatchesService {
        static PatchesService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer) {
            try {
                Class<?> clazz = Class.forName("tsptest.patch.implementation.PatchesServiceImpl");
                return (PatchesService) clazz.getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class)
                    .invoke(null, pipeline, serializer);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(method = HttpMethod.PATCH, path = "/patch/resource", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Resource> createOrUpdateResource(@HostParam("endpoint") String endpoint,
            @HeaderParam("content-type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/merge-patch+json") BinaryData resource, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.PATCH, path = "/patch/resource", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default Resource createOrUpdateResource(@HostParam("endpoint") String endpoint,
            @HeaderParam("content-type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/merge-patch+json") BinaryData resource) {
            return createOrUpdateResource(endpoint, contentType, accept, resource, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.PATCH,
            path = "/patch/resource/optional",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Resource> createOrUpdateOptionalResource(@HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.PATCH,
            path = "/patch/resource/optional",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default Resource createOrUpdateOptionalResource(@HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept) {
            return createOrUpdateOptionalResource(null, endpoint, accept, null, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.PATCH, path = "/patch/fish", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Fish> createOrUpdateFish(@HostParam("endpoint") String endpoint,
            @HeaderParam("content-type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/merge-patch+json") BinaryData fish, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.PATCH, path = "/patch/fish", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default Fish createOrUpdateFish(@HostParam("endpoint") String endpoint,
            @HeaderParam("content-type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/merge-patch+json") BinaryData fish) {
            return createOrUpdateFish(endpoint, contentType, accept, fish, null).getValue();
        }
    }

    /**
     * The createOrUpdateResource operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     map (Optional, Required on create): {
     *         String (Required): {
     *             name: String (Optional, Required on create)
     *             description: String (Optional)
     *         }
     *     }
     *     longValue: Long (Optional)
     *     intValue: Integer (Optional)
     *     enumValue: String(a/b/c) (Optional)
     *     wireNameForInnerModelProperty (Optional): (recursive schema, see wireNameForInnerModelProperty above)
     *     array (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     fish (Optional): {
     *         kind: String (Required)
     *         id: String (Required)
     *         name: String (Required)
     *         age: int (Optional, Required on create)
     *         color: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     map (Optional, Required on create): {
     *         String (Required): {
     *             name: String (Optional, Required on create)
     *             description: String (Optional)
     *         }
     *     }
     *     longValue: Long (Optional)
     *     intValue: Integer (Optional)
     *     enumValue: String(a/b/c) (Optional)
     *     wireNameForInnerModelProperty (Optional): (recursive schema, see wireNameForInnerModelProperty above)
     *     array (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     fish (Optional): {
     *         kind: String (Required)
     *         id: String (Required)
     *         name: String (Required)
     *         age: int (Optional, Required on create)
     *         color: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param resource The resource parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Resource> createOrUpdateResourceWithResponse(BinaryData resource, RequestOptions requestOptions) {
        final String contentType = "application/merge-patch+json";
        final String accept = "application/json";
        return service.createOrUpdateResource(this.client.getEndpoint(), contentType, accept, resource, requestOptions);
    }

    /**
     * The createOrUpdateOptionalResource operation.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/merge-patch+json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     map (Optional, Required on create): {
     *         String (Required): {
     *             name: String (Optional, Required on create)
     *             description: String (Optional)
     *         }
     *     }
     *     longValue: Long (Optional)
     *     intValue: Integer (Optional)
     *     enumValue: String(a/b/c) (Optional)
     *     wireNameForInnerModelProperty (Optional): (recursive schema, see wireNameForInnerModelProperty above)
     *     array (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     fish (Optional): {
     *         kind: String (Required)
     *         id: String (Required)
     *         name: String (Required)
     *         age: int (Optional, Required on create)
     *         color: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     map (Optional, Required on create): {
     *         String (Required): {
     *             name: String (Optional, Required on create)
     *             description: String (Optional)
     *         }
     *     }
     *     longValue: Long (Optional)
     *     intValue: Integer (Optional)
     *     enumValue: String(a/b/c) (Optional)
     *     wireNameForInnerModelProperty (Optional): (recursive schema, see wireNameForInnerModelProperty above)
     *     array (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     fish (Optional): {
     *         kind: String (Required)
     *         id: String (Required)
     *         name: String (Required)
     *         age: int (Optional, Required on create)
     *         color: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Resource> createOrUpdateOptionalResourceWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createOrUpdateOptionalResource(this.client.getEndpoint(), accept, requestOptions);
    }

    /**
     * The createOrUpdateFish operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String (Required)
     *     id: String (Required)
     *     name: String (Required)
     *     age: int (Optional, Required on create)
     *     color: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String (Required)
     *     id: String (Required)
     *     name: String (Required)
     *     age: int (Optional, Required on create)
     *     color: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param fish The fish parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return this is base model for polymorphic multiple levels inheritance with a discriminator.
     */
    public Response<Fish> createOrUpdateFishWithResponse(BinaryData fish, RequestOptions requestOptions) {
        final String contentType = "application/merge-patch+json";
        final String accept = "application/json";
        return service.createOrUpdateFish(this.client.getEndpoint(), contentType, accept, fish, requestOptions);
    }
}
