// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.multicontenttypes.implementation;

import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;

/**
 * Initializes a new instance of the MultiContentTypesClient type.
 */
public final class MultiContentTypesClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final MultiContentTypesClientService service;

    /**
     * Service host.
     */
    private final String endpoint;

    /**
     * Gets Service host.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The SingleContentTypesImpl object to access its operations.
     */
    private final SingleContentTypesImpl singleContentTypes;

    /**
     * Gets the SingleContentTypesImpl object to access its operations.
     * 
     * @return the SingleContentTypesImpl object.
     */
    public SingleContentTypesImpl getSingleContentTypes() {
        return this.singleContentTypes;
    }

    /**
     * The MultipleContentTypesOnRequestsImpl object to access its operations.
     */
    private final MultipleContentTypesOnRequestsImpl multipleContentTypesOnRequests;

    /**
     * Gets the MultipleContentTypesOnRequestsImpl object to access its operations.
     * 
     * @return the MultipleContentTypesOnRequestsImpl object.
     */
    public MultipleContentTypesOnRequestsImpl getMultipleContentTypesOnRequests() {
        return this.multipleContentTypesOnRequests;
    }

    /**
     * Initializes an instance of MultiContentTypesClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Service host.
     */
    public MultiContentTypesClientImpl(HttpPipeline httpPipeline, String endpoint) {
        this.httpPipeline = httpPipeline;
        this.endpoint = endpoint;
        this.singleContentTypes = new SingleContentTypesImpl(this);
        this.multipleContentTypesOnRequests = new MultipleContentTypesOnRequestsImpl(this);
        this.service = RestProxy.create(MultiContentTypesClientService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for MultiContentTypesClient to be used by the proxy service to perform
     * REST calls.
     */
    @ServiceInterface(name = "MultiContentTypesCli", host = "{endpoint}")
    public interface MultiContentTypesClientService {
        static MultiContentTypesClientService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer,
            @HostParam("endpoint") String endpoint, @HeaderParam("content-type") String contentType, BinaryData data) {
            try {
                Class<?> clazz
                    = Class.forName("tsptest.multicontenttypes.implementation.MultiContentTypesClientServiceImpl");
                return (MultiContentTypesClientService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class, String.class, String.class,
                        BinaryData.class)
                    .invoke(null, pipeline, serializer, endpoint, contentType, data);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/upload/overload/multi-body-types",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> uploadWithOverload(RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/upload/overload/multi-body-types",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void uploadWithOverload() {
            uploadWithOverload(null);
        }
    }

    /**
     * multiple data types map to multiple content types.
     * 
     * @param contentType The contentType parameter. Allowed values: "text/plain", "application/json",
     * "application/octet-stream", "image/jpeg", "image/png".
     * @param data The data parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> uploadWithOverloadWithResponse(String contentType, BinaryData data,
        RequestOptions requestOptions) {
        return service.uploadWithOverload(requestOptions);
    }
}
