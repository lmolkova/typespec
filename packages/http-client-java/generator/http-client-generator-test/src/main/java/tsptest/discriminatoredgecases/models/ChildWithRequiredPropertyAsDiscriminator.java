// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.discriminatoredgecases.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;

/**
 * The ChildWithRequiredPropertyAsDiscriminator model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public class ChildWithRequiredPropertyAsDiscriminator extends ParentWithRequiredProperty {
    /*
     * Discriminator property for ChildWithRequiredPropertyAsDiscriminator.
     */
    @Metadata(generated = true)
    private String discriminator = "ChildWithRequiredPropertyAsDiscriminator";

    /*
     * The anotherProperty property.
     */
    @Metadata(generated = true)
    private final String anotherProperty;

    /**
     * Creates an instance of ChildWithRequiredPropertyAsDiscriminator class.
     * 
     * @param discriminator the discriminator value to set.
     * @param aProperty the aProperty value to set.
     * @param anotherProperty the anotherProperty value to set.
     */
    @Metadata(generated = true)
    protected ChildWithRequiredPropertyAsDiscriminator(String discriminator, String aProperty, String anotherProperty) {
        super(discriminator, aProperty);
        this.anotherProperty = anotherProperty;
    }

    /**
     * Get the discriminator property: Discriminator property for ChildWithRequiredPropertyAsDiscriminator.
     * 
     * @return the discriminator value.
     */
    @Metadata(generated = true)
    @Override
    public String getDiscriminator() {
        return this.discriminator;
    }

    /**
     * Get the anotherProperty property: The anotherProperty property.
     * 
     * @return the anotherProperty value.
     */
    @Metadata(generated = true)
    public String getAnotherProperty() {
        return this.anotherProperty;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("aProperty", getAProperty());
        jsonWriter.writeStringField("anotherProperty", this.anotherProperty);
        jsonWriter.writeStringField("discriminator", this.discriminator);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChildWithRequiredPropertyAsDiscriminator from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChildWithRequiredPropertyAsDiscriminator if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChildWithRequiredPropertyAsDiscriminator.
     */
    @Metadata(generated = true)
    public static ChildWithRequiredPropertyAsDiscriminator fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("discriminator".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("aValue".equals(discriminatorValue)) {
                    return GrandChildWithRequiredProperty.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Metadata(generated = true)
    static ChildWithRequiredPropertyAsDiscriminator fromJsonKnownDiscriminator(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            String aProperty = null;
            String anotherProperty = null;
            String discriminator = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("aProperty".equals(fieldName)) {
                    aProperty = reader.getString();
                } else if ("anotherProperty".equals(fieldName)) {
                    anotherProperty = reader.getString();
                } else if ("discriminator".equals(fieldName)) {
                    discriminator = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            ChildWithRequiredPropertyAsDiscriminator deserializedChildWithRequiredPropertyAsDiscriminator
                = new ChildWithRequiredPropertyAsDiscriminator(discriminator, aProperty, anotherProperty);
            deserializedChildWithRequiredPropertyAsDiscriminator.discriminator = discriminator;

            return deserializedChildWithRequiredPropertyAsDiscriminator;
        });
    }
}
