// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.response.implementation;

import azure.core.foundations.models.ErrorResponse;
import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.BodyParam;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.PathParam;
import io.clientcore.core.http.annotations.QueryParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.PagedIterable;
import io.clientcore.core.http.models.PagedResponse;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.ObjectSerializer;
import io.clientcore.core.utils.Context;
import java.lang.reflect.InvocationTargetException;
import java.util.List;
import tsptest.response.ResponseServiceVersion;
import tsptest.response.implementation.models.Int32sList;
import tsptest.response.implementation.models.StringsList;
import tsptest.response.models.Resource;

/**
 * Initializes a new instance of the ResponseClient type.
 */
public final class ResponseClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ResponseClientService service;

    /**
     * Service host.
     */
    private final String endpoint;

    /**
     * Gets Service host.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Service version.
     */
    private final ResponseServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public ResponseServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * Initializes an instance of ResponseClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Service host.
     * @param serviceVersion Service version.
     */
    public ResponseClientImpl(HttpPipeline httpPipeline, String endpoint, ResponseServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service = RestProxy.create(ResponseClientService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for ResponseClient to be used by the proxy service to perform REST calls.
     */
    @ServiceInterface(name = "ResponseClient", host = "{endpoint}")
    public interface ResponseClientService {
        static ResponseClientService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer,
            @HostParam("endpoint") String endpoint) {
            try {
                Class<?> clazz = Class.forName("tsptest.response.implementation.ResponseClientServiceImpl");
                return (ResponseClientService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class, String.class)
                    .invoke(null, pipeline, serializer, endpoint);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/response/get-binary", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<BinaryData> getBinary(@HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/response/get-binary", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default BinaryData getBinary(@HeaderParam("Accept") String accept) {
            return getBinary(accept, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/response/get-array", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<List<Resource>> getArray(@HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/response/get-array", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default List<Resource> getArray(@HeaderParam("Accept") String accept) {
            return getArray(accept, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/response/get-another-array",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<List<Resource>> getAnotherArray(@HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/response/get-another-array",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default List<Resource> getAnotherArray(@HeaderParam("Accept") String accept) {
            return getAnotherArray(accept, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.PUT,
            path = "/response/create-with-headers",
            expectedStatusCodes = { 201 })
        @UnexpectedResponseExceptionDetail
        Response<Resource> createWithHeaders(@HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.PUT,
            path = "/response/create-with-headers",
            expectedStatusCodes = { 201 })
        @UnexpectedResponseExceptionDetail
        default Resource createWithHeaders(@HeaderParam("Accept") String accept) {
            return createWithHeaders(accept, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.DELETE,
            path = "/response/delete-with-headers",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> deleteWithHeaders(RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.DELETE,
            path = "/response/delete-with-headers",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void deleteWithHeaders() {
            deleteWithHeaders(null);
        }

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/response/exists", expectedStatusCodes = { 200, 404 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<Boolean> exists(@QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/response/exists", expectedStatusCodes = { 200, 404 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default boolean exists(@QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept) {
            return exists(apiVersion, accept, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/response/lro-invalid-poll-response",
            expectedStatusCodes = { 202 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<Void> lroInvalidPollResponse(@QueryParam("api-version") String apiVersion,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData request, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/response/lro-invalid-poll-response",
            expectedStatusCodes = { 202 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default void lroInvalidPollResponse(@QueryParam("api-version") String apiVersion,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData request) {
            lroInvalidPollResponse(apiVersion, contentType, accept, request, null);
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/response/lro-invalid-result",
            expectedStatusCodes = { 202 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<Void> lroInvalidResult(@QueryParam("api-version") String apiVersion,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData request, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/response/lro-invalid-result",
            expectedStatusCodes = { 202 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default void lroInvalidResult(@QueryParam("api-version") String apiVersion,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData request) {
            lroInvalidResult(apiVersion, contentType, accept, request, null);
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/response/paged-string", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<StringsList> listStrings(@HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/response/paged-string", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default StringsList listStrings(@HeaderParam("Accept") String accept) {
            return listStrings(accept, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/response/paged-int32", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Int32sList> listIntegers(@HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/response/paged-int32", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default Int32sList listIntegers(@HeaderParam("Accept") String accept) {
            return listIntegers(accept, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/response/json-utf8-response",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Resource> getJsonUtf8Response(@HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/response/json-utf8-response",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default Resource getJsonUtf8Response(@HeaderParam("Accept") String accept) {
            return getJsonUtf8Response(accept, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/response/plus-json-response",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Resource> getPlusJsonResponse(@HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/response/plus-json-response",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default Resource getPlusJsonResponse(@HeaderParam("Accept") String accept) {
            return getPlusJsonResponse(accept, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<StringsList> listStringsNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default StringsList listStringsNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HeaderParam("Accept") String accept) {
            return listStringsNext(nextLink, accept, null).getValue();
        }
    }

    /**
     * The getBinary operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<BinaryData> getBinaryWithResponse(RequestOptions requestOptions) {
        final String accept = "image/png";
        return service.getBinary(accept, requestOptions);
    }

    /**
     * The getArray operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         id: String (Required)
     *         name: String (Required)
     *         description: String (Optional)
     *         type: String (Required)
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<List<Resource>> getArrayWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getArray(accept, requestOptions);
    }

    /**
     * The getAnotherArray operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         id: String (Required)
     *         name: String (Required)
     *         description: String (Optional)
     *         type: String (Required)
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<List<Resource>> getAnotherArrayWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getAnotherArray(accept, requestOptions);
    }

    /**
     * The createWithHeaders operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Resource> createWithHeadersWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createWithHeaders(accept, requestOptions);
    }

    /**
     * The deleteWithHeaders operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> deleteWithHeadersWithResponse(RequestOptions requestOptions) {
        return service.deleteWithHeaders(requestOptions);
    }

    /**
     * The most basic operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * boolean
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return whether resource exists.
     */
    public Response<Boolean> existsWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.exists(this.getServiceVersion().getVersion(), accept, requestOptions);
    }

    /**
     * The listStrings operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     items_value (Required): [
     *         String (Required)
     *     ]
     *     next_link: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    private PagedResponse<String> listStringsSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<StringsList> res = service.listStrings(accept, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * The listStrings operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     items_value (Required): [
     *         String (Required)
     *     ]
     *     next_link: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public PagedIterable<String> listStrings(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(requestOptions != null && requestOptions.getContext() != null
            ? requestOptions.getContext()
            : Context.none());
        return new PagedIterable<>((pagingOptions) -> listStringsSinglePage(requestOptions),
            (pagingOptions, nextLink) -> listStringsNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * The listIntegers operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *         int (Required)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    private PagedResponse<Integer> listIntegersSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<Int32sList> res = service.listIntegers(accept, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getValue(), null, null, null, null, null);
    }

    /**
     * The listIntegers operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *         int (Required)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public PagedIterable<Integer> listIntegers(RequestOptions requestOptions) {
        return new PagedIterable<>((pagingOptions) -> listIntegersSinglePage(requestOptions));
    }

    /**
     * The getJsonUtf8Response operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Resource> getJsonUtf8ResponseWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json;charset=utf-8";
        return service.getJsonUtf8Response(accept, requestOptions);
    }

    /**
     * The getPlusJsonResponse operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Resource> getPlusJsonResponseWithResponse(RequestOptions requestOptions) {
        final String accept = "application/vnd.microsoft.appconfig.kv+json";
        return service.getPlusJsonResponse(accept, requestOptions);
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     items_value (Required): [
     *         String (Required)
     *     ]
     *     next_link: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    private PagedResponse<String> listStringsNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<StringsList> res = service.listStringsNext(nextLink, accept, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }
}
