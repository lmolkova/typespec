// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.wiretype;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.instrumentation.Instrumentation;
import io.clientcore.core.models.binarydata.BinaryData;
import tsptest.wiretype.implementation.WireTypeOpsImpl;
import tsptest.wiretype.models.SubClass;
import tsptest.wiretype.models.SubClassBothMismatch;
import tsptest.wiretype.models.SubClassMismatch;

/**
 * Initializes a new instance of the synchronous WireTypeClient type.
 */
@ServiceClient(builder = WireTypeClientBuilder.class)
public final class WireTypeClient {
    @Metadata(generated = true)
    private final WireTypeOpsImpl serviceClient;

    private final Instrumentation instrumentation;

    /**
     * Initializes an instance of WireTypeClient class.
     * 
     * @param serviceClient the service client implementation.
     * @param instrumentation the instrumentation instance.
     */
    @Metadata(generated = true)
    WireTypeClient(WireTypeOpsImpl serviceClient, Instrumentation instrumentation) {
        this.serviceClient = serviceClient;
        this.instrumentation = instrumentation;
    }

    /**
     * The superClassMismatch operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     dateTimeRfc7231: DateTimeRfc1123 (Required)
     *     dateTime: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     dateTimeRfc7231: DateTimeRfc1123 (Required)
     *     dateTime: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<SubClass> superClassMismatchWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.WireType.WireTypeOp.superClassMismatch",
            requestOptions, updatedOptions -> this.serviceClient.superClassMismatchWithResponse(body, updatedOptions));
    }

    /**
     * The subClassMismatch operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     dateTime: OffsetDateTime (Required)
     *     dateTimeRfc7231: DateTimeRfc1123 (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     dateTime: OffsetDateTime (Required)
     *     dateTimeRfc7231: DateTimeRfc1123 (Required)
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<SubClassMismatch> subClassMismatchWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.WireType.WireTypeOp.subClassMismatch",
            requestOptions, updatedOptions -> this.serviceClient.subClassMismatchWithResponse(body, updatedOptions));
    }

    /**
     * The bothClassMismatch operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     dateTimeRfc7231: DateTimeRfc1123 (Required)
     *     base64url: Base64Url (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     dateTimeRfc7231: DateTimeRfc1123 (Required)
     *     base64url: Base64Url (Required)
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<SubClassBothMismatch> bothClassMismatchWithResponse(BinaryData body,
        RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("TspTest.WireType.WireTypeOp.bothClassMismatch",
            requestOptions, updatedOptions -> this.serviceClient.bothClassMismatchWithResponse(body, updatedOptions));
    }

    /**
     * The superClassMismatch operation.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public SubClass superClassMismatch(SubClass body) {
        // Generated convenience method for superClassMismatchWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return superClassMismatchWithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * The subClassMismatch operation.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public SubClassMismatch subClassMismatch(SubClassMismatch body) {
        // Generated convenience method for subClassMismatchWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return subClassMismatchWithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * The bothClassMismatch operation.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public SubClassBothMismatch bothClassMismatch(SubClassBothMismatch body) {
        // Generated convenience method for bothClassMismatchWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return bothClassMismatchWithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }
}
