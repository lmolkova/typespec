// Code generated by Microsoft (R) TypeSpec Code Generator.

package server.versions.versioned;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.instrumentation.Instrumentation;
import server.versions.versioned.implementation.VersionedClientImpl;

/**
 * Initializes a new instance of the synchronous VersionedClient type.
 */
@ServiceClient(builder = VersionedClientBuilder.class)
public final class VersionedClient {
    @Metadata(generated = true)
    private final VersionedClientImpl serviceClient;

    private final Instrumentation instrumentation;

    /**
     * Initializes an instance of VersionedClient class.
     * 
     * @param serviceClient the service client implementation.
     * @param instrumentation the instrumentation instance.
     */
    @Metadata(generated = true)
    VersionedClient(VersionedClientImpl serviceClient, Instrumentation instrumentation) {
        this.serviceClient = serviceClient;
        this.instrumentation = instrumentation;
    }

    /**
     * The withoutApiVersion operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> withoutApiVersionWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("Server.Versions.Versioned.withoutApiVersion",
            requestOptions, updatedOptions -> this.serviceClient.withoutApiVersionWithResponse(updatedOptions));
    }

    /**
     * The withQueryApiVersion operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> withQueryApiVersionWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("Server.Versions.Versioned.withQueryApiVersion",
            requestOptions, updatedOptions -> this.serviceClient.withQueryApiVersionWithResponse(updatedOptions));
    }

    /**
     * The withPathApiVersion operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> withPathApiVersionWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("Server.Versions.Versioned.withPathApiVersion",
            requestOptions, updatedOptions -> this.serviceClient.withPathApiVersionWithResponse(updatedOptions));
    }

    /**
     * The withQueryOldApiVersion operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> withQueryOldApiVersionWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("Server.Versions.Versioned.withQueryOldApiVersion",
            requestOptions, updatedOptions -> this.serviceClient.withQueryOldApiVersionWithResponse(updatedOptions));
    }

    /**
     * The withoutApiVersion operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void withoutApiVersion() {
        // Generated convenience method for withoutApiVersionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        withoutApiVersionWithResponse(requestOptions).getValue();
    }

    /**
     * The withQueryApiVersion operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void withQueryApiVersion() {
        // Generated convenience method for withQueryApiVersionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        withQueryApiVersionWithResponse(requestOptions).getValue();
    }

    /**
     * The withPathApiVersion operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void withPathApiVersion() {
        // Generated convenience method for withPathApiVersionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        withPathApiVersionWithResponse(requestOptions).getValue();
    }

    /**
     * The withQueryOldApiVersion operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void withQueryOldApiVersion() {
        // Generated convenience method for withQueryOldApiVersionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        withQueryOldApiVersionWithResponse(requestOptions).getValue();
    }
}
