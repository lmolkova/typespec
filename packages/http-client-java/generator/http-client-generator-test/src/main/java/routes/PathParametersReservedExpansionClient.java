// Code generated by Microsoft (R) TypeSpec Code Generator.

package routes;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.instrumentation.Instrumentation;
import routes.implementation.PathParametersReservedExpansionsImpl;

/**
 * Initializes a new instance of the synchronous RoutesClient type.
 */
@ServiceClient(builder = RoutesClientBuilder.class)
public final class PathParametersReservedExpansionClient {
    @Metadata(generated = true)
    private final PathParametersReservedExpansionsImpl serviceClient;

    private final Instrumentation instrumentation;

    /**
     * Initializes an instance of PathParametersReservedExpansionClient class.
     * 
     * @param serviceClient the service client implementation.
     * @param instrumentation the instrumentation instance.
     */
    @Metadata(generated = true)
    PathParametersReservedExpansionClient(PathParametersReservedExpansionsImpl serviceClient,
        Instrumentation instrumentation) {
        this.serviceClient = serviceClient;
        this.instrumentation = instrumentation;
    }

    /**
     * The template operation.
     * 
     * @param param The param parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> templateWithResponse(String param, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("Routes.PathParameters.ReservedExpansion.template",
            requestOptions, updatedOptions -> this.serviceClient.templateWithResponse(param, updatedOptions));
    }

    /**
     * The annotation operation.
     * 
     * @param param The param parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> annotationWithResponse(String param, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("Routes.PathParameters.ReservedExpansion.annotation",
            requestOptions, updatedOptions -> this.serviceClient.annotationWithResponse(param, updatedOptions));
    }

    /**
     * The template operation.
     * 
     * @param param The param parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void template(String param) {
        // Generated convenience method for templateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        templateWithResponse(param, requestOptions).getValue();
    }

    /**
     * The annotation operation.
     * 
     * @param param The param parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void annotation(String param) {
        // Generated convenience method for annotationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        annotationWithResponse(param, requestOptions).getValue();
    }
}
