// Code generated by Microsoft (R) TypeSpec Code Generator.

package client.structure.service.implementation;

import client.structure.service.models.ClientType;
import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;

/**
 * An instance of this class provides access to all the operations defined in Quxes.
 */
public final class QuxesImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final QuxesService service;

    /**
     * The service client containing this operation class.
     */
    private final ServiceClientClientImpl client;

    /**
     * Initializes an instance of QuxesImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    QuxesImpl(ServiceClientClientImpl client) {
        this.service = RestProxy.create(QuxesService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for ServiceClientClientQuxes to be used by the proxy service to perform
     * REST calls.
     */
    @ServiceInterface(name = "ServiceClientClientQ", host = "{endpoint}/client/structure/{client}")
    public interface QuxesService {
        static QuxesService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer) {
            try {
                Class<?> clazz = Class.forName("client.structure.service.implementation.QuxesServiceImpl");
                return (QuxesService) clazz.getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class)
                    .invoke(null, pipeline, serializer);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(method = HttpMethod.POST, path = "/eight", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> eight(@HostParam("endpoint") String endpoint, @HostParam("client") ClientType client,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/eight", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void eight(@HostParam("endpoint") String endpoint, @HostParam("client") ClientType client) {
            eight(endpoint, client, null);
        }
    }

    /**
     * The eight operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> eightWithResponse(RequestOptions requestOptions) {
        return service.eight(this.client.getEndpoint(), this.client.getClient(), requestOptions);
    }
}
