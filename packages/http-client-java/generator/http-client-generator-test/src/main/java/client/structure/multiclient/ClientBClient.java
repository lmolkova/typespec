// Code generated by Microsoft (R) TypeSpec Code Generator.

package client.structure.multiclient;

import client.structure.multiclient.implementation.ClientBClientImpl;
import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.instrumentation.Instrumentation;

/**
 * Initializes a new instance of the synchronous ClientBClient type.
 */
@ServiceClient(builder = ClientBClientBuilder.class)
public final class ClientBClient {
    @Metadata(generated = true)
    private final ClientBClientImpl serviceClient;

    private final Instrumentation instrumentation;

    /**
     * Initializes an instance of ClientBClient class.
     * 
     * @param serviceClient the service client implementation.
     * @param instrumentation the instrumentation instance.
     */
    @Metadata(generated = true)
    ClientBClient(ClientBClientImpl serviceClient, Instrumentation instrumentation) {
        this.serviceClient = serviceClient;
        this.instrumentation = instrumentation;
    }

    /**
     * The renamedTwo operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> renamedTwoWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("Client.Structure.MultiClient.ClientB.renamedTwo",
            requestOptions, updatedOptions -> this.serviceClient.renamedTwoWithResponse(updatedOptions));
    }

    /**
     * The renamedFour operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> renamedFourWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("Client.Structure.MultiClient.ClientB.renamedFour",
            requestOptions, updatedOptions -> this.serviceClient.renamedFourWithResponse(updatedOptions));
    }

    /**
     * The renamedSix operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> renamedSixWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("Client.Structure.MultiClient.ClientB.renamedSix",
            requestOptions, updatedOptions -> this.serviceClient.renamedSixWithResponse(updatedOptions));
    }

    /**
     * The renamedTwo operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void renamedTwo() {
        // Generated convenience method for renamedTwoWithResponse
        RequestOptions requestOptions = new RequestOptions();
        renamedTwoWithResponse(requestOptions).getValue();
    }

    /**
     * The renamedFour operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void renamedFour() {
        // Generated convenience method for renamedFourWithResponse
        RequestOptions requestOptions = new RequestOptions();
        renamedFourWithResponse(requestOptions).getValue();
    }

    /**
     * The renamedSix operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void renamedSix() {
        // Generated convenience method for renamedSixWithResponse
        RequestOptions requestOptions = new RequestOptions();
        renamedSixWithResponse(requestOptions).getValue();
    }
}
