// Code generated by Microsoft (R) TypeSpec Code Generator.

package client.structure.twooperationgroup;

import client.structure.twooperationgroup.implementation.Group1sImpl;
import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.instrumentation.Instrumentation;

/**
 * Initializes a new instance of the synchronous TwoOperationGroupClient type.
 */
@ServiceClient(builder = TwoOperationGroupClientBuilder.class)
public final class Group1Client {
    @Metadata(generated = true)
    private final Group1sImpl serviceClient;

    private final Instrumentation instrumentation;

    /**
     * Initializes an instance of Group1Client class.
     * 
     * @param serviceClient the service client implementation.
     * @param instrumentation the instrumentation instance.
     */
    @Metadata(generated = true)
    Group1Client(Group1sImpl serviceClient, Instrumentation instrumentation) {
        this.serviceClient = serviceClient;
        this.instrumentation = instrumentation;
    }

    /**
     * The one operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> oneWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("Client.Structure.TwoOperationGroup.Group1.one",
            requestOptions, updatedOptions -> this.serviceClient.oneWithResponse(updatedOptions));
    }

    /**
     * The three operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> threeWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("Client.Structure.TwoOperationGroup.Group1.three",
            requestOptions, updatedOptions -> this.serviceClient.threeWithResponse(updatedOptions));
    }

    /**
     * The four operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> fourWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("Client.Structure.TwoOperationGroup.Group1.four",
            requestOptions, updatedOptions -> this.serviceClient.fourWithResponse(updatedOptions));
    }

    /**
     * The one operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void one() {
        // Generated convenience method for oneWithResponse
        RequestOptions requestOptions = new RequestOptions();
        oneWithResponse(requestOptions).getValue();
    }

    /**
     * The three operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void three() {
        // Generated convenience method for threeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        threeWithResponse(requestOptions).getValue();
    }

    /**
     * The four operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void four() {
        // Generated convenience method for fourWithResponse
        RequestOptions requestOptions = new RequestOptions();
        fourWithResponse(requestOptions).getValue();
    }
}
