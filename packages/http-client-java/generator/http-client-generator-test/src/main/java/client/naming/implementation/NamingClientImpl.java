// Code generated by Microsoft (R) TypeSpec Code Generator.

package client.naming.implementation;

import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.BodyParam;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.QueryParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;

/**
 * Initializes a new instance of the NamingClient type.
 */
public final class NamingClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final NamingClientService service;

    /**
     * Service host.
     */
    private final String endpoint;

    /**
     * Gets Service host.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The ClientModelsImpl object to access its operations.
     */
    private final ClientModelsImpl clientModels;

    /**
     * Gets the ClientModelsImpl object to access its operations.
     * 
     * @return the ClientModelsImpl object.
     */
    public ClientModelsImpl getClientModels() {
        return this.clientModels;
    }

    /**
     * The UnionEnumsImpl object to access its operations.
     */
    private final UnionEnumsImpl unionEnums;

    /**
     * Gets the UnionEnumsImpl object to access its operations.
     * 
     * @return the UnionEnumsImpl object.
     */
    public UnionEnumsImpl getUnionEnums() {
        return this.unionEnums;
    }

    /**
     * Initializes an instance of NamingClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Service host.
     */
    public NamingClientImpl(HttpPipeline httpPipeline, String endpoint) {
        this.httpPipeline = httpPipeline;
        this.endpoint = endpoint;
        this.clientModels = new ClientModelsImpl(this);
        this.unionEnums = new UnionEnumsImpl(this);
        this.service = RestProxy.create(NamingClientService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for NamingClient to be used by the proxy service to perform REST calls.
     */
    @ServiceInterface(name = "NamingClient", host = "{endpoint}")
    public interface NamingClientService {
        static NamingClientService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer,
            @HostParam("endpoint") String endpoint) {
            try {
                Class<?> clazz = Class.forName("client.naming.implementation.NamingClientServiceImpl");
                return (NamingClientService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class, String.class)
                    .invoke(null, pipeline, serializer, endpoint);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/client/naming/operation",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> clientName(RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/client/naming/operation",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void clientName() {
            clientName(null);
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/client/naming/parameter",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> parameter(@QueryParam("defaultName") String clientName, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/client/naming/parameter",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void parameter(@QueryParam("defaultName") String clientName) {
            parameter(clientName, null);
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/client/naming/property/client",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> client(@HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/client/naming/property/client",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void client(@HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData body) {
            client(contentType, body, null);
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/client/naming/property/language",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> language(@HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/client/naming/property/language",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void language(@HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData body) {
            language(contentType, body, null);
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/client/naming/property/compatible-with-encoded-name",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> compatibleWithEncodedName(@HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/client/naming/property/compatible-with-encoded-name",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void compatibleWithEncodedName(@HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData body) {
            compatibleWithEncodedName(contentType, body, null);
        }

        @HttpRequestInformation(method = HttpMethod.POST, path = "/client/naming/header", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> request(@HeaderParam("default-name") String clientName, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/client/naming/header", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void request(@HeaderParam("default-name") String clientName) {
            request(clientName, null);
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/client/naming/header", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> response(RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/client/naming/header", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void response() {
            response(null);
        }
    }

    /**
     * The clientName operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> clientNameWithResponse(RequestOptions requestOptions) {
        return service.clientName(requestOptions);
    }

    /**
     * The parameter operation.
     * 
     * @param clientName The clientName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> parameterWithResponse(String clientName, RequestOptions requestOptions) {
        return service.parameter(clientName, requestOptions);
    }

    /**
     * The client operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     defaultName: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> clientWithResponse(BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        return service.client(contentType, body, requestOptions);
    }

    /**
     * The language operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     defaultName: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> languageWithResponse(BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        return service.language(contentType, body, requestOptions);
    }

    /**
     * The compatibleWithEncodedName operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     wireName: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> compatibleWithEncodedNameWithResponse(BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        return service.compatibleWithEncodedName(contentType, body, requestOptions);
    }

    /**
     * The request operation.
     * 
     * @param clientName The clientName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> requestWithResponse(String clientName, RequestOptions requestOptions) {
        return service.request(clientName, requestOptions);
    }

    /**
     * The response operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> responseWithResponse(RequestOptions requestOptions) {
        return service.response(requestOptions);
    }
}
