// Code generated by Microsoft (R) TypeSpec Code Generator.

package client.structure.multiclient.implementation;

import client.structure.service.models.ClientType;
import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;

/**
 * Initializes a new instance of the ClientAClient type.
 */
public final class ClientAClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ClientAClientService service;

    /**
     * Need to be set as 'http://localhost:3000' in client.
     */
    private final String endpoint;

    /**
     * Gets Need to be set as 'http://localhost:3000' in client.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client.
     */
    private final ClientType client;

    /**
     * Gets Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client.
     * 
     * @return the client value.
     */
    public ClientType getClient() {
        return this.client;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * Initializes an instance of ClientAClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Need to be set as 'http://localhost:3000' in client.
     * @param client Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client.
     */
    public ClientAClientImpl(HttpPipeline httpPipeline, String endpoint, ClientType client) {
        this.httpPipeline = httpPipeline;
        this.endpoint = endpoint;
        this.client = client;
        this.service = RestProxy.create(ClientAClientService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for ClientAClient to be used by the proxy service to perform REST calls.
     */
    @ServiceInterface(name = "ClientAClient", host = "{endpoint}/client/structure/{client}")
    public interface ClientAClientService {
        static ClientAClientService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer,
            @HostParam("endpoint") String endpoint, @HostParam("client") ClientType client) {
            try {
                Class<?> clazz = Class.forName("client.structure.multiclient.implementation.ClientAClientServiceImpl");
                return (ClientAClientService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class, String.class,
                        ClientType.class)
                    .invoke(null, pipeline, serializer, endpoint, client);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(method = HttpMethod.POST, path = "/one", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> renamedOne(RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/one", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void renamedOne() {
            renamedOne(null);
        }

        @HttpRequestInformation(method = HttpMethod.POST, path = "/three", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> renamedThree(RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/three", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void renamedThree() {
            renamedThree(null);
        }

        @HttpRequestInformation(method = HttpMethod.POST, path = "/five", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> renamedFive(RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/five", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void renamedFive() {
            renamedFive(null);
        }
    }

    /**
     * The renamedOne operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> renamedOneWithResponse(RequestOptions requestOptions) {
        return service.renamedOne(requestOptions);
    }

    /**
     * The renamedThree operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> renamedThreeWithResponse(RequestOptions requestOptions) {
        return service.renamedThree(requestOptions);
    }

    /**
     * The renamedFive operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> renamedFiveWithResponse(RequestOptions requestOptions) {
        return service.renamedFive(requestOptions);
    }
}
