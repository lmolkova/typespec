// Code generated by Microsoft (R) TypeSpec Code Generator.

package client.structure.multiclient.implementation;

import client.structure.service.models.ClientType;
import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;

/**
 * Initializes a new instance of the ClientBClient type.
 */
public final class ClientBClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ClientBClientService service;

    /**
     * Need to be set as 'http://localhost:3000' in client.
     */
    private final String endpoint;

    /**
     * Gets Need to be set as 'http://localhost:3000' in client.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client.
     */
    private final ClientType client;

    /**
     * Gets Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client.
     * 
     * @return the client value.
     */
    public ClientType getClient() {
        return this.client;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * Initializes an instance of ClientBClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Need to be set as 'http://localhost:3000' in client.
     * @param client Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client.
     */
    public ClientBClientImpl(HttpPipeline httpPipeline, String endpoint, ClientType client) {
        this.httpPipeline = httpPipeline;
        this.endpoint = endpoint;
        this.client = client;
        this.service = RestProxy.create(ClientBClientService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for ClientBClient to be used by the proxy service to perform REST calls.
     */
    @ServiceInterface(name = "ClientBClient", host = "{endpoint}/client/structure/{client}")
    public interface ClientBClientService {
        static ClientBClientService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer,
            @HostParam("endpoint") String endpoint, @HostParam("client") ClientType client) {
            try {
                Class<?> clazz = Class.forName("client.structure.multiclient.implementation.ClientBClientServiceImpl");
                return (ClientBClientService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class, String.class,
                        ClientType.class)
                    .invoke(null, pipeline, serializer, endpoint, client);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(method = HttpMethod.POST, path = "/two", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> renamedTwo(RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/two", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void renamedTwo() {
            renamedTwo(null);
        }

        @HttpRequestInformation(method = HttpMethod.POST, path = "/four", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> renamedFour(RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/four", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void renamedFour() {
            renamedFour(null);
        }

        @HttpRequestInformation(method = HttpMethod.POST, path = "/six", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> renamedSix(RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/six", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void renamedSix() {
            renamedSix(null);
        }
    }

    /**
     * The renamedTwo operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> renamedTwoWithResponse(RequestOptions requestOptions) {
        return service.renamedTwo(requestOptions);
    }

    /**
     * The renamedFour operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> renamedFourWithResponse(RequestOptions requestOptions) {
        return service.renamedFour(requestOptions);
    }

    /**
     * The renamedSix operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> renamedSixWithResponse(RequestOptions requestOptions) {
        return service.renamedSix(requestOptions);
    }
}
