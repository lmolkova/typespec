// Code generated by Microsoft (R) TypeSpec Code Generator.

package client.structure.twooperationgroup.implementation;

import client.structure.service.models.ClientType;
import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;

/**
 * An instance of this class provides access to all the operations defined in Group1s.
 */
public final class Group1sImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final Group1sService service;

    /**
     * The service client containing this operation class.
     */
    private final TwoOperationGroupClientImpl client;

    /**
     * Initializes an instance of Group1sImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    Group1sImpl(TwoOperationGroupClientImpl client) {
        this.service = RestProxy.create(Group1sService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for TwoOperationGroupClientGroup1s to be used by the proxy service to
     * perform REST calls.
     */
    @ServiceInterface(name = "TwoOperationGroupCli", host = "{endpoint}/client/structure/{client}")
    public interface Group1sService {
        static Group1sService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer) {
            try {
                Class<?> clazz = Class.forName("client.structure.twooperationgroup.implementation.Group1sServiceImpl");
                return (Group1sService) clazz.getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class)
                    .invoke(null, pipeline, serializer);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(method = HttpMethod.POST, path = "/one", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> one(@HostParam("endpoint") String endpoint, @HostParam("client") ClientType client,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/one", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void one(@HostParam("endpoint") String endpoint, @HostParam("client") ClientType client) {
            one(endpoint, client, null);
        }

        @HttpRequestInformation(method = HttpMethod.POST, path = "/three", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> three(@HostParam("endpoint") String endpoint, @HostParam("client") ClientType client,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/three", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void three(@HostParam("endpoint") String endpoint, @HostParam("client") ClientType client) {
            three(endpoint, client, null);
        }

        @HttpRequestInformation(method = HttpMethod.POST, path = "/four", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> four(@HostParam("endpoint") String endpoint, @HostParam("client") ClientType client,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/four", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void four(@HostParam("endpoint") String endpoint, @HostParam("client") ClientType client) {
            four(endpoint, client, null);
        }
    }

    /**
     * The one operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> oneWithResponse(RequestOptions requestOptions) {
        return service.one(this.client.getEndpoint(), this.client.getClient(), requestOptions);
    }

    /**
     * The three operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> threeWithResponse(RequestOptions requestOptions) {
        return service.three(this.client.getEndpoint(), this.client.getClient(), requestOptions);
    }

    /**
     * The four operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> fourWithResponse(RequestOptions requestOptions) {
        return service.four(this.client.getEndpoint(), this.client.getClient(), requestOptions);
    }
}
