// Code generated by Microsoft (R) TypeSpec Code Generator.

package client.clientnamespace;

import client.clientnamespace.first.models.FirstClientResult;
import client.clientnamespace.implementation.ClientNamespaceFirstClientImpl;
import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.instrumentation.Instrumentation;

/**
 * Initializes a new instance of the synchronous ClientNamespaceFirstClient type.
 */
@ServiceClient(builder = ClientNamespaceFirstClientBuilder.class)
public final class ClientNamespaceFirstClient {
    @Metadata(generated = true)
    private final ClientNamespaceFirstClientImpl serviceClient;

    private final Instrumentation instrumentation;

    /**
     * Initializes an instance of ClientNamespaceFirstClient class.
     * 
     * @param serviceClient the service client implementation.
     * @param instrumentation the instrumentation instance.
     */
    @Metadata(generated = true)
    ClientNamespaceFirstClient(ClientNamespaceFirstClientImpl serviceClient, Instrumentation instrumentation) {
        this.serviceClient = serviceClient;
        this.instrumentation = instrumentation;
    }

    /**
     * The getFirst operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<FirstClientResult> getFirstWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("ClientNameSpaceClient.ClientNamespaceFirstClient.getFirst",
            requestOptions, updatedOptions -> this.serviceClient.getFirstWithResponse(updatedOptions));
    }

    /**
     * The getFirst operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public FirstClientResult getFirst() {
        // Generated convenience method for getFirstWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getFirstWithResponse(requestOptions).getValue();
    }
}
