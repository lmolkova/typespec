// Code generated by Microsoft (R) TypeSpec Code Generator.

package client.structure.service;

import client.structure.service.implementation.FoosImpl;
import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.instrumentation.Instrumentation;

/**
 * Initializes a new instance of the synchronous ServiceClientClient type.
 */
@ServiceClient(builder = ServiceClientClientBuilder.class)
public final class FooClient {
    @Metadata(generated = true)
    private final FoosImpl serviceClient;

    private final Instrumentation instrumentation;

    /**
     * Initializes an instance of FooClient class.
     * 
     * @param serviceClient the service client implementation.
     * @param instrumentation the instrumentation instance.
     */
    @Metadata(generated = true)
    FooClient(FoosImpl serviceClient, Instrumentation instrumentation) {
        this.serviceClient = serviceClient;
        this.instrumentation = instrumentation;
    }

    /**
     * The three operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> threeWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("Client.Structure.Service.Foo.three", requestOptions,
            updatedOptions -> this.serviceClient.threeWithResponse(updatedOptions));
    }

    /**
     * The four operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> fourWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("Client.Structure.Service.Foo.four", requestOptions,
            updatedOptions -> this.serviceClient.fourWithResponse(updatedOptions));
    }

    /**
     * The three operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void three() {
        // Generated convenience method for threeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        threeWithResponse(requestOptions).getValue();
    }

    /**
     * The four operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void four() {
        // Generated convenience method for fourWithResponse
        RequestOptions requestOptions = new RequestOptions();
        fourWithResponse(requestOptions).getValue();
    }
}
