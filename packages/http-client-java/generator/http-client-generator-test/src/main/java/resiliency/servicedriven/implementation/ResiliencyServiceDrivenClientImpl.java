// Code generated by Microsoft (R) TypeSpec Code Generator.

package resiliency.servicedriven.implementation;

import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.QueryParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;
import resiliency.servicedriven.ServiceDrivenServiceVersion;

/**
 * Initializes a new instance of the ResiliencyServiceDrivenClient type.
 */
public final class ResiliencyServiceDrivenClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ResiliencyServiceDrivenClientService service;

    /**
     * Need to be set as 'http://localhost:3000' in client.
     */
    private final String endpoint;

    /**
     * Gets Need to be set as 'http://localhost:3000' in client.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Pass in either 'v1' or 'v2'. This represents a version of the service deployment in history. 'v1' is for the
     * deployment when the service had only one api version. 'v2' is for the deployment when the service had
     * api-versions 'v1' and 'v2'.
     */
    private final String serviceDeploymentVersion;

    /**
     * Gets Pass in either 'v1' or 'v2'. This represents a version of the service deployment in history. 'v1' is for the
     * deployment when the service had only one api version. 'v2' is for the deployment when the service had
     * api-versions 'v1' and 'v2'.
     * 
     * @return the serviceDeploymentVersion value.
     */
    public String getServiceDeploymentVersion() {
        return this.serviceDeploymentVersion;
    }

    /**
     * Service version.
     */
    private final ServiceDrivenServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public ServiceDrivenServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * Initializes an instance of ResiliencyServiceDrivenClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Need to be set as 'http://localhost:3000' in client.
     * @param serviceDeploymentVersion Pass in either 'v1' or 'v2'. This represents a version of the service deployment
     * in history. 'v1' is for the deployment when the service had only one api version. 'v2' is for the deployment when
     * the service had api-versions 'v1' and 'v2'.
     * @param serviceVersion Service version.
     */
    public ResiliencyServiceDrivenClientImpl(HttpPipeline httpPipeline, String endpoint,
        String serviceDeploymentVersion, ServiceDrivenServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.endpoint = endpoint;
        this.serviceDeploymentVersion = serviceDeploymentVersion;
        this.serviceVersion = serviceVersion;
        this.service = RestProxy.create(ResiliencyServiceDrivenClientService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for ResiliencyServiceDrivenClient to be used by the proxy service to
     * perform REST calls.
     */
    @ServiceInterface(
        name = "ResiliencyServiceDri",
        host = "{endpoint}/resiliency/service-driven/client:v2/service:{serviceDeploymentVersion}/api-version:{apiVersion}")
    public interface ResiliencyServiceDrivenClientService {
        static ResiliencyServiceDrivenClientService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer,
            @HostParam("endpoint") String endpoint,
            @HostParam("serviceDeploymentVersion") String serviceDeploymentVersion,
            @HostParam("apiVersion") String apiVersion) {
            try {
                Class<?> clazz
                    = Class.forName("resiliency.servicedriven.implementation.ResiliencyServiceDrivenClientServiceImpl");
                return (ResiliencyServiceDrivenClientService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class, String.class, String.class,
                        String.class)
                    .invoke(null, pipeline, serializer, endpoint, serviceDeploymentVersion, apiVersion);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(method = HttpMethod.DELETE, path = "/add-operation", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> addOperation(RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.DELETE, path = "/add-operation", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void addOperation() {
            addOperation(null);
        }

        @HttpRequestInformation(
            method = HttpMethod.HEAD,
            path = "/add-optional-param/from-none",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> fromNone(RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.HEAD,
            path = "/add-optional-param/from-none",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void fromNone() {
            fromNone(null, null);
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/add-optional-param/from-one-required",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> fromOneRequired(@QueryParam("parameter") String parameter, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/add-optional-param/from-one-required",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void fromOneRequired(@QueryParam("parameter") String parameter) {
            fromOneRequired(parameter, null, null);
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/add-optional-param/from-one-optional",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> fromOneOptional(RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/add-optional-param/from-one-optional",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void fromOneOptional() {
            fromOneOptional(null, null, null);
        }
    }

    /**
     * Added operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> addOperationWithResponse(RequestOptions requestOptions) {
        return service.addOperation(requestOptions);
    }

    /**
     * Test that grew up from accepting no parameters to an optional input parameter.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>new-parameter</td><td>String</td><td>No</td><td>I'm a new input optional parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> fromNoneWithResponse(RequestOptions requestOptions) {
        return service.fromNone(requestOptions);
    }

    /**
     * Operation that grew up from accepting one required parameter to accepting a required parameter and an optional
     * parameter.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>new-parameter</td><td>String</td><td>No</td><td>I'm a new input optional parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param parameter I am a required parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> fromOneRequiredWithResponse(String parameter, RequestOptions requestOptions) {
        return service.fromOneRequired(parameter, requestOptions);
    }

    /**
     * Tests that we can grow up an operation from accepting one optional parameter to accepting two optional
     * parameters.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>parameter</td><td>String</td><td>No</td><td>I am an optional parameter</td></tr>
     * <tr><td>new-parameter</td><td>String</td><td>No</td><td>I'm a new input optional parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> fromOneOptionalWithResponse(RequestOptions requestOptions) {
        return service.fromOneOptional(requestOptions);
    }
}
