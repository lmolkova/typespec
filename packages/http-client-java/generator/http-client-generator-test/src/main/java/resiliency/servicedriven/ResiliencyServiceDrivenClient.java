// Code generated by Microsoft (R) TypeSpec Code Generator.

package resiliency.servicedriven;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.instrumentation.Instrumentation;
import io.clientcore.core.instrumentation.logging.ClientLogger;
import java.util.Arrays;
import resiliency.servicedriven.implementation.ResiliencyServiceDrivenClientImpl;

/**
 * Initializes a new instance of the synchronous ResiliencyServiceDrivenClient type.
 */
@ServiceClient(builder = ResiliencyServiceDrivenClientBuilder.class)
public final class ResiliencyServiceDrivenClient {
    @Metadata(generated = true)
    private final ResiliencyServiceDrivenClientImpl serviceClient;

    private final Instrumentation instrumentation;

    /**
     * Initializes an instance of ResiliencyServiceDrivenClient class.
     * 
     * @param serviceClient the service client implementation.
     * @param instrumentation the instrumentation instance.
     */
    @Metadata(generated = true)
    ResiliencyServiceDrivenClient(ResiliencyServiceDrivenClientImpl serviceClient, Instrumentation instrumentation) {
        this.serviceClient = serviceClient;
        this.instrumentation = instrumentation;
    }

    /**
     * Added operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> addOperationWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("Resiliency.ServiceDriven.addOperation", requestOptions,
            updatedOptions -> this.serviceClient.addOperationWithResponse(updatedOptions));
    }

    /**
     * Test that grew up from accepting no parameters to an optional input parameter.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>new-parameter</td><td>String</td><td>No</td><td>I'm a new input optional parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> fromNoneWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("Resiliency.ServiceDriven.AddOptionalParam.fromNone",
            requestOptions, updatedOptions -> this.serviceClient.fromNoneWithResponse(updatedOptions));
    }

    /**
     * Operation that grew up from accepting one required parameter to accepting a required parameter and an optional
     * parameter.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>new-parameter</td><td>String</td><td>No</td><td>I'm a new input optional parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param parameter I am a required parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> fromOneRequiredWithResponse(String parameter, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("Resiliency.ServiceDriven.AddOptionalParam.fromOneRequired",
            requestOptions,
            updatedOptions -> this.serviceClient.fromOneRequiredWithResponse(parameter, updatedOptions));
    }

    /**
     * Tests that we can grow up an operation from accepting one optional parameter to accepting two optional
     * parameters.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>parameter</td><td>String</td><td>No</td><td>I am an optional parameter</td></tr>
     * <tr><td>new-parameter</td><td>String</td><td>No</td><td>I'm a new input optional parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> fromOneOptionalWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("Resiliency.ServiceDriven.AddOptionalParam.fromOneOptional",
            requestOptions, updatedOptions -> this.serviceClient.fromOneOptionalWithResponse(updatedOptions));
    }

    /**
     * Added operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void addOperation() {
        // Generated convenience method for addOperationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        addOperationWithResponse(requestOptions).getValue();
    }

    /**
     * Test that grew up from accepting no parameters to an optional input parameter.
     * 
     * @param newParameter I'm a new input optional parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void fromNone(String newParameter) {
        // Generated convenience method for fromNoneWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (!Arrays.asList("v2").contains(serviceClient.getServiceVersion().getVersion())) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter newParameter is only available in api-version v2."));
        }
        if (newParameter != null) {
            requestOptions.addQueryParam("new-parameter", newParameter);
        }
        fromNoneWithResponse(requestOptions).getValue();
    }

    /**
     * Test that grew up from accepting no parameters to an optional input parameter.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void fromNone() {
        // Generated convenience method for fromNoneWithResponse
        RequestOptions requestOptions = new RequestOptions();
        fromNoneWithResponse(requestOptions).getValue();
    }

    /**
     * Operation that grew up from accepting one required parameter to accepting a required parameter and an optional
     * parameter.
     * 
     * @param parameter I am a required parameter.
     * @param newParameter I'm a new input optional parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void fromOneRequired(String parameter, String newParameter) {
        // Generated convenience method for fromOneRequiredWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (!Arrays.asList("v2").contains(serviceClient.getServiceVersion().getVersion())) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter newParameter is only available in api-version v2."));
        }
        if (newParameter != null) {
            requestOptions.addQueryParam("new-parameter", newParameter);
        }
        fromOneRequiredWithResponse(parameter, requestOptions).getValue();
    }

    /**
     * Operation that grew up from accepting one required parameter to accepting a required parameter and an optional
     * parameter.
     * 
     * @param parameter I am a required parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void fromOneRequired(String parameter) {
        // Generated convenience method for fromOneRequiredWithResponse
        RequestOptions requestOptions = new RequestOptions();
        fromOneRequiredWithResponse(parameter, requestOptions).getValue();
    }

    /**
     * Tests that we can grow up an operation from accepting one optional parameter to accepting two optional
     * parameters.
     * 
     * @param parameter I am an optional parameter.
     * @param newParameter I'm a new input optional parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void fromOneOptional(String parameter, String newParameter) {
        // Generated convenience method for fromOneOptionalWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (!Arrays.asList("v2").contains(serviceClient.getServiceVersion().getVersion())) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter newParameter is only available in api-version v2."));
        }
        if (parameter != null) {
            requestOptions.addQueryParam("parameter", parameter);
        }
        if (newParameter != null) {
            requestOptions.addQueryParam("new-parameter", newParameter);
        }
        fromOneOptionalWithResponse(requestOptions).getValue();
    }

    /**
     * Tests that we can grow up an operation from accepting one optional parameter to accepting two optional
     * parameters.
     * 
     * @param parameter I am an optional parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void fromOneOptional(String parameter) {
        // Generated convenience method for fromOneOptionalWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (parameter != null) {
            requestOptions.addQueryParam("parameter", parameter);
        }
        fromOneOptionalWithResponse(requestOptions).getValue();
    }

    /**
     * Tests that we can grow up an operation from accepting one optional parameter to accepting two optional
     * parameters.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void fromOneOptional() {
        // Generated convenience method for fromOneOptionalWithResponse
        RequestOptions requestOptions = new RequestOptions();
        fromOneOptionalWithResponse(requestOptions).getValue();
    }

    private static final ClientLogger LOGGER = new ClientLogger(ResiliencyServiceDrivenClient.class);
}
