// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.core.basic;

import azure.core.basic.implementation.BasicClientImpl;
import azure.core.basic.implementation.JsonMergePatchHelper;
import azure.core.basic.models.User;
import azure.core.basic.models.UserList;
import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ReturnType;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.annotations.ServiceMethod;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.PagedIterable;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.instrumentation.Instrumentation;
import io.clientcore.core.models.binarydata.BinaryData;
import java.util.List;

/**
 * Initializes a new instance of the synchronous BasicClient type.
 */
@ServiceClient(builder = BasicClientBuilder.class)
public final class BasicClient {
    @Metadata(generated = true)
    private final BasicClientImpl serviceClient;

    private final Instrumentation instrumentation;

    /**
     * Initializes an instance of BasicClient class.
     * 
     * @param serviceClient the service client implementation.
     * @param instrumentation the instrumentation instance.
     */
    @Metadata(generated = true)
    BasicClient(BasicClientImpl serviceClient, Instrumentation instrumentation) {
        this.serviceClient = serviceClient;
        this.instrumentation = instrumentation;
    }

    /**
     * Adds a user or updates a user's fields.
     * 
     * Creates or updates a User.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: int (Required)
     *     name: String (Optional, Required on create)
     *     orders (Optional): [
     *          (Optional){
     *             id: int (Required)
     *             userId: int (Optional, Required on create)
     *             detail: String (Optional, Required on create)
     *         }
     *     ]
     *     etag: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: int (Required)
     *     name: String (Optional, Required on create)
     *     orders (Optional): [
     *          (Optional){
     *             id: int (Required)
     *             userId: int (Optional, Required on create)
     *             detail: String (Optional, Required on create)
     *         }
     *     ]
     *     etag: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param id The user's id.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return details about a user.
     */
    @Metadata(generated = true)
    public Response<User> createOrUpdateWithResponse(int id, BinaryData resource, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("_Specs_.Azure.Core.Basic.createOrUpdate", requestOptions,
            updatedOptions -> this.serviceClient.createOrUpdateWithResponse(id, resource, updatedOptions));
    }

    /**
     * Adds a user or replaces a user's fields.
     * 
     * Creates or replaces a User.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: int (Required)
     *     name: String (Optional, Required on create)
     *     orders (Optional): [
     *          (Optional){
     *             id: int (Required)
     *             userId: int (Optional, Required on create)
     *             detail: String (Optional, Required on create)
     *         }
     *     ]
     *     etag: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: int (Required)
     *     name: String (Optional, Required on create)
     *     orders (Optional): [
     *          (Optional){
     *             id: int (Required)
     *             userId: int (Optional, Required on create)
     *             detail: String (Optional, Required on create)
     *         }
     *     ]
     *     etag: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param id The user's id.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return details about a user.
     */
    @Metadata(generated = true)
    public Response<User> createOrReplaceWithResponse(int id, BinaryData resource, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("_Specs_.Azure.Core.Basic.createOrReplace", requestOptions,
            updatedOptions -> this.serviceClient.createOrReplaceWithResponse(id, resource, updatedOptions));
    }

    /**
     * Gets a user.
     * 
     * Gets a User.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: int (Required)
     *     name: String (Optional, Required on create)
     *     orders (Optional): [
     *          (Optional){
     *             id: int (Required)
     *             userId: int (Optional, Required on create)
     *             detail: String (Optional, Required on create)
     *         }
     *     ]
     *     etag: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param id The user's id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a user.
     * 
     * Gets a User.
     */
    @Metadata(generated = true)
    public Response<User> getWithResponse(int id, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("_Specs_.Azure.Core.Basic.get", requestOptions,
            updatedOptions -> this.serviceClient.getWithResponse(id, updatedOptions));
    }

    /**
     * Lists all users.
     * 
     * Lists all Users.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * <tr><td>orderby</td><td>List&lt;String&gt;</td><td>No</td><td>Expressions that specify the order of returned
     * results. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * <tr><td>select</td><td>List&lt;String&gt;</td><td>No</td><td>Select the specified fields to be included in the
     * response. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expand</td><td>List&lt;String&gt;</td><td>No</td><td>Expand the indicated resources into the response.
     * Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * PagedUser
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return paged collection of User items.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<User> list(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("_Specs_.Azure.Core.Basic.list", requestOptions,
            updatedOptions -> this.serviceClient.list(updatedOptions));
    }

    /**
     * Deletes a user.
     * 
     * Deletes a User.
     * 
     * @param id The user's id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> deleteWithResponse(int id, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("_Specs_.Azure.Core.Basic.delete", requestOptions,
            updatedOptions -> this.serviceClient.deleteWithResponse(id, updatedOptions));
    }

    /**
     * Exports a user.
     * 
     * Exports a User.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: int (Required)
     *     name: String (Optional, Required on create)
     *     orders (Optional): [
     *          (Optional){
     *             id: int (Required)
     *             userId: int (Optional, Required on create)
     *             detail: String (Optional, Required on create)
     *         }
     *     ]
     *     etag: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param id The user's id.
     * @param format The format of the data.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return details about a user.
     */
    @Metadata(generated = true)
    public Response<User> exportWithResponse(int id, String format, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("_Specs_.Azure.Core.Basic.export", requestOptions,
            updatedOptions -> this.serviceClient.exportWithResponse(id, format, updatedOptions));
    }

    /**
     * Exports all users.
     * 
     * Exports all users.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     users (Required): [
     *          (Required){
     *             id: int (Required)
     *             name: String (Optional, Required on create)
     *             orders (Optional): [
     *                  (Optional){
     *                     id: int (Required)
     *                     userId: int (Optional, Required on create)
     *                     detail: String (Optional, Required on create)
     *                 }
     *             ]
     *             etag: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param format The format of the data.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<UserList> exportAllUsersWithResponse(String format, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("_Specs_.Azure.Core.Basic.exportAllUsers", requestOptions,
            updatedOptions -> this.serviceClient.exportAllUsersWithResponse(format, updatedOptions));
    }

    /**
     * Adds a user or updates a user's fields.
     * 
     * Creates or updates a User.
     * 
     * @param id The user's id.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details about a user.
     */
    @Metadata(generated = true)
    public User createOrUpdate(int id, User resource) {
        // Generated convenience method for createOrUpdateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        JsonMergePatchHelper.getUserAccessor().prepareModelForJsonMergePatch(resource, true);
        BinaryData resourceInBinaryData = BinaryData.fromObject(resource);
        // BinaryData.fromObject() will not fire serialization, use getLength() to fire serialization.
        resourceInBinaryData.getLength();
        JsonMergePatchHelper.getUserAccessor().prepareModelForJsonMergePatch(resource, false);
        return createOrUpdateWithResponse(id, resourceInBinaryData, requestOptions).getValue();
    }

    /**
     * Adds a user or replaces a user's fields.
     * 
     * Creates or replaces a User.
     * 
     * @param id The user's id.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details about a user.
     */
    @Metadata(generated = true)
    public User createOrReplace(int id, User resource) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceWithResponse(id, BinaryData.fromObject(resource), requestOptions).getValue();
    }

    /**
     * Gets a user.
     * 
     * Gets a User.
     * 
     * @param id The user's id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a user.
     * 
     * Gets a User.
     */
    @Metadata(generated = true)
    public User get(int id) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(id, requestOptions).getValue();
    }

    /**
     * Lists all users.
     * 
     * Lists all Users.
     * 
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxPageSize The maximum number of result items per page.
     * @param orderBy Expressions that specify the order of returned results.
     * @param filter Filter the result list using the given expression.
     * @param select Select the specified fields to be included in the response.
     * @param expand Expand the indicated resources into the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of User items.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<User> list(Integer top, Integer skip, Integer maxPageSize, List<String> orderBy, String filter,
        List<String> select, List<String> expand) {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top));
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip));
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxpagesize", String.valueOf(maxPageSize));
        }
        if (orderBy != null) {
            for (String paramItemValue : orderBy) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("orderby", paramItemValue);
                }
            }
        }
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter);
        }
        if (select != null) {
            for (String paramItemValue : select) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("select", paramItemValue);
                }
            }
        }
        if (expand != null) {
            for (String paramItemValue : expand) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("expand", paramItemValue);
                }
            }
        }
        return serviceClient.list(requestOptions);
    }

    /**
     * Lists all users.
     * 
     * Lists all Users.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of User items.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<User> list() {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.list(requestOptions);
    }

    /**
     * Deletes a user.
     * 
     * Deletes a User.
     * 
     * @param id The user's id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void delete(int id) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteWithResponse(id, requestOptions).getValue();
    }

    /**
     * Exports a user.
     * 
     * Exports a User.
     * 
     * @param id The user's id.
     * @param format The format of the data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details about a user.
     */
    @Metadata(generated = true)
    public User export(int id, String format) {
        // Generated convenience method for exportWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return exportWithResponse(id, format, requestOptions).getValue();
    }

    /**
     * Exports all users.
     * 
     * Exports all users.
     * 
     * @param format The format of the data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public UserList exportAllUsers(String format) {
        // Generated convenience method for exportAllUsersWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return exportAllUsersWithResponse(format, requestOptions).getValue();
    }
}
