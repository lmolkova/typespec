// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.core.page.implementation;

import azure.core.foundations.models.ErrorResponse;
import azure.core.implementation.models.PagedUser;
import azure.core.page.PageServiceVersion;
import azure.core.page.implementation.models.UserListResults;
import azure.core.page.models.User;
import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.BodyParam;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.PathParam;
import io.clientcore.core.http.annotations.QueryParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.PagedIterable;
import io.clientcore.core.http.models.PagedResponse;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.ObjectSerializer;
import io.clientcore.core.utils.Context;
import java.lang.reflect.InvocationTargetException;

/**
 * Initializes a new instance of the PageClient type.
 */
public final class PageClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final PageClientService service;

    /**
     * Service host.
     */
    private final String endpoint;

    /**
     * Gets Service host.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Service version.
     */
    private final PageServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public PageServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The TwoModelsAsPageItemsImpl object to access its operations.
     */
    private final TwoModelsAsPageItemsImpl twoModelsAsPageItems;

    /**
     * Gets the TwoModelsAsPageItemsImpl object to access its operations.
     * 
     * @return the TwoModelsAsPageItemsImpl object.
     */
    public TwoModelsAsPageItemsImpl getTwoModelsAsPageItems() {
        return this.twoModelsAsPageItems;
    }

    /**
     * Initializes an instance of PageClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Service host.
     * @param serviceVersion Service version.
     */
    public PageClientImpl(HttpPipeline httpPipeline, String endpoint, PageServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.twoModelsAsPageItems = new TwoModelsAsPageItemsImpl(this);
        this.service = RestProxy.create(PageClientService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for PageClient to be used by the proxy service to perform REST calls.
     */
    @ServiceInterface(name = "PageClient", host = "{endpoint}")
    public interface PageClientService {
        static PageClientService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept) {
            try {
                Class<?> clazz = Class.forName("azure.core.page.implementation.PageClientServiceImpl");
                return (PageClientService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class, String.class, String.class)
                    .invoke(null, pipeline, serializer, endpoint, accept);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/azure/core/page/page", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<PagedUser> listWithPage(@QueryParam("api-version") String apiVersion, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/azure/core/page/page", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default PagedUser listWithPage(@QueryParam("api-version") String apiVersion) {
            return listWithPage(apiVersion, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/azure/core/page/parameters",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<PagedUser> listWithParameters(@QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") BinaryData bodyInput, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/azure/core/page/parameters",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default PagedUser listWithParameters(@QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") BinaryData bodyInput) {
            return listWithParameters(apiVersion, null, bodyInput, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/azure/core/page/custom-page",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<UserListResults> listWithCustomPageModel(@QueryParam("api-version") String apiVersion,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/azure/core/page/custom-page",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default UserListResults listWithCustomPageModel(@QueryParam("api-version") String apiVersion) {
            return listWithCustomPageModel(apiVersion, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<PagedUser> listWithPageNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default PagedUser listWithPageNext(@PathParam(value = "nextLink", encoded = true) String nextLink) {
            return listWithPageNext(nextLink, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<PagedUser> listWithParametersNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default PagedUser listWithParametersNext(@PathParam(value = "nextLink", encoded = true) String nextLink) {
            return listWithParametersNext(nextLink, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<UserListResults> listWithCustomPageModelNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default UserListResults
            listWithCustomPageModelNext(@PathParam(value = "nextLink", encoded = true) String nextLink) {
            return listWithCustomPageModelNext(nextLink, null).getValue();
        }
    }

    /**
     * List with Azure.Core.Page&lt;&gt;.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * PagedUser
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return paged collection of User items.
     */
    private PagedResponse<User> listWithPageSinglePage(RequestOptions requestOptions) {
        Response<PagedUser> res = service.listWithPage(this.getServiceVersion().getVersion(), requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getValue(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * List with Azure.Core.Page&lt;&gt;.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * PagedUser
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return paged collection of User items.
     */
    public PagedIterable<User> listWithPage(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(requestOptions != null && requestOptions.getContext() != null
            ? requestOptions.getContext()
            : Context.none());
        return new PagedIterable<>((pagingOptions) -> listWithPageSinglePage(requestOptions),
            (pagingOptions, nextLink) -> listWithPageNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * List with extensible enum parameter Azure.Core.Page&lt;&gt;.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>another</td><td>String</td><td>No</td><td>Another query parameter. Allowed values: "First",
     * "Second".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     inputName: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * PagedUser
     * }
     * </pre>
     * 
     * @param bodyInput The body of the input.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return paged collection of User items.
     */
    private PagedResponse<User> listWithParametersSinglePage(BinaryData bodyInput, RequestOptions requestOptions) {
        Response<PagedUser> res
            = service.listWithParameters(this.getServiceVersion().getVersion(), bodyInput, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getValue(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * List with extensible enum parameter Azure.Core.Page&lt;&gt;.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>another</td><td>String</td><td>No</td><td>Another query parameter. Allowed values: "First",
     * "Second".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     inputName: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * PagedUser
     * }
     * </pre>
     * 
     * @param bodyInput The body of the input.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return paged collection of User items.
     */
    public PagedIterable<User> listWithParameters(BinaryData bodyInput, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(requestOptions != null && requestOptions.getContext() != null
            ? requestOptions.getContext()
            : Context.none());
        return new PagedIterable<>((pagingOptions) -> listWithParametersSinglePage(bodyInput, requestOptions),
            (pagingOptions, nextLink) -> listWithParametersNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * List with custom page model.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     items (Required): [
     *          (Required){
     *             id: int (Required)
     *             name: String (Required)
     *             orders (Optional): [
     *                  (Optional){
     *                     id: int (Required)
     *                     userId: int (Required)
     *                     detail: String (Required)
     *                 }
     *             ]
     *             etag: String (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    private PagedResponse<User> listWithCustomPageModelSinglePage(RequestOptions requestOptions) {
        Response<UserListResults> res
            = service.listWithCustomPageModel(this.getServiceVersion().getVersion(), requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * List with custom page model.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     items (Required): [
     *          (Required){
     *             id: int (Required)
     *             name: String (Required)
     *             orders (Optional): [
     *                  (Optional){
     *                     id: int (Required)
     *                     userId: int (Required)
     *                     detail: String (Required)
     *                 }
     *             ]
     *             etag: String (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public PagedIterable<User> listWithCustomPageModel(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(requestOptions != null && requestOptions.getContext() != null
            ? requestOptions.getContext()
            : Context.none());
        return new PagedIterable<>((pagingOptions) -> listWithCustomPageModelSinglePage(requestOptions),
            (pagingOptions, nextLink) -> listWithCustomPageModelNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * PagedUser
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return paged collection of User items.
     */
    private PagedResponse<User> listWithPageNextSinglePage(String nextLink, RequestOptions requestOptions) {
        Response<PagedUser> res = service.listWithPageNext(nextLink, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getValue(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * PagedUser
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return paged collection of User items.
     */
    private PagedResponse<User> listWithParametersNextSinglePage(String nextLink, RequestOptions requestOptions) {
        Response<PagedUser> res = service.listWithParametersNext(nextLink, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getValue(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     items (Required): [
     *          (Required){
     *             id: int (Required)
     *             name: String (Required)
     *             orders (Optional): [
     *                  (Optional){
     *                     id: int (Required)
     *                     userId: int (Required)
     *                     detail: String (Required)
     *                 }
     *             ]
     *             etag: String (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    private PagedResponse<User> listWithCustomPageModelNextSinglePage(String nextLink, RequestOptions requestOptions) {
        Response<UserListResults> res = service.listWithCustomPageModelNext(nextLink, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }
}
