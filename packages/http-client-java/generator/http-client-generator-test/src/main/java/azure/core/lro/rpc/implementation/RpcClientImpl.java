// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.core.lro.rpc.implementation;

import azure.core.foundations.models.ErrorResponse;
import azure.core.lro.rpc.RpcServiceVersion;
import azure.core.models.ResourceOperationStatusGenerationResponseGenerationResultError;
import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.QueryParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;

/**
 * Initializes a new instance of the RpcClient type.
 */
public final class RpcClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final RpcClientService service;

    /**
     * Service host.
     */
    private final String endpoint;

    /**
     * Gets Service host.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Service version.
     */
    private final RpcServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public RpcServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * Initializes an instance of RpcClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Service host.
     * @param serviceVersion Service version.
     */
    public RpcClientImpl(HttpPipeline httpPipeline, String endpoint, RpcServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service = RestProxy.create(RpcClientService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for RpcClient to be used by the proxy service to perform REST calls.
     */
    @ServiceInterface(name = "RpcClient", host = "{endpoint}")
    public interface RpcClientService {
        static RpcClientService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer,
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, BinaryData body) {
            try {
                Class<?> clazz = Class.forName("azure.core.lro.rpc.implementation.RpcClientServiceImpl");
                return (RpcClientService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class, String.class, String.class,
                        String.class, String.class, BinaryData.class)
                    .invoke(null, pipeline, serializer, endpoint, apiVersion, contentType, accept, body);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/azure/core/lro/rpc/generations:submit",
            expectedStatusCodes = { 202 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<ResourceOperationStatusGenerationResponseGenerationResultError>
            longRunningRpc(RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/azure/core/lro/rpc/generations:submit",
            expectedStatusCodes = { 202 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default ResourceOperationStatusGenerationResponseGenerationResultError longRunningRpc() {
            return longRunningRpc(null).getValue();
        }
    }
}
