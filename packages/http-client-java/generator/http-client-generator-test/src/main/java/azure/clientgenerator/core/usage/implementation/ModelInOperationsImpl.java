// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.clientgenerator.core.usage.implementation;

import azure.clientgenerator.core.usage.models.OutputModel;
import azure.clientgenerator.core.usage.models.RoundTripModel;
import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.BodyParam;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;

/**
 * An instance of this class provides access to all the operations defined in ModelInOperations.
 */
public final class ModelInOperationsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ModelInOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final UsageClientImpl client;

    /**
     * Initializes an instance of ModelInOperationsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ModelInOperationsImpl(UsageClientImpl client) {
        this.service = RestProxy.create(ModelInOperationsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for UsageClientModelInOperations to be used by the proxy service to
     * perform REST calls.
     */
    @ServiceInterface(name = "UsageClientModelInOp", host = "{endpoint}")
    public interface ModelInOperationsService {
        static ModelInOperationsService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer) {
            try {
                Class<?> clazz
                    = Class.forName("azure.clientgenerator.core.usage.implementation.ModelInOperationsServiceImpl");
                return (ModelInOperationsService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class)
                    .invoke(null, pipeline, serializer);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/azure/client-generator-core/usage/inputToInputOutput",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> inputToInputOutput(@HostParam("endpoint") String endpoint,
            @HeaderParam("Content-Type") String contentType, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/azure/client-generator-core/usage/inputToInputOutput",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void inputToInputOutput(@HostParam("endpoint") String endpoint,
            @HeaderParam("Content-Type") String contentType, @BodyParam("application/json") BinaryData body) {
            inputToInputOutput(endpoint, contentType, body, null);
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/azure/client-generator-core/usage/outputToInputOutput",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<OutputModel> outputToInputOutput(@HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/azure/client-generator-core/usage/outputToInputOutput",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default OutputModel outputToInputOutput(@HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept) {
            return outputToInputOutput(endpoint, accept, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.PUT,
            path = "/azure/client-generator-core/usage/modelInReadOnlyProperty",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<RoundTripModel> modelInReadOnlyProperty(@HostParam("endpoint") String endpoint,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.PUT,
            path = "/azure/client-generator-core/usage/modelInReadOnlyProperty",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default RoundTripModel modelInReadOnlyProperty(@HostParam("endpoint") String endpoint,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body) {
            return modelInReadOnlyProperty(endpoint, contentType, accept, body, null).getValue();
        }
    }

    /**
     * Expected body parameter:
     * ```json
     * {
     * "name": "Madge"
     * }
     * ```.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> inputToInputOutputWithResponse(BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        return service.inputToInputOutput(this.client.getEndpoint(), contentType, body, requestOptions);
    }

    /**
     * Expected response body:
     * ```json
     * {
     * "name": "Madge"
     * }
     * ```.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return usage override to roundtrip.
     */
    public Response<OutputModel> outputToInputOutputWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.outputToInputOutput(this.client.getEndpoint(), accept, requestOptions);
    }

    /**
     * "ResultModel" should be usage=output, as it is read-only and does not exist in request body.
     * 
     * Expected body parameter:
     * ```json
     * {
     * }
     * ```
     * 
     * Expected response body:
     * ```json
     * {
     * "result": {
     * "name": "Madge"
     * }
     * }
     * ```.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     result (Required): {
     *         name: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     result (Required): {
     *         name: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<RoundTripModel> modelInReadOnlyPropertyWithResponse(BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.modelInReadOnlyProperty(this.client.getEndpoint(), contentType, accept, body, requestOptions);
    }
}
