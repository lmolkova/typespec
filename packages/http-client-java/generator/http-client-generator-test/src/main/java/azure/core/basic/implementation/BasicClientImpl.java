// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.core.basic.implementation;

import azure.core.basic.BasicServiceVersion;
import azure.core.basic.models.User;
import azure.core.basic.models.UserList;
import azure.core.foundations.implementation.models.PagedUser;
import azure.core.foundations.models.ErrorResponse;
import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.BodyParam;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.PathParam;
import io.clientcore.core.http.annotations.QueryParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.PagedIterable;
import io.clientcore.core.http.models.PagedResponse;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.ObjectSerializer;
import io.clientcore.core.utils.Context;
import java.lang.reflect.InvocationTargetException;

/**
 * Initializes a new instance of the BasicClient type.
 */
public final class BasicClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final BasicClientService service;

    /**
     * Service host.
     */
    private final String endpoint;

    /**
     * Gets Service host.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Service version.
     */
    private final BasicServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public BasicServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * Initializes an instance of BasicClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Service host.
     * @param serviceVersion Service version.
     */
    public BasicClientImpl(HttpPipeline httpPipeline, String endpoint, BasicServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service = RestProxy.create(BasicClientService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for BasicClient to be used by the proxy service to perform REST calls.
     */
    @ServiceInterface(name = "BasicClient", host = "{endpoint}")
    public interface BasicClientService {
        static BasicClientService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept) {
            try {
                Class<?> clazz = Class.forName("azure.core.basic.implementation.BasicClientServiceImpl");
                return (BasicClientService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class, String.class, String.class)
                    .invoke(null, pipeline, serializer, endpoint, accept);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(
            method = HttpMethod.PATCH,
            path = "/azure/core/basic/users/{id}",
            expectedStatusCodes = { 200, 201 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<User> createOrUpdate(@QueryParam("api-version") String apiVersion, @PathParam("id") int id,
            @HeaderParam("Content-Type") String contentType,
            @BodyParam("application/merge-patch+json") BinaryData resource, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.PATCH,
            path = "/azure/core/basic/users/{id}",
            expectedStatusCodes = { 200, 201 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default User createOrUpdate(@QueryParam("api-version") String apiVersion, @PathParam("id") int id,
            @HeaderParam("Content-Type") String contentType,
            @BodyParam("application/merge-patch+json") BinaryData resource) {
            return createOrUpdate(apiVersion, id, contentType, resource, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.PUT,
            path = "/azure/core/basic/users/{id}",
            expectedStatusCodes = { 200, 201 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<User> createOrReplace(@QueryParam("api-version") String apiVersion, @PathParam("id") int id,
            @HeaderParam("Content-Type") String contentType, @BodyParam("application/json") BinaryData resource,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.PUT,
            path = "/azure/core/basic/users/{id}",
            expectedStatusCodes = { 200, 201 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default User createOrReplace(@QueryParam("api-version") String apiVersion, @PathParam("id") int id,
            @HeaderParam("Content-Type") String contentType, @BodyParam("application/json") BinaryData resource) {
            return createOrReplace(apiVersion, id, contentType, resource, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/azure/core/basic/users/{id}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<User> get(@QueryParam("api-version") String apiVersion, @PathParam("id") int id,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/azure/core/basic/users/{id}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default User get(@QueryParam("api-version") String apiVersion, @PathParam("id") int id) {
            return get(apiVersion, id, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/azure/core/basic/users",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<PagedUser> list(@QueryParam("api-version") String apiVersion, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/azure/core/basic/users",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default PagedUser list(@QueryParam("api-version") String apiVersion) {
            return list(apiVersion, null, null, null, null, null, null, null, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.DELETE,
            path = "/azure/core/basic/users/{id}",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<Void> delete(@QueryParam("api-version") String apiVersion, @PathParam("id") int id,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.DELETE,
            path = "/azure/core/basic/users/{id}",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default void delete(@QueryParam("api-version") String apiVersion, @PathParam("id") int id) {
            delete(apiVersion, id, null);
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/azure/core/basic/users/{id}:export",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<User> export(@QueryParam("api-version") String apiVersion, @PathParam("id") int id,
            @QueryParam("format") String format, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/azure/core/basic/users/{id}:export",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default User export(@QueryParam("api-version") String apiVersion, @PathParam("id") int id,
            @QueryParam("format") String format) {
            return export(apiVersion, id, format, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/azure/core/basic/users:exportallusers",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<UserList> exportAllUsers(@QueryParam("api-version") String apiVersion,
            @QueryParam("format") String format, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/azure/core/basic/users:exportallusers",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default UserList exportAllUsers(@QueryParam("api-version") String apiVersion,
            @QueryParam("format") String format) {
            return exportAllUsers(apiVersion, format, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<PagedUser> listNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        default PagedUser listNext(@PathParam(value = "nextLink", encoded = true) String nextLink) {
            return listNext(nextLink, null).getValue();
        }
    }

    /**
     * Adds a user or updates a user's fields.
     * 
     * Creates or updates a User.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: int (Required)
     *     name: String (Optional, Required on create)
     *     orders (Optional): [
     *          (Optional){
     *             id: int (Required)
     *             userId: int (Optional, Required on create)
     *             detail: String (Optional, Required on create)
     *         }
     *     ]
     *     etag: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: int (Required)
     *     name: String (Optional, Required on create)
     *     orders (Optional): [
     *          (Optional){
     *             id: int (Required)
     *             userId: int (Optional, Required on create)
     *             detail: String (Optional, Required on create)
     *         }
     *     ]
     *     etag: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param id The user's id.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return details about a user.
     */
    public Response<User> createOrUpdateWithResponse(int id, BinaryData resource, RequestOptions requestOptions) {
        final String contentType = "application/merge-patch+json";
        return service.createOrUpdate(this.getServiceVersion().getVersion(), id, contentType, resource, requestOptions);
    }

    /**
     * Adds a user or replaces a user's fields.
     * 
     * Creates or replaces a User.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: int (Required)
     *     name: String (Optional, Required on create)
     *     orders (Optional): [
     *          (Optional){
     *             id: int (Required)
     *             userId: int (Optional, Required on create)
     *             detail: String (Optional, Required on create)
     *         }
     *     ]
     *     etag: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: int (Required)
     *     name: String (Optional, Required on create)
     *     orders (Optional): [
     *          (Optional){
     *             id: int (Required)
     *             userId: int (Optional, Required on create)
     *             detail: String (Optional, Required on create)
     *         }
     *     ]
     *     etag: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param id The user's id.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return details about a user.
     */
    public Response<User> createOrReplaceWithResponse(int id, BinaryData resource, RequestOptions requestOptions) {
        final String contentType = "application/json";
        return service.createOrReplace(this.getServiceVersion().getVersion(), id, contentType, resource,
            requestOptions);
    }

    /**
     * Gets a user.
     * 
     * Gets a User.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: int (Required)
     *     name: String (Optional, Required on create)
     *     orders (Optional): [
     *          (Optional){
     *             id: int (Required)
     *             userId: int (Optional, Required on create)
     *             detail: String (Optional, Required on create)
     *         }
     *     ]
     *     etag: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param id The user's id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a user.
     * 
     * Gets a User.
     */
    public Response<User> getWithResponse(int id, RequestOptions requestOptions) {
        return service.get(this.getServiceVersion().getVersion(), id, requestOptions);
    }

    /**
     * Lists all users.
     * 
     * Lists all Users.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * <tr><td>orderby</td><td>List&lt;String&gt;</td><td>No</td><td>Expressions that specify the order of returned
     * results. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * <tr><td>select</td><td>List&lt;String&gt;</td><td>No</td><td>Select the specified fields to be included in the
     * response. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expand</td><td>List&lt;String&gt;</td><td>No</td><td>Expand the indicated resources into the response.
     * Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * PagedUser
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return paged collection of User items.
     */
    private PagedResponse<User> listSinglePage(RequestOptions requestOptions) {
        Response<PagedUser> res = service.list(this.getServiceVersion().getVersion(), requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getValue(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Lists all users.
     * 
     * Lists all Users.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * <tr><td>orderby</td><td>List&lt;String&gt;</td><td>No</td><td>Expressions that specify the order of returned
     * results. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * <tr><td>select</td><td>List&lt;String&gt;</td><td>No</td><td>Select the specified fields to be included in the
     * response. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>expand</td><td>List&lt;String&gt;</td><td>No</td><td>Expand the indicated resources into the response.
     * Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * PagedUser
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return paged collection of User items.
     */
    public PagedIterable<User> list(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(requestOptions != null && requestOptions.getContext() != null
            ? requestOptions.getContext()
            : Context.none());
        return new PagedIterable<>((pagingOptions) -> listSinglePage(requestOptions),
            (pagingOptions, nextLink) -> listNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Deletes a user.
     * 
     * Deletes a User.
     * 
     * @param id The user's id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> deleteWithResponse(int id, RequestOptions requestOptions) {
        return service.delete(this.getServiceVersion().getVersion(), id, requestOptions);
    }

    /**
     * Exports a user.
     * 
     * Exports a User.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: int (Required)
     *     name: String (Optional, Required on create)
     *     orders (Optional): [
     *          (Optional){
     *             id: int (Required)
     *             userId: int (Optional, Required on create)
     *             detail: String (Optional, Required on create)
     *         }
     *     ]
     *     etag: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param id The user's id.
     * @param format The format of the data.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return details about a user.
     */
    public Response<User> exportWithResponse(int id, String format, RequestOptions requestOptions) {
        return service.export(this.getServiceVersion().getVersion(), id, format, requestOptions);
    }

    /**
     * Exports all users.
     * 
     * Exports all users.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     users (Required): [
     *          (Required){
     *             id: int (Required)
     *             name: String (Optional, Required on create)
     *             orders (Optional): [
     *                  (Optional){
     *                     id: int (Required)
     *                     userId: int (Optional, Required on create)
     *                     detail: String (Optional, Required on create)
     *                 }
     *             ]
     *             etag: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param format The format of the data.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<UserList> exportAllUsersWithResponse(String format, RequestOptions requestOptions) {
        return service.exportAllUsers(this.getServiceVersion().getVersion(), format, requestOptions);
    }

    /**
     * Lists all users.
     * 
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * PagedUser
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return paged collection of User items.
     */
    private PagedResponse<User> listNextSinglePage(String nextLink, RequestOptions requestOptions) {
        Response<PagedUser> res = service.listNext(nextLink, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getValue(), null, res.getValue().getNextLink(), null, null, null);
    }
}
