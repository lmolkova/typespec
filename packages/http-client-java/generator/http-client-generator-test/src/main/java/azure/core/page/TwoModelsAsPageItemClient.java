// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.core.page;

import azure.core.page.implementation.TwoModelsAsPageItemsImpl;
import azure.core.page.models.FirstItem;
import azure.core.page.models.SecondItem;
import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ReturnType;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.annotations.ServiceMethod;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.PagedIterable;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.instrumentation.Instrumentation;

/**
 * Initializes a new instance of the synchronous PageClient type.
 */
@ServiceClient(builder = PageClientBuilder.class)
public final class TwoModelsAsPageItemClient {
    @Metadata(generated = true)
    private final TwoModelsAsPageItemsImpl serviceClient;

    private final Instrumentation instrumentation;

    /**
     * Initializes an instance of TwoModelsAsPageItemClient class.
     * 
     * @param serviceClient the service client implementation.
     * @param instrumentation the instrumentation instance.
     */
    @Metadata(generated = true)
    TwoModelsAsPageItemClient(TwoModelsAsPageItemsImpl serviceClient, Instrumentation instrumentation) {
        this.serviceClient = serviceClient;
        this.instrumentation = instrumentation;
    }

    /**
     * Two operations with two different page item types should be successfully generated. Should generate model for
     * FirstItem.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * PagedFirstItem
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return paged collection of FirstItem items.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<FirstItem> listFirstItem(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("_Specs_.Azure.Core.Page.TwoModelsAsPageItem.listFirstItem",
            requestOptions, updatedOptions -> this.serviceClient.listFirstItem(updatedOptions));
    }

    /**
     * Two operations with two different page item types should be successfully generated. Should generate model for
     * SecondItem.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * PagedSecondItem
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return paged collection of SecondItem items.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SecondItem> listSecondItem(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("_Specs_.Azure.Core.Page.TwoModelsAsPageItem.listSecondItem",
            requestOptions, updatedOptions -> this.serviceClient.listSecondItem(updatedOptions));
    }

    /**
     * Two operations with two different page item types should be successfully generated. Should generate model for
     * FirstItem.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of FirstItem items.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<FirstItem> listFirstItem() {
        // Generated convenience method for listFirstItem
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listFirstItem(requestOptions);
    }

    /**
     * Two operations with two different page item types should be successfully generated. Should generate model for
     * SecondItem.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of SecondItem items.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SecondItem> listSecondItem() {
        // Generated convenience method for listSecondItem
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listSecondItem(requestOptions);
    }
}
