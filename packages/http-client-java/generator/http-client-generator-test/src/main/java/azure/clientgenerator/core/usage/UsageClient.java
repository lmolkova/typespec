// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.clientgenerator.core.usage;

import azure.clientgenerator.core.usage.implementation.ModelInOperationsImpl;
import azure.clientgenerator.core.usage.models.InputModel;
import azure.clientgenerator.core.usage.models.OutputModel;
import azure.clientgenerator.core.usage.models.RoundTripModel;
import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.instrumentation.Instrumentation;
import io.clientcore.core.models.binarydata.BinaryData;

/**
 * Initializes a new instance of the synchronous UsageClient type.
 */
@ServiceClient(builder = UsageClientBuilder.class)
public final class UsageClient {
    @Metadata(generated = true)
    private final ModelInOperationsImpl serviceClient;

    private final Instrumentation instrumentation;

    /**
     * Initializes an instance of UsageClient class.
     * 
     * @param serviceClient the service client implementation.
     * @param instrumentation the instrumentation instance.
     */
    @Metadata(generated = true)
    UsageClient(ModelInOperationsImpl serviceClient, Instrumentation instrumentation) {
        this.serviceClient = serviceClient;
        this.instrumentation = instrumentation;
    }

    /**
     * Expected body parameter:
     * ```json
     * {
     * "name": "Madge"
     * }
     * ```.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> inputToInputOutputWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse(
            "_Specs_.Azure.ClientGenerator.Core.Usage.ModelInOperation.inputToInputOutput", requestOptions,
            updatedOptions -> this.serviceClient.inputToInputOutputWithResponse(body, updatedOptions));
    }

    /**
     * Expected response body:
     * ```json
     * {
     * "name": "Madge"
     * }
     * ```.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return usage override to roundtrip.
     */
    @Metadata(generated = true)
    public Response<OutputModel> outputToInputOutputWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse(
            "_Specs_.Azure.ClientGenerator.Core.Usage.ModelInOperation.outputToInputOutput", requestOptions,
            updatedOptions -> this.serviceClient.outputToInputOutputWithResponse(updatedOptions));
    }

    /**
     * "ResultModel" should be usage=output, as it is read-only and does not exist in request body.
     * 
     * Expected body parameter:
     * ```json
     * {
     * }
     * ```
     * 
     * Expected response body:
     * ```json
     * {
     * "result": {
     * "name": "Madge"
     * }
     * }
     * ```.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     result (Required): {
     *         name: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     result (Required): {
     *         name: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<RoundTripModel> modelInReadOnlyPropertyWithResponse(BinaryData body,
        RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse(
            "_Specs_.Azure.ClientGenerator.Core.Usage.ModelInOperation.modelInReadOnlyProperty", requestOptions,
            updatedOptions -> this.serviceClient.modelInReadOnlyPropertyWithResponse(body, updatedOptions));
    }

    /**
     * Expected body parameter:
     * ```json
     * {
     * "name": "Madge"
     * }
     * ```.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void inputToInputOutput(InputModel body) {
        // Generated convenience method for inputToInputOutputWithResponse
        RequestOptions requestOptions = new RequestOptions();
        inputToInputOutputWithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Expected response body:
     * ```json
     * {
     * "name": "Madge"
     * }
     * ```.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return usage override to roundtrip.
     */
    @Metadata(generated = true)
    public OutputModel outputToInputOutput() {
        // Generated convenience method for outputToInputOutputWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return outputToInputOutputWithResponse(requestOptions).getValue();
    }

    /**
     * "ResultModel" should be usage=output, as it is read-only and does not exist in request body.
     * 
     * Expected body parameter:
     * ```json
     * {
     * }
     * ```
     * 
     * Expected response body:
     * ```json
     * {
     * "result": {
     * "name": "Madge"
     * }
     * }
     * ```.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public RoundTripModel modelInReadOnlyProperty(RoundTripModel body) {
        // Generated convenience method for modelInReadOnlyPropertyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return modelInReadOnlyPropertyWithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }
}
