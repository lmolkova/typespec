// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.clientgenerator.core.apiversion.path.implementation;

import azure.clientgenerator.core.apiversion.path.PathServiceVersion;
import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.PathParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;

/**
 * Initializes a new instance of the PathClient type.
 */
public final class PathClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final PathClientService service;

    /**
     * Service host.
     */
    private final String endpoint;

    /**
     * Gets Service host.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Service version.
     */
    private final PathServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public PathServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * Initializes an instance of PathClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Service host.
     * @param serviceVersion Service version.
     */
    public PathClientImpl(HttpPipeline httpPipeline, String endpoint, PathServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service = RestProxy.create(PathClientService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for PathClient to be used by the proxy service to perform REST calls.
     */
    @ServiceInterface(name = "PathClient", host = "{endpoint}")
    public interface PathClientService {
        static PathClientService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer,
            @HostParam("endpoint") String endpoint, @PathParam("version") String version) {
            try {
                Class<?> clazz
                    = Class.forName("azure.clientgenerator.core.apiversion.path.implementation.PathClientServiceImpl");
                return (PathClientService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class, String.class, String.class)
                    .invoke(null, pipeline, serializer, endpoint, version);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/azure/client-generator-core/api-version/path/{version}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Void> pathApiVersion(RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/azure/client-generator-core/api-version/path/{version}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default void pathApiVersion() {
            pathApiVersion(null);
        }
    }

    /**
     * Path api version parameter.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> pathApiVersionWithResponse(RequestOptions requestOptions) {
        return service.pathApiVersion(requestOptions);
    }
}
