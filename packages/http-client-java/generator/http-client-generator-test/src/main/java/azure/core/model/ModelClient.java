// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.core.model;

import azure.core.model.implementation.AzureCoreEmbeddingVectorsImpl;
import azure.core.model.models.AzureEmbeddingModel;
import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.instrumentation.Instrumentation;
import io.clientcore.core.models.binarydata.BinaryData;
import java.util.List;

/**
 * Initializes a new instance of the synchronous ModelClient type.
 */
@ServiceClient(builder = ModelClientBuilder.class)
public final class ModelClient {
    @Metadata(generated = true)
    private final AzureCoreEmbeddingVectorsImpl serviceClient;

    private final Instrumentation instrumentation;

    /**
     * Initializes an instance of ModelClient class.
     * 
     * @param serviceClient the service client implementation.
     * @param instrumentation the instrumentation instance.
     */
    @Metadata(generated = true)
    ModelClient(AzureCoreEmbeddingVectorsImpl serviceClient, Instrumentation instrumentation) {
        this.serviceClient = serviceClient;
        this.instrumentation = instrumentation;
    }

    /**
     * get an embedding vector.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *     int (Required)
     * ]
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return an embedding vector.
     */
    @Metadata(generated = true)
    public Response<List<Integer>> getWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("_Specs_.Azure.Core.Model.AzureCoreEmbeddingVector.get",
            requestOptions, updatedOptions -> this.serviceClient.getWithResponse(updatedOptions));
    }

    /**
     * put an embedding vector.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *     int (Required)
     * ]
     * }
     * </pre>
     * 
     * @param body _.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> putWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("_Specs_.Azure.Core.Model.AzureCoreEmbeddingVector.put",
            requestOptions, updatedOptions -> this.serviceClient.putWithResponse(body, updatedOptions));
    }

    /**
     * post a model which has an embeddingVector property.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     embedding (Required): [
     *         int (Required)
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     embedding (Required): [
     *         int (Required)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param body _.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<AzureEmbeddingModel> postWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("_Specs_.Azure.Core.Model.AzureCoreEmbeddingVector.post",
            requestOptions, updatedOptions -> this.serviceClient.postWithResponse(body, updatedOptions));
    }

    /**
     * get an embedding vector.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an embedding vector.
     */
    @Metadata(generated = true)
    public List<Integer> get() {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(requestOptions).getValue();
    }

    /**
     * put an embedding vector.
     * 
     * @param body _.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void put(List<Integer> body) {
        // Generated convenience method for putWithResponse
        RequestOptions requestOptions = new RequestOptions();
        putWithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * post a model which has an embeddingVector property.
     * 
     * @param body _.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public AzureEmbeddingModel post(AzureEmbeddingModel body) {
        // Generated convenience method for postWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return postWithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }
}
