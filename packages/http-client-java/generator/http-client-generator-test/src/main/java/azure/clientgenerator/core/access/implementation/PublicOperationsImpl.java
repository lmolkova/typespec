// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.clientgenerator.core.access.implementation;

import azure.clientgenerator.core.access.publicoperation.models.NoDecoratorModelInPublic;
import azure.clientgenerator.core.access.publicoperation.models.PublicDecoratorModelInPublic;
import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.QueryParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;

/**
 * An instance of this class provides access to all the operations defined in PublicOperations.
 */
public final class PublicOperationsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final PublicOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final AccessClientImpl client;

    /**
     * Initializes an instance of PublicOperationsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    PublicOperationsImpl(AccessClientImpl client) {
        this.service = RestProxy.create(PublicOperationsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for AccessClientPublicOperations to be used by the proxy service to
     * perform REST calls.
     */
    @ServiceInterface(name = "AccessClientPublicOp", host = "{endpoint}")
    public interface PublicOperationsService {
        static PublicOperationsService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer) {
            try {
                Class<?> clazz
                    = Class.forName("azure.clientgenerator.core.access.implementation.PublicOperationsServiceImpl");
                return (PublicOperationsService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class)
                    .invoke(null, pipeline, serializer);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/azure/client-generator-core/access/publicOperation/noDecoratorInPublic",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<NoDecoratorModelInPublic> noDecoratorInPublic(@HostParam("endpoint") String endpoint,
            @QueryParam("name") String name, @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/azure/client-generator-core/access/publicOperation/noDecoratorInPublic",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default NoDecoratorModelInPublic noDecoratorInPublic(@HostParam("endpoint") String endpoint,
            @QueryParam("name") String name, @HeaderParam("Accept") String accept) {
            return noDecoratorInPublic(endpoint, name, accept, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/azure/client-generator-core/access/publicOperation/publicDecoratorInPublic",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<PublicDecoratorModelInPublic> publicDecoratorInPublic(@HostParam("endpoint") String endpoint,
            @QueryParam("name") String name, @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/azure/client-generator-core/access/publicOperation/publicDecoratorInPublic",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default PublicDecoratorModelInPublic publicDecoratorInPublic(@HostParam("endpoint") String endpoint,
            @QueryParam("name") String name, @HeaderParam("Accept") String accept) {
            return publicDecoratorInPublic(endpoint, name, accept, null).getValue();
        }
    }

    /**
     * The noDecoratorInPublic operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param name The name parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return used in a public operation, should be generated and exported.
     */
    public Response<NoDecoratorModelInPublic> noDecoratorInPublicWithResponse(String name,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.noDecoratorInPublic(this.client.getEndpoint(), name, accept, requestOptions);
    }

    /**
     * The publicDecoratorInPublic operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param name The name parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return used in a public operation, should be generated and exported.
     */
    public Response<PublicDecoratorModelInPublic> publicDecoratorInPublicWithResponse(String name,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.publicDecoratorInPublic(this.client.getEndpoint(), name, accept, requestOptions);
    }
}
