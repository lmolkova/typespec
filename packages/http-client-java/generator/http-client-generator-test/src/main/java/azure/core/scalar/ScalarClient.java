// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.core.scalar;

import azure.core.scalar.implementation.AzureLocationScalarsImpl;
import azure.core.scalar.models.AzureLocationModel;
import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.instrumentation.Instrumentation;
import io.clientcore.core.models.binarydata.BinaryData;

/**
 * Initializes a new instance of the synchronous ScalarClient type.
 */
@ServiceClient(builder = ScalarClientBuilder.class)
public final class ScalarClient {
    @Metadata(generated = true)
    private final AzureLocationScalarsImpl serviceClient;

    private final Instrumentation instrumentation;

    /**
     * Initializes an instance of ScalarClient class.
     * 
     * @param serviceClient the service client implementation.
     * @param instrumentation the instrumentation instance.
     */
    @Metadata(generated = true)
    ScalarClient(AzureLocationScalarsImpl serviceClient, Instrumentation instrumentation) {
        this.serviceClient = serviceClient;
        this.instrumentation = instrumentation;
    }

    /**
     * get azureLocation value.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return azureLocation value.
     */
    @Metadata(generated = true)
    public Response<String> getWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("_Specs_.Azure.Core.Scalar.AzureLocationScalar.get",
            requestOptions, updatedOptions -> this.serviceClient.getWithResponse(updatedOptions));
    }

    /**
     * put azureLocation value.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param body _.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> putWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("_Specs_.Azure.Core.Scalar.AzureLocationScalar.put",
            requestOptions, updatedOptions -> this.serviceClient.putWithResponse(body, updatedOptions));
    }

    /**
     * post a model which has azureLocation property.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     location: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     location: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param body _.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<AzureLocationModel> postWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("_Specs_.Azure.Core.Scalar.AzureLocationScalar.post",
            requestOptions, updatedOptions -> this.serviceClient.postWithResponse(body, updatedOptions));
    }

    /**
     * azureLocation value header.
     * 
     * @param region _.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> headerMethodWithResponse(String region, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("_Specs_.Azure.Core.Scalar.AzureLocationScalar.header",
            requestOptions, updatedOptions -> this.serviceClient.headerMethodWithResponse(region, updatedOptions));
    }

    /**
     * azureLocation value query.
     * 
     * @param region _.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> queryWithResponse(String region, RequestOptions requestOptions) {
        return this.instrumentation.instrumentWithResponse("_Specs_.Azure.Core.Scalar.AzureLocationScalar.query",
            requestOptions, updatedOptions -> this.serviceClient.queryWithResponse(region, updatedOptions));
    }

    /**
     * get azureLocation value.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azureLocation value.
     */
    @Metadata(generated = true)
    public String get() {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(requestOptions).getValue();
    }

    /**
     * put azureLocation value.
     * 
     * @param body _.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void put(String body) {
        // Generated convenience method for putWithResponse
        RequestOptions requestOptions = new RequestOptions();
        putWithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * post a model which has azureLocation property.
     * 
     * @param body _.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public AzureLocationModel post(AzureLocationModel body) {
        // Generated convenience method for postWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return postWithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * azureLocation value header.
     * 
     * @param region _.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void headerMethod(String region) {
        // Generated convenience method for headerMethodWithResponse
        RequestOptions requestOptions = new RequestOptions();
        headerMethodWithResponse(region, requestOptions).getValue();
    }

    /**
     * azureLocation value query.
     * 
     * @param region _.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void query(String region) {
        // Generated convenience method for queryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        queryWithResponse(region, requestOptions).getValue();
    }
}
