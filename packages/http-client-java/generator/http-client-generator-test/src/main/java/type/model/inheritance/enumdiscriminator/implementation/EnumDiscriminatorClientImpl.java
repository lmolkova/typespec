// Code generated by Microsoft (R) TypeSpec Code Generator.

package type.model.inheritance.enumdiscriminator.implementation;

import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.BodyParam;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;
import type.model.inheritance.enumdiscriminator.models.Dog;
import type.model.inheritance.enumdiscriminator.models.Snake;

/**
 * Initializes a new instance of the EnumDiscriminatorClient type.
 */
public final class EnumDiscriminatorClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final EnumDiscriminatorClientService service;

    /**
     * Service host.
     */
    private final String endpoint;

    /**
     * Gets Service host.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * Initializes an instance of EnumDiscriminatorClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Service host.
     */
    public EnumDiscriminatorClientImpl(HttpPipeline httpPipeline, String endpoint) {
        this.httpPipeline = httpPipeline;
        this.endpoint = endpoint;
        this.service = RestProxy.create(EnumDiscriminatorClientService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for EnumDiscriminatorClient to be used by the proxy service to perform
     * REST calls.
     */
    @ServiceInterface(name = "EnumDiscriminatorCli", host = "{endpoint}")
    public interface EnumDiscriminatorClientService {
        static EnumDiscriminatorClientService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer,
            @HostParam("endpoint") String endpoint) {
            try {
                Class<?> clazz = Class.forName(
                    "type.model.inheritance.enumdiscriminator.implementation.EnumDiscriminatorClientServiceImpl");
                return (EnumDiscriminatorClientService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class, String.class)
                    .invoke(null, pipeline, serializer, endpoint);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/type/model/inheritance/enum-discriminator/extensible-enum",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Dog> getExtensibleModel(@HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/type/model/inheritance/enum-discriminator/extensible-enum",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default Dog getExtensibleModel(@HeaderParam("Accept") String accept) {
            return getExtensibleModel(accept, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.PUT,
            path = "/type/model/inheritance/enum-discriminator/extensible-enum",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> putExtensibleModel(@HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData input, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.PUT,
            path = "/type/model/inheritance/enum-discriminator/extensible-enum",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void putExtensibleModel(@HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData input) {
            putExtensibleModel(contentType, input, null);
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/type/model/inheritance/enum-discriminator/extensible-enum/missingdiscriminator",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Dog> getExtensibleModelMissingDiscriminator(@HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/type/model/inheritance/enum-discriminator/extensible-enum/missingdiscriminator",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default Dog getExtensibleModelMissingDiscriminator(@HeaderParam("Accept") String accept) {
            return getExtensibleModelMissingDiscriminator(accept, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/type/model/inheritance/enum-discriminator/extensible-enum/wrongdiscriminator",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Dog> getExtensibleModelWrongDiscriminator(@HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/type/model/inheritance/enum-discriminator/extensible-enum/wrongdiscriminator",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default Dog getExtensibleModelWrongDiscriminator(@HeaderParam("Accept") String accept) {
            return getExtensibleModelWrongDiscriminator(accept, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/type/model/inheritance/enum-discriminator/fixed-enum",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Snake> getFixedModel(@HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/type/model/inheritance/enum-discriminator/fixed-enum",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default Snake getFixedModel(@HeaderParam("Accept") String accept) {
            return getFixedModel(accept, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.PUT,
            path = "/type/model/inheritance/enum-discriminator/fixed-enum",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> putFixedModel(@HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData input, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.PUT,
            path = "/type/model/inheritance/enum-discriminator/fixed-enum",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void putFixedModel(@HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData input) {
            putFixedModel(contentType, input, null);
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/type/model/inheritance/enum-discriminator/fixed-enum/missingdiscriminator",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Snake> getFixedModelMissingDiscriminator(@HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/type/model/inheritance/enum-discriminator/fixed-enum/missingdiscriminator",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default Snake getFixedModelMissingDiscriminator(@HeaderParam("Accept") String accept) {
            return getFixedModelMissingDiscriminator(accept, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/type/model/inheritance/enum-discriminator/fixed-enum/wrongdiscriminator",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Snake> getFixedModelWrongDiscriminator(@HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/type/model/inheritance/enum-discriminator/fixed-enum/wrongdiscriminator",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default Snake getFixedModelWrongDiscriminator(@HeaderParam("Accept") String accept) {
            return getFixedModelWrongDiscriminator(accept, null).getValue();
        }
    }

    /**
     * Receive model with extensible enum discriminator type.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(golden) (Required)
     *     weight: int (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return test extensible enum type for discriminator.
     */
    public Response<Dog> getExtensibleModelWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getExtensibleModel(accept, requestOptions);
    }

    /**
     * Send model with extensible enum discriminator type.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(golden) (Required)
     *     weight: int (Required)
     * }
     * }
     * </pre>
     * 
     * @param input Dog to create.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> putExtensibleModelWithResponse(BinaryData input, RequestOptions requestOptions) {
        final String contentType = "application/json";
        return service.putExtensibleModel(contentType, input, requestOptions);
    }

    /**
     * Get a model omitting the discriminator.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(golden) (Required)
     *     weight: int (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a model omitting the discriminator.
     */
    public Response<Dog> getExtensibleModelMissingDiscriminatorWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getExtensibleModelMissingDiscriminator(accept, requestOptions);
    }

    /**
     * Get a model containing discriminator value never defined.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(golden) (Required)
     *     weight: int (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a model containing discriminator value never defined.
     */
    public Response<Dog> getExtensibleModelWrongDiscriminatorWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getExtensibleModelWrongDiscriminator(accept, requestOptions);
    }

    /**
     * Receive model with fixed enum discriminator type.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(cobra) (Required)
     *     length: int (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return test fixed enum type for discriminator.
     */
    public Response<Snake> getFixedModelWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getFixedModel(accept, requestOptions);
    }

    /**
     * Send model with fixed enum discriminator type.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(cobra) (Required)
     *     length: int (Required)
     * }
     * }
     * </pre>
     * 
     * @param input Snake to create.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> putFixedModelWithResponse(BinaryData input, RequestOptions requestOptions) {
        final String contentType = "application/json";
        return service.putFixedModel(contentType, input, requestOptions);
    }

    /**
     * Get a model omitting the discriminator.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(cobra) (Required)
     *     length: int (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a model omitting the discriminator.
     */
    public Response<Snake> getFixedModelMissingDiscriminatorWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getFixedModelMissingDiscriminator(accept, requestOptions);
    }

    /**
     * Get a model containing discriminator value never defined.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(cobra) (Required)
     *     length: int (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a model containing discriminator value never defined.
     */
    public Response<Snake> getFixedModelWrongDiscriminatorWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getFixedModelWrongDiscriminator(accept, requestOptions);
    }
}
