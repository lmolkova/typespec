// Code generated by Microsoft (R) TypeSpec Code Generator.

package server.path.multiple.implementation;

import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.PathParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;
import server.path.multiple.MultipleServiceVersion;

/**
 * Initializes a new instance of the MultipleClient type.
 */
public final class MultipleClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final MultipleClientService service;

    /**
     * Pass in http://localhost:3000 for endpoint.
     */
    private final String endpoint;

    /**
     * Gets Pass in http://localhost:3000 for endpoint.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Service version.
     */
    private final MultipleServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public MultipleServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * Initializes an instance of MultipleClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Pass in http://localhost:3000 for endpoint.
     * @param serviceVersion Service version.
     */
    public MultipleClientImpl(HttpPipeline httpPipeline, String endpoint, MultipleServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service = RestProxy.create(MultipleClientService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for MultipleClient to be used by the proxy service to perform REST calls.
     */
    @ServiceInterface(name = "MultipleClient", host = "{endpoint}/server/path/multiple/{apiVersion}")
    public interface MultipleClientService {
        static MultipleClientService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer,
            @HostParam("endpoint") String endpoint, @HostParam("apiVersion") String apiVersion) {
            try {
                Class<?> clazz = Class.forName("server.path.multiple.implementation.MultipleClientServiceImpl");
                return (MultipleClientService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class, String.class, String.class)
                    .invoke(null, pipeline, serializer, endpoint, apiVersion);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> noOperationParams(RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void noOperationParams() {
            noOperationParams(null);
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/{keyword}", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> withOperationPathParam(@PathParam("keyword") String keyword, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/{keyword}", expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void withOperationPathParam(@PathParam("keyword") String keyword) {
            withOperationPathParam(keyword, null);
        }
    }

    /**
     * The noOperationParams operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> noOperationParamsWithResponse(RequestOptions requestOptions) {
        return service.noOperationParams(requestOptions);
    }

    /**
     * The withOperationPathParam operation.
     * 
     * @param keyword The keyword parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> withOperationPathParamWithResponse(String keyword, RequestOptions requestOptions) {
        return service.withOperationPathParam(keyword, requestOptions);
    }
}
