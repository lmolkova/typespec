// Code generated by Microsoft (R) TypeSpec Code Generator.

package routes.implementation;

import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.PathParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;

/**
 * An instance of this class provides access to all the operations defined in PathParameters.
 */
public final class PathParametersImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final PathParametersService service;

    /**
     * The service client containing this operation class.
     */
    private final RoutesClientImpl client;

    /**
     * Initializes an instance of PathParametersImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    PathParametersImpl(RoutesClientImpl client) {
        this.service = RestProxy.create(PathParametersService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for RoutesClientPathParameters to be used by the proxy service to perform
     * REST calls.
     */
    @ServiceInterface(name = "RoutesClientPathPara", host = "{endpoint}")
    public interface PathParametersService {
        static PathParametersService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer) {
            try {
                Class<?> clazz = Class.forName("routes.implementation.PathParametersServiceImpl");
                return (PathParametersService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class)
                    .invoke(null, pipeline, serializer);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/routes/path/template-only/{param}",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> templateOnly(@HostParam("endpoint") String endpoint, @PathParam("param") String param,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/routes/path/template-only/{param}",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void templateOnly(@HostParam("endpoint") String endpoint, @PathParam("param") String param) {
            templateOnly(endpoint, param, null);
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/routes/path/explicit/{param}",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> explicit(@HostParam("endpoint") String endpoint, @PathParam("param") String param,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/routes/path/explicit/{param}",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void explicit(@HostParam("endpoint") String endpoint, @PathParam("param") String param) {
            explicit(endpoint, param, null);
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/routes/path/annotation-only/{param}",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> annotationOnly(@HostParam("endpoint") String endpoint, @PathParam("param") String param,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/routes/path/annotation-only/{param}",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void annotationOnly(@HostParam("endpoint") String endpoint, @PathParam("param") String param) {
            annotationOnly(endpoint, param, null);
        }
    }

    /**
     * The templateOnly operation.
     * 
     * @param param The param parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> templateOnlyWithResponse(String param, RequestOptions requestOptions) {
        return service.templateOnly(this.client.getEndpoint(), param, requestOptions);
    }

    /**
     * The explicit operation.
     * 
     * @param param The param parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> explicitWithResponse(String param, RequestOptions requestOptions) {
        return service.explicit(this.client.getEndpoint(), param, requestOptions);
    }

    /**
     * The annotationOnly operation.
     * 
     * @param param The param parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> annotationOnlyWithResponse(String param, RequestOptions requestOptions) {
        return service.annotationOnly(this.client.getEndpoint(), param, requestOptions);
    }
}
