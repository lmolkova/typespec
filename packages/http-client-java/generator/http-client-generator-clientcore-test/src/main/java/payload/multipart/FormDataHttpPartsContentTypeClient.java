// Code generated by Microsoft (R) TypeSpec Code Generator.

package payload.multipart;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.instrumentation.Instrumentation;
import io.clientcore.core.models.binarydata.BinaryData;
import payload.multipart.implementation.FormDataHttpPartsContentTypesImpl;
import payload.multipart.implementation.MultipartFormDataHelper;

/**
 * Initializes a new instance of the synchronous MultiPartClient type.
 */
@ServiceClient(builder = MultiPartClientBuilder.class)
public final class FormDataHttpPartsContentTypeClient {
    @Metadata(generated = true)
    private final FormDataHttpPartsContentTypesImpl serviceClient;

    private final Instrumentation instrumentation;

    /**
     * Initializes an instance of FormDataHttpPartsContentTypeClient class.
     * 
     * @param serviceClient the service client implementation.
     * @param instrumentation the instrumentation instance.
     */
    @Metadata(generated = true)
    FormDataHttpPartsContentTypeClient(FormDataHttpPartsContentTypesImpl serviceClient,
        Instrumentation instrumentation) {
        this.serviceClient = serviceClient;
        this.instrumentation = instrumentation;
    }

    /**
     * Test content-type: multipart/form-data.
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    Response<Void> imageJpegContentTypeWithResponse(BinaryData body, RequestOptions requestOptions) {
        // Operation 'imageJpegContentType' is of content-type 'multipart/form-data'. Protocol API is not usable and
        // hence not generated.
        return this.instrumentation.instrument("Payload.MultiPart.FormData.HttpParts.ContentType.imageJpegContentType",
            requestOptions,
            updatedOptions -> this.serviceClient.imageJpegContentTypeWithResponse(body, updatedOptions));
    }

    /**
     * Test content-type: multipart/form-data.
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    Response<Void> requiredContentTypeWithResponse(BinaryData body, RequestOptions requestOptions) {
        // Operation 'requiredContentType' is of content-type 'multipart/form-data'. Protocol API is not usable and
        // hence not generated.
        return this.instrumentation.instrument("Payload.MultiPart.FormData.HttpParts.ContentType.requiredContentType",
            requestOptions, updatedOptions -> this.serviceClient.requiredContentTypeWithResponse(body, updatedOptions));
    }

    /**
     * Test content-type: multipart/form-data for optional content type.
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    Response<Void> optionalContentTypeWithResponse(BinaryData body, RequestOptions requestOptions) {
        // Operation 'optionalContentType' is of content-type 'multipart/form-data'. Protocol API is not usable and
        // hence not generated.
        return this.instrumentation.instrument("Payload.MultiPart.FormData.HttpParts.ContentType.optionalContentType",
            requestOptions, updatedOptions -> this.serviceClient.optionalContentTypeWithResponse(body, updatedOptions));
    }

    /**
     * Test content-type: multipart/form-data.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void imageJpegContentType(FileWithHttpPartSpecificContentTypeRequest body) {
        // Generated convenience method for imageJpegContentTypeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        imageJpegContentTypeWithResponse(
            new MultipartFormDataHelper(requestOptions)
                .serializeFileField("profileImage", body.getProfileImage().getContent(),
                    body.getProfileImage().getContentType(), body.getProfileImage().getFilename())
                .end()
                .getRequestBody(),
            requestOptions).getValue();
    }

    /**
     * Test content-type: multipart/form-data.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void requiredContentType(FileWithHttpPartRequiredContentTypeRequest body) {
        // Generated convenience method for requiredContentTypeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        requiredContentTypeWithResponse(
            new MultipartFormDataHelper(requestOptions)
                .serializeFileField("profileImage", body.getProfileImage().getContent(),
                    body.getProfileImage().getContentType(), body.getProfileImage().getFilename())
                .end()
                .getRequestBody(),
            requestOptions).getValue();
    }

    /**
     * Test content-type: multipart/form-data for optional content type.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void optionalContentType(FileWithHttpPartOptionalContentTypeRequest body) {
        // Generated convenience method for optionalContentTypeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        optionalContentTypeWithResponse(
            new MultipartFormDataHelper(requestOptions)
                .serializeFileField("profileImage", body.getProfileImage().getContent(),
                    body.getProfileImage().getContentType(), body.getProfileImage().getFilename())
                .end()
                .getRequestBody(),
            requestOptions).getValue();
    }
}
