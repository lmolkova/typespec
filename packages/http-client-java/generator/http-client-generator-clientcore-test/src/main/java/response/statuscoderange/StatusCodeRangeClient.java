// Code generated by Microsoft (R) TypeSpec Code Generator.

package response.statuscoderange;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.instrumentation.Instrumentation;
import response.statuscoderange.implementation.StatusCodeRangeClientImpl;

/**
 * Initializes a new instance of the synchronous StatusCodeRangeClient type.
 */
@ServiceClient(builder = StatusCodeRangeClientBuilder.class)
public final class StatusCodeRangeClient {
    @Metadata(generated = true)
    private final StatusCodeRangeClientImpl serviceClient;

    private final Instrumentation instrumentation;

    /**
     * Initializes an instance of StatusCodeRangeClient class.
     * 
     * @param serviceClient the service client implementation.
     * @param instrumentation the instrumentation instance.
     */
    @Metadata(generated = true)
    StatusCodeRangeClient(StatusCodeRangeClientImpl serviceClient, Instrumentation instrumentation) {
        this.serviceClient = serviceClient;
        this.instrumentation = instrumentation;
    }

    /**
     * The errorResponseStatusCodeInRange operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * int
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Integer> errorResponseStatusCodeInRangeWithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrument("Response.StatusCodeRange.errorResponseStatusCodeInRange",
            requestOptions,
            updatedOptions -> this.serviceClient.errorResponseStatusCodeInRangeWithResponse(updatedOptions));
    }

    /**
     * The errorResponseStatusCode404 operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * int
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Integer> errorResponseStatusCode404WithResponse(RequestOptions requestOptions) {
        return this.instrumentation.instrument("Response.StatusCodeRange.errorResponseStatusCode404", requestOptions,
            updatedOptions -> this.serviceClient.errorResponseStatusCode404WithResponse(updatedOptions));
    }

    /**
     * The errorResponseStatusCodeInRange operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public int errorResponseStatusCodeInRange() {
        // Generated convenience method for errorResponseStatusCodeInRangeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return errorResponseStatusCodeInRangeWithResponse(requestOptions).getValue();
    }

    /**
     * The errorResponseStatusCode404 operation.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public int errorResponseStatusCode404() {
        // Generated convenience method for errorResponseStatusCode404WithResponse
        RequestOptions requestOptions = new RequestOptions();
        return errorResponseStatusCode404WithResponse(requestOptions).getValue();
    }
}
