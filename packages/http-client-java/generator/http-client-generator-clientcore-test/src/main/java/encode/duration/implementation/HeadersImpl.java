// Code generated by Microsoft (R) TypeSpec Code Generator.

package encode.duration.implementation;

import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.ObjectSerializer;
import java.lang.reflect.InvocationTargetException;
import java.time.Duration;
import java.util.List;
import java.util.stream.Collectors;

/**
 * An instance of this class provides access to all the operations defined in Headers.
 */
public final class HeadersImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final HeadersService service;

    /**
     * The service client containing this operation class.
     */
    private final DurationClientImpl client;

    /**
     * Initializes an instance of HeadersImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    HeadersImpl(DurationClientImpl client) {
        this.service = RestProxy.create(HeadersService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for DurationClientHeaders to be used by the proxy service to perform REST
     * calls.
     */
    @ServiceInterface(name = "DurationClientHeader", host = "{endpoint}")
    public interface HeadersService {
        static HeadersService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer) {
            try {
                Class<?> clazz = Class.forName("encode.duration.implementation.HeadersServiceImpl");
                return (HeadersService) clazz.getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class)
                    .invoke(null, pipeline, serializer);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/encode/duration/header/default",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> defaultMethod(@HostParam("endpoint") String endpoint, @HeaderParam("duration") Duration duration,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/encode/duration/header/default",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void defaultMethod(@HostParam("endpoint") String endpoint, @HeaderParam("duration") Duration duration) {
            defaultMethod(endpoint, duration, null);
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/encode/duration/header/iso8601",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> iso8601(@HostParam("endpoint") String endpoint, @HeaderParam("duration") Duration duration,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/encode/duration/header/iso8601",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void iso8601(@HostParam("endpoint") String endpoint, @HeaderParam("duration") Duration duration) {
            iso8601(endpoint, duration, null);
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/encode/duration/header/iso8601-array",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> iso8601Array(@HostParam("endpoint") String endpoint, @HeaderParam("duration") String duration,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/encode/duration/header/iso8601-array",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void iso8601Array(@HostParam("endpoint") String endpoint, @HeaderParam("duration") String duration) {
            iso8601Array(endpoint, duration, null);
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/encode/duration/header/int32-seconds",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> int32Seconds(@HostParam("endpoint") String endpoint, @HeaderParam("duration") long duration,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/encode/duration/header/int32-seconds",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void int32Seconds(@HostParam("endpoint") String endpoint, @HeaderParam("duration") long duration) {
            int32Seconds(endpoint, duration, null);
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/encode/duration/header/float-seconds",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> floatSeconds(@HostParam("endpoint") String endpoint, @HeaderParam("duration") double duration,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/encode/duration/header/float-seconds",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void floatSeconds(@HostParam("endpoint") String endpoint, @HeaderParam("duration") double duration) {
            floatSeconds(endpoint, duration, null);
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/encode/duration/header/float64-seconds",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        Response<Void> float64Seconds(@HostParam("endpoint") String endpoint, @HeaderParam("duration") double duration,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/encode/duration/header/float64-seconds",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail
        default void float64Seconds(@HostParam("endpoint") String endpoint, @HeaderParam("duration") double duration) {
            float64Seconds(endpoint, duration, null);
        }
    }

    /**
     * The defaultMethod operation.
     * 
     * @param duration The duration parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> defaultMethodWithResponse(Duration duration, RequestOptions requestOptions) {
        return service.defaultMethod(this.client.getEndpoint(), duration, requestOptions);
    }

    /**
     * The iso8601 operation.
     * 
     * @param duration The duration parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> iso8601WithResponse(Duration duration, RequestOptions requestOptions) {
        return service.iso8601(this.client.getEndpoint(), duration, requestOptions);
    }

    /**
     * The iso8601Array operation.
     * 
     * @param duration The duration parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> iso8601ArrayWithResponse(List<Duration> duration, RequestOptions requestOptions) {
        String durationConverted = duration.stream().map(paramItemValue -> {
            if (paramItemValue == null) {
                return "";
            } else {
                String itemValueString = BinaryData.fromObject(paramItemValue).toString();
                int strLength = itemValueString.length();
                int startOffset = 0;
                while (startOffset < strLength) {
                    if (itemValueString.charAt(startOffset) != '"') {
                        break;
                    }
                    startOffset++;
                }
                if (startOffset == strLength) {
                    return "";
                }
                int endOffset = strLength - 1;
                while (endOffset >= 0) {
                    if (itemValueString.charAt(endOffset) != '"') {
                        break;
                    }

                    endOffset--;
                }
                return itemValueString.substring(startOffset, endOffset + 1);
            }
        }).collect(Collectors.joining(","));
        return service.iso8601Array(this.client.getEndpoint(), durationConverted, requestOptions);
    }

    /**
     * The int32Seconds operation.
     * 
     * @param duration The duration parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> int32SecondsWithResponse(Duration duration, RequestOptions requestOptions) {
        long durationConverted = duration.getSeconds();
        return service.int32Seconds(this.client.getEndpoint(), durationConverted, requestOptions);
    }

    /**
     * The floatSeconds operation.
     * 
     * @param duration The duration parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> floatSecondsWithResponse(Duration duration, RequestOptions requestOptions) {
        double durationConverted = (double) duration.toNanos() / 1000_000_000L;
        return service.floatSeconds(this.client.getEndpoint(), durationConverted, requestOptions);
    }

    /**
     * The float64Seconds operation.
     * 
     * @param duration The duration parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> float64SecondsWithResponse(Duration duration, RequestOptions requestOptions) {
        double durationConverted = (double) duration.toNanos() / 1000_000_000L;
        return service.float64Seconds(this.client.getEndpoint(), durationConverted, requestOptions);
    }
}
